{"mappings":"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;;ACnDf;;AAAA,MAAM,YAAW;IACb;IACA;IACA;IACA;IAEA;IACA;IACA;IAEA;IACA;IAEA;IACA;IACA;IACA;IACA;IACA,6BAA6B;IAC7B;IACA;IACA,mCAAmC;IACnC,iCAAiC;IAEjC;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;CACH,CAAC,IAAI,CAAC;kBACQ;;;AC/Cf;;AAAA,MAAM,YAAW;IACb;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;CACH,CAAC,IAAI,CAAC;kBACQ;;;ACbf;;AAAA,MAAM,gBAAe;IAEjB;IACA;IACA;IACA;IAEA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IAEA;IACA;IAEA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;CACH,CAAC,IAAI,CAAC;kBACQ;;;AC7Df;;AAUA,8CAAS;AAAT,0CAAmB;AAAnB,2CAAyB;AAAzB,0CAAgC;AAAhC,0CAAsC;AAAtC,0CAA4C;AAA5C,2CAAkD;AAAlD,0CAAyD;AAAzD,0CAA+D;AAA/D,0CAAqE;AAVrE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;ACTA;;;CAGC,GACD,0BAA0B;AAC1B;;6CAAW;gDACA;4CACA;AACX;;;;CAIC,GAED,wDAAgB;AAIhB;;;;CAIC,GAED,8CAAgB;AAGhB;;;;;;;;CAQC,GAED,4CAAgB;AAhCT,IAAI,UAAU;AACd,IAAI,aAAa,OAAO,iBAAiB,cAAc,eAAe,KAAK;AAC3E,IAAI,SAAS,KAAK,MAAM;AAOxB,SAAS,mBAAmB,IAAI,EAAE;IACvC,aAAa;AACf;AACA,IAAI,SAAS,KAAK,EAAE,GAAG;AAOhB,SAAS,SA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","sources":["node_modules/@parcel/runtime-browser-hmr/lib/runtime-dde34799f62ad5ff.js","index.js","shaders/frag_Phong.js","node_modules/@parcel/transformer-js/src/esmodule-helpers.js","shaders/vert_Phong.js","shaders/vert_BlinnPhong.js","shaders/vert_Lambert.js","shaders/frag_Goureau.js","shaders/frag_ToonShading.js","node_modules/gl-matrix/esm/index.js","node_modules/gl-matrix/esm/common.js","node_modules/gl-matrix/esm/mat2.js","node_modules/gl-matrix/esm/mat2d.js","node_modules/gl-matrix/esm/mat3.js","node_modules/gl-matrix/esm/mat4.js","node_modules/gl-matrix/esm/quat.js","node_modules/gl-matrix/esm/vec3.js","node_modules/gl-matrix/esm/vec4.js","node_modules/gl-matrix/esm/quat2.js","node_modules/gl-matrix/esm/vec2.js"],"sourcesContent":["var HMR_HOST = null;var HMR_PORT = null;var HMR_SECURE = false;var HMR_ENV_HASH = \"d6ea1d42532a7575\";module.bundle.HMR_BUNDLE_ID = \"0a8ecb283d214d75\";\"use strict\";\n\n/* global HMR_HOST, HMR_PORT, HMR_ENV_HASH, HMR_SECURE, chrome, browser, globalThis, __parcel__import__, __parcel__importScripts__, ServiceWorkerGlobalScope */\n\n/*::\nimport type {\n  HMRAsset,\n  HMRMessage,\n} from '@parcel/reporter-dev-server/src/HMRServer.js';\ninterface ParcelRequire {\n  (string): mixed;\n  cache: {|[string]: ParcelModule|};\n  hotData: {|[string]: mixed|};\n  Module: any;\n  parent: ?ParcelRequire;\n  isParcelRequire: true;\n  modules: {|[string]: [Function, {|[string]: string|}]|};\n  HMR_BUNDLE_ID: string;\n  root: ParcelRequire;\n}\ninterface ParcelModule {\n  hot: {|\n    data: mixed,\n    accept(cb: (Function) => void): void,\n    dispose(cb: (mixed) => void): void,\n    // accept(deps: Array<string> | string, cb: (Function) => void): void,\n    // decline(): void,\n    _acceptCallbacks: Array<(Function) => void>,\n    _disposeCallbacks: Array<(mixed) => void>,\n  |};\n}\ninterface ExtensionContext {\n  runtime: {|\n    reload(): void,\n    getURL(url: string): string;\n    getManifest(): {manifest_version: number, ...};\n  |};\n}\ndeclare var module: {bundle: ParcelRequire, ...};\ndeclare var HMR_HOST: string;\ndeclare var HMR_PORT: string;\ndeclare var HMR_ENV_HASH: string;\ndeclare var HMR_SECURE: boolean;\ndeclare var chrome: ExtensionContext;\ndeclare var browser: ExtensionContext;\ndeclare var __parcel__import__: (string) => Promise<void>;\ndeclare var __parcel__importScripts__: (string) => Promise<void>;\ndeclare var globalThis: typeof self;\ndeclare var ServiceWorkerGlobalScope: Object;\n*/\nvar OVERLAY_ID = '__parcel__error__overlay__';\nvar OldModule = module.bundle.Module;\n\nfunction Module(moduleName) {\n  OldModule.call(this, moduleName);\n  this.hot = {\n    data: module.bundle.hotData[moduleName],\n    _acceptCallbacks: [],\n    _disposeCallbacks: [],\n    accept: function (fn) {\n      this._acceptCallbacks.push(fn || function () {});\n    },\n    dispose: function (fn) {\n      this._disposeCallbacks.push(fn);\n    }\n  };\n  module.bundle.hotData[moduleName] = undefined;\n}\n\nmodule.bundle.Module = Module;\nmodule.bundle.hotData = {};\nvar checkedAssets\n/*: {|[string]: boolean|} */\n, assetsToDispose\n/*: Array<[ParcelRequire, string]> */\n, assetsToAccept\n/*: Array<[ParcelRequire, string]> */\n;\n\nfunction getHostname() {\n  return HMR_HOST || (location.protocol.indexOf('http') === 0 ? location.hostname : 'localhost');\n}\n\nfunction getPort() {\n  return HMR_PORT || location.port;\n} // eslint-disable-next-line no-redeclare\n\n\nvar parent = module.bundle.parent;\n\nif ((!parent || !parent.isParcelRequire) && typeof WebSocket !== 'undefined') {\n  var hostname = getHostname();\n  var port = getPort();\n  var protocol = HMR_SECURE || location.protocol == 'https:' && !/localhost|127.0.0.1|0.0.0.0/.test(hostname) ? 'wss' : 'ws';\n  var ws = new WebSocket(protocol + '://' + hostname + (port ? ':' + port : '') + '/'); // Web extension context\n\n  var extCtx = typeof chrome === 'undefined' ? typeof browser === 'undefined' ? null : browser : chrome; // Safari doesn't support sourceURL in error stacks.\n  // eval may also be disabled via CSP, so do a quick check.\n\n  var supportsSourceURL = false;\n\n  try {\n    (0, eval)('throw new Error(\"test\"); //# sourceURL=test.js');\n  } catch (err) {\n    supportsSourceURL = err.stack.includes('test.js');\n  } // $FlowFixMe\n\n\n  ws.onmessage = async function (event\n  /*: {data: string, ...} */\n  ) {\n    checkedAssets = {}\n    /*: {|[string]: boolean|} */\n    ;\n    assetsToAccept = [];\n    assetsToDispose = [];\n    var data\n    /*: HMRMessage */\n    = JSON.parse(event.data);\n\n    if (data.type === 'update') {\n      // Remove error overlay if there is one\n      if (typeof document !== 'undefined') {\n        removeErrorOverlay();\n      }\n\n      let assets = data.assets.filter(asset => asset.envHash === HMR_ENV_HASH); // Handle HMR Update\n\n      let handled = assets.every(asset => {\n        return asset.type === 'css' || asset.type === 'js' && hmrAcceptCheck(module.bundle.root, asset.id, asset.depsByBundle);\n      });\n\n      if (handled) {\n        console.clear(); // Dispatch custom event so other runtimes (e.g React Refresh) are aware.\n\n        if (typeof window !== 'undefined' && typeof CustomEvent !== 'undefined') {\n          window.dispatchEvent(new CustomEvent('parcelhmraccept'));\n        }\n\n        await hmrApplyUpdates(assets); // Dispose all old assets.\n\n        let processedAssets = {}\n        /*: {|[string]: boolean|} */\n        ;\n\n        for (let i = 0; i < assetsToDispose.length; i++) {\n          let id = assetsToDispose[i][1];\n\n          if (!processedAssets[id]) {\n            hmrDispose(assetsToDispose[i][0], id);\n            processedAssets[id] = true;\n          }\n        } // Run accept callbacks. This will also re-execute other disposed assets in topological order.\n\n\n        processedAssets = {};\n\n        for (let i = 0; i < assetsToAccept.length; i++) {\n          let id = assetsToAccept[i][1];\n\n          if (!processedAssets[id]) {\n            hmrAccept(assetsToAccept[i][0], id);\n            processedAssets[id] = true;\n          }\n        }\n      } else fullReload();\n    }\n\n    if (data.type === 'error') {\n      // Log parcel errors to console\n      for (let ansiDiagnostic of data.diagnostics.ansi) {\n        let stack = ansiDiagnostic.codeframe ? ansiDiagnostic.codeframe : ansiDiagnostic.stack;\n        console.error('🚨 [parcel]: ' + ansiDiagnostic.message + '\\n' + stack + '\\n\\n' + ansiDiagnostic.hints.join('\\n'));\n      }\n\n      if (typeof document !== 'undefined') {\n        // Render the fancy html overlay\n        removeErrorOverlay();\n        var overlay = createErrorOverlay(data.diagnostics.html); // $FlowFixMe\n\n        document.body.appendChild(overlay);\n      }\n    }\n  };\n\n  ws.onerror = function (e) {\n    console.error(e.message);\n  };\n\n  ws.onclose = function () {\n    console.warn('[parcel] 🚨 Connection to the HMR server was lost');\n  };\n}\n\nfunction removeErrorOverlay() {\n  var overlay = document.getElementById(OVERLAY_ID);\n\n  if (overlay) {\n    overlay.remove();\n    console.log('[parcel] ✨ Error resolved');\n  }\n}\n\nfunction createErrorOverlay(diagnostics) {\n  var overlay = document.createElement('div');\n  overlay.id = OVERLAY_ID;\n  let errorHTML = '<div style=\"background: black; opacity: 0.85; font-size: 16px; color: white; position: fixed; height: 100%; width: 100%; top: 0px; left: 0px; padding: 30px; font-family: Menlo, Consolas, monospace; z-index: 9999;\">';\n\n  for (let diagnostic of diagnostics) {\n    let stack = diagnostic.frames.length ? diagnostic.frames.reduce((p, frame) => {\n      return `${p}\n<a href=\"/__parcel_launch_editor?file=${encodeURIComponent(frame.location)}\" style=\"text-decoration: underline; color: #888\" onclick=\"fetch(this.href); return false\">${frame.location}</a>\n${frame.code}`;\n    }, '') : diagnostic.stack;\n    errorHTML += `\n      <div>\n        <div style=\"font-size: 18px; font-weight: bold; margin-top: 20px;\">\n          🚨 ${diagnostic.message}\n        </div>\n        <pre>${stack}</pre>\n        <div>\n          ${diagnostic.hints.map(hint => '<div>💡 ' + hint + '</div>').join('')}\n        </div>\n        ${diagnostic.documentation ? `<div>📝 <a style=\"color: violet\" href=\"${diagnostic.documentation}\" target=\"_blank\">Learn more</a></div>` : ''}\n      </div>\n    `;\n  }\n\n  errorHTML += '</div>';\n  overlay.innerHTML = errorHTML;\n  return overlay;\n}\n\nfunction fullReload() {\n  if ('reload' in location) {\n    location.reload();\n  } else if (extCtx && extCtx.runtime && extCtx.runtime.reload) {\n    extCtx.runtime.reload();\n  }\n}\n\nfunction getParents(bundle, id)\n/*: Array<[ParcelRequire, string]> */\n{\n  var modules = bundle.modules;\n\n  if (!modules) {\n    return [];\n  }\n\n  var parents = [];\n  var k, d, dep;\n\n  for (k in modules) {\n    for (d in modules[k][1]) {\n      dep = modules[k][1][d];\n\n      if (dep === id || Array.isArray(dep) && dep[dep.length - 1] === id) {\n        parents.push([bundle, k]);\n      }\n    }\n  }\n\n  if (bundle.parent) {\n    parents = parents.concat(getParents(bundle.parent, id));\n  }\n\n  return parents;\n}\n\nfunction updateLink(link) {\n  var newLink = link.cloneNode();\n\n  newLink.onload = function () {\n    if (link.parentNode !== null) {\n      // $FlowFixMe\n      link.parentNode.removeChild(link);\n    }\n  };\n\n  newLink.setAttribute('href', // $FlowFixMe\n  link.getAttribute('href').split('?')[0] + '?' + Date.now()); // $FlowFixMe\n\n  link.parentNode.insertBefore(newLink, link.nextSibling);\n}\n\nvar cssTimeout = null;\n\nfunction reloadCSS() {\n  if (cssTimeout) {\n    return;\n  }\n\n  cssTimeout = setTimeout(function () {\n    var links = document.querySelectorAll('link[rel=\"stylesheet\"]');\n\n    for (var i = 0; i < links.length; i++) {\n      // $FlowFixMe[incompatible-type]\n      var href\n      /*: string */\n      = links[i].getAttribute('href');\n      var hostname = getHostname();\n      var servedFromHMRServer = hostname === 'localhost' ? new RegExp('^(https?:\\\\/\\\\/(0.0.0.0|127.0.0.1)|localhost):' + getPort()).test(href) : href.indexOf(hostname + ':' + getPort());\n      var absolute = /^https?:\\/\\//i.test(href) && href.indexOf(location.origin) !== 0 && !servedFromHMRServer;\n\n      if (!absolute) {\n        updateLink(links[i]);\n      }\n    }\n\n    cssTimeout = null;\n  }, 50);\n}\n\nfunction hmrDownload(asset) {\n  if (asset.type === 'js') {\n    if (typeof document !== 'undefined') {\n      let script = document.createElement('script');\n      script.src = asset.url + '?t=' + Date.now();\n\n      if (asset.outputFormat === 'esmodule') {\n        script.type = 'module';\n      }\n\n      return new Promise((resolve, reject) => {\n        var _document$head;\n\n        script.onload = () => resolve(script);\n\n        script.onerror = reject;\n        (_document$head = document.head) === null || _document$head === void 0 ? void 0 : _document$head.appendChild(script);\n      });\n    } else if (typeof importScripts === 'function') {\n      // Worker scripts\n      if (asset.outputFormat === 'esmodule') {\n        return __parcel__import__(asset.url + '?t=' + Date.now());\n      } else {\n        return new Promise((resolve, reject) => {\n          try {\n            __parcel__importScripts__(asset.url + '?t=' + Date.now());\n\n            resolve();\n          } catch (err) {\n            reject(err);\n          }\n        });\n      }\n    }\n  }\n}\n\nasync function hmrApplyUpdates(assets) {\n  global.parcelHotUpdate = Object.create(null);\n  let scriptsToRemove;\n\n  try {\n    // If sourceURL comments aren't supported in eval, we need to load\n    // the update from the dev server over HTTP so that stack traces\n    // are correct in errors/logs. This is much slower than eval, so\n    // we only do it if needed (currently just Safari).\n    // https://bugs.webkit.org/show_bug.cgi?id=137297\n    // This path is also taken if a CSP disallows eval.\n    if (!supportsSourceURL) {\n      let promises = assets.map(asset => {\n        var _hmrDownload;\n\n        return (_hmrDownload = hmrDownload(asset)) === null || _hmrDownload === void 0 ? void 0 : _hmrDownload.catch(err => {\n          // Web extension bugfix for Chromium\n          // https://bugs.chromium.org/p/chromium/issues/detail?id=1255412#c12\n          if (extCtx && extCtx.runtime && extCtx.runtime.getManifest().manifest_version == 3) {\n            if (typeof ServiceWorkerGlobalScope != 'undefined' && global instanceof ServiceWorkerGlobalScope) {\n              extCtx.runtime.reload();\n              return;\n            }\n\n            asset.url = extCtx.runtime.getURL('/__parcel_hmr_proxy__?url=' + encodeURIComponent(asset.url + '?t=' + Date.now()));\n            return hmrDownload(asset);\n          }\n\n          throw err;\n        });\n      });\n      scriptsToRemove = await Promise.all(promises);\n    }\n\n    assets.forEach(function (asset) {\n      hmrApply(module.bundle.root, asset);\n    });\n  } finally {\n    delete global.parcelHotUpdate;\n\n    if (scriptsToRemove) {\n      scriptsToRemove.forEach(script => {\n        if (script) {\n          var _document$head2;\n\n          (_document$head2 = document.head) === null || _document$head2 === void 0 ? void 0 : _document$head2.removeChild(script);\n        }\n      });\n    }\n  }\n}\n\nfunction hmrApply(bundle\n/*: ParcelRequire */\n, asset\n/*:  HMRAsset */\n) {\n  var modules = bundle.modules;\n\n  if (!modules) {\n    return;\n  }\n\n  if (asset.type === 'css') {\n    reloadCSS();\n  } else if (asset.type === 'js') {\n    let deps = asset.depsByBundle[bundle.HMR_BUNDLE_ID];\n\n    if (deps) {\n      if (modules[asset.id]) {\n        // Remove dependencies that are removed and will become orphaned.\n        // This is necessary so that if the asset is added back again, the cache is gone, and we prevent a full page reload.\n        let oldDeps = modules[asset.id][1];\n\n        for (let dep in oldDeps) {\n          if (!deps[dep] || deps[dep] !== oldDeps[dep]) {\n            let id = oldDeps[dep];\n            let parents = getParents(module.bundle.root, id);\n\n            if (parents.length === 1) {\n              hmrDelete(module.bundle.root, id);\n            }\n          }\n        }\n      }\n\n      if (supportsSourceURL) {\n        // Global eval. We would use `new Function` here but browser\n        // support for source maps is better with eval.\n        (0, eval)(asset.output);\n      } // $FlowFixMe\n\n\n      let fn = global.parcelHotUpdate[asset.id];\n      modules[asset.id] = [fn, deps];\n    } else if (bundle.parent) {\n      hmrApply(bundle.parent, asset);\n    }\n  }\n}\n\nfunction hmrDelete(bundle, id) {\n  let modules = bundle.modules;\n\n  if (!modules) {\n    return;\n  }\n\n  if (modules[id]) {\n    // Collect dependencies that will become orphaned when this module is deleted.\n    let deps = modules[id][1];\n    let orphans = [];\n\n    for (let dep in deps) {\n      let parents = getParents(module.bundle.root, deps[dep]);\n\n      if (parents.length === 1) {\n        orphans.push(deps[dep]);\n      }\n    } // Delete the module. This must be done before deleting dependencies in case of circular dependencies.\n\n\n    delete modules[id];\n    delete bundle.cache[id]; // Now delete the orphans.\n\n    orphans.forEach(id => {\n      hmrDelete(module.bundle.root, id);\n    });\n  } else if (bundle.parent) {\n    hmrDelete(bundle.parent, id);\n  }\n}\n\nfunction hmrAcceptCheck(bundle\n/*: ParcelRequire */\n, id\n/*: string */\n, depsByBundle\n/*: ?{ [string]: { [string]: string } }*/\n) {\n  if (hmrAcceptCheckOne(bundle, id, depsByBundle)) {\n    return true;\n  } // Traverse parents breadth first. All possible ancestries must accept the HMR update, or we'll reload.\n\n\n  let parents = getParents(module.bundle.root, id);\n  let accepted = false;\n\n  while (parents.length > 0) {\n    let v = parents.shift();\n    let a = hmrAcceptCheckOne(v[0], v[1], null);\n\n    if (a) {\n      // If this parent accepts, stop traversing upward, but still consider siblings.\n      accepted = true;\n    } else {\n      // Otherwise, queue the parents in the next level upward.\n      let p = getParents(module.bundle.root, v[1]);\n\n      if (p.length === 0) {\n        // If there are no parents, then we've reached an entry without accepting. Reload.\n        accepted = false;\n        break;\n      }\n\n      parents.push(...p);\n    }\n  }\n\n  return accepted;\n}\n\nfunction hmrAcceptCheckOne(bundle\n/*: ParcelRequire */\n, id\n/*: string */\n, depsByBundle\n/*: ?{ [string]: { [string]: string } }*/\n) {\n  var modules = bundle.modules;\n\n  if (!modules) {\n    return;\n  }\n\n  if (depsByBundle && !depsByBundle[bundle.HMR_BUNDLE_ID]) {\n    // If we reached the root bundle without finding where the asset should go,\n    // there's nothing to do. Mark as \"accepted\" so we don't reload the page.\n    if (!bundle.parent) {\n      return true;\n    }\n\n    return hmrAcceptCheck(bundle.parent, id, depsByBundle);\n  }\n\n  if (checkedAssets[id]) {\n    return true;\n  }\n\n  checkedAssets[id] = true;\n  var cached = bundle.cache[id];\n  assetsToDispose.push([bundle, id]);\n\n  if (!cached || cached.hot && cached.hot._acceptCallbacks.length) {\n    assetsToAccept.push([bundle, id]);\n    return true;\n  }\n}\n\nfunction hmrDispose(bundle\n/*: ParcelRequire */\n, id\n/*: string */\n) {\n  var cached = bundle.cache[id];\n  bundle.hotData[id] = {};\n\n  if (cached && cached.hot) {\n    cached.hot.data = bundle.hotData[id];\n  }\n\n  if (cached && cached.hot && cached.hot._disposeCallbacks.length) {\n    cached.hot._disposeCallbacks.forEach(function (cb) {\n      cb(bundle.hotData[id]);\n    });\n  }\n\n  delete bundle.cache[id];\n}\n\nfunction hmrAccept(bundle\n/*: ParcelRequire */\n, id\n/*: string */\n) {\n  // Execute the module.\n  bundle(id); // Run the accept callbacks in the new version of the module.\n\n  var cached = bundle.cache[id];\n\n  if (cached && cached.hot && cached.hot._acceptCallbacks.length) {\n    cached.hot._acceptCallbacks.forEach(function (cb) {\n      var assetsToAlsoAccept = cb(function () {\n        return getParents(module.bundle.root, id);\n      });\n\n      if (assetsToAlsoAccept && assetsToAccept.length) {\n        assetsToAlsoAccept.forEach(function (a) {\n          hmrDispose(a[0], a[1]);\n        }); // $FlowFixMe[method-unbinding]\n\n        assetsToAccept.push.apply(assetsToAccept, assetsToAlsoAccept);\n      }\n    });\n  }\n}","import PhongFS from \"./shaders/frag_Phong\"\r\nimport PhongVS from \"./shaders/vert_Phong\"\r\nimport BlinnPhongVS from './shaders/vert_BlinnPhong'\r\nimport LambertVS from './shaders/vert_Lambert'\r\nimport GoureauFS from './shaders/frag_Goureau'\r\nimport ToonShadingFS from './shaders/frag_ToonShading'\r\n\r\nimport * as glm from \"gl-matrix\";\r\n\r\nlet gl;\r\nlet ambientCoeff = 1.0, shadingModel = 0, lightingModel = 0, c1 = 0.001, c2 = 0.001, distance=30;\r\nlet  fs_list= [ PhongFS,GoureauFS, ToonShadingFS],vs_list= [ PhongVS,LambertVS, BlinnPhongVS];\r\n    function main(id) {\r\n    var canvas = document.getElementById(id);\r\n    gl = initWebGL(canvas); // инициализация контекста GL – сами пишем\r\n    // продолжать только если WebGL доступен и работает\r\n    if (gl) { // продолжать только если WebGL доступен и работает\r\n        // Устанавливаем размер вьюпорта\r\n        gl.viewport(0, 0, gl.canvas.width, gl.canvas.height);\r\n        // установить в качестве цвета очистки буфера цвета черный, полная непрозрачность//немного другой цвет сделал\r\n        gl.clearColor(0.0, 0.0, 0.0, 1.0);\r\n        // включает использование буфера глубины\r\n        gl.enable(gl.DEPTH_TEST);\r\n        // определяет работу буфера глубины: более ближние объекты перекрывают дальние\r\n        gl.depthFunc(gl.LEQUAL);\r\n        // очистить буфер цвета и буфер глубины\r\n        gl.clear(gl.COLOR_BUFFER_BIT|gl.DEPTH_BUFFER_BIT);\r\n    }\r\n\r\n\r\n    window.addEventListener(\"keydown\", checkKeyPressed);\r\n\r\n\r\n    function render() {\r\n        const shaderProgram = initShaderProgram(gl,vs_list[lightingModel] ,fs_list[shadingModel] );\r\n        gl.useProgram(shaderProgram);\r\n        if(shaderProgram) {\r\n            gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);\r\n            gl.clearDepth(1.0);\r\n            drawCube(shaderProgram, [1.0, 0.0, 0.0, 1.0], cube1,pedestal, scene,  [10.0, 0.0, 0.0], 1.0,\"cube5\");\r\n            drawCube(shaderProgram, [1.0, 0.0, 0.0, 1.0], cube1,pedestal, scene,  [-8.0, 0.0, 0.0], 2.0,\"cube1\");\r\n            drawCube(shaderProgram, [0.0, 1.0, 1.0, 1.0], cube2,pedestal, scene,  [-2.0, 0.0, 0.0], 1.5,\"cube2\");\r\n            drawCube(shaderProgram, [1.0, 0.0, 1.0, 1.0], cube3,pedestal, scene, [1.0, 0.0, 0.0], 0.75,\"cube3\");\r\n            drawCube(shaderProgram, [0.0, 1.0, 0.0, 1.0], cube4,pedestal, scene,  [4.0, 0.0, 0.0], 2.0,\"cube4\");\r\n\r\n\r\n        }\r\n        requestAnimationFrame(render);\r\n    }\r\n    requestAnimationFrame(render);\r\n\r\n\r\n}\r\n\r\n\r\n\r\n\r\nfunction drawCube(shaderProgram, color, Cube, Pedestal, Scene,  pos, size,type) {\r\n    //позиции вершин\r\n    const vertices = [\r\n        // Front face\r\n        -1.0, -1.0, 1.0, 1.0, -1.0, 1.0, 1.0, 1.0, 1.0, -1.0, 1.0, 1.0,\r\n\r\n        // Back face\r\n        -1.0, -1.0, -1.0, -1.0, 1.0, -1.0, 1.0, 1.0, -1.0, 1.0, -1.0, -1.0,\r\n\r\n        // Top face\r\n        -1.0, 1.0, -1.0, -1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, -1.0,\r\n\r\n        // Bottom face\r\n        -1.0, -1.0, -1.0, 1.0, -1.0, -1.0, 1.0, -1.0, 1.0, -1.0, -1.0, 1.0,\r\n\r\n        // Right face\r\n        1.0, -1.0, -1.0, 1.0, 1.0, -1.0, 1.0, 1.0, 1.0, 1.0, -1.0, 1.0,\r\n\r\n        // Left face\r\n        -1.0, -1.0, -1.0, -1.0, -1.0, 1.0, -1.0, 1.0, 1.0, -1.0, 1.0, -1.0,\r\n    ];\r\n\r\n    for (let i = 0; i < vertices.length; ++i) {\r\n        vertices[i] = vertices[i] * size;\r\n    }\r\n    pos = [pos[0], pos[1] + size , pos[2]];\r\n\r\n    let cubeVerticesBuffer = gl.createBuffer();\r\n    gl.bindBuffer(gl.ARRAY_BUFFER, cubeVerticesBuffer);\r\n    gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(vertices), gl.STATIC_DRAW);\r\n\r\n    const vertexPositionAttribute = gl.getAttribLocation(shaderProgram, \"aVertexPosition\");\r\n    gl.vertexAttribPointer(vertexPositionAttribute, 3, gl.FLOAT, false, 0, 0);\r\n    gl.enableVertexAttribArray(vertexPositionAttribute);\r\n    //обращение к точкам вершин по индексу\r\n    const indexBuffer = gl.createBuffer()\r\n    let indices = [\r\n        0,  1,  2,  2,  3,  0,  // front\r\n        4,  5,  6,  6,  7,  4,  // back\r\n        8,  9,  10, 10, 11, 8,  // top\r\n        12, 13, 14, 14, 15, 12, // bottom\r\n        16, 17, 18, 18, 19, 16, // right\r\n        20, 21, 22, 22, 23, 20 // left\r\n    ]\r\n    gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, indexBuffer)\r\n    gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, new Uint16Array(indices), gl.STATIC_DRAW)\r\n//нормали\r\n    const vertexNormals = [\r\n        // Front\r\n        0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0,\r\n\r\n        // Back\r\n        0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0,\r\n\r\n        // Top\r\n        0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0,\r\n\r\n        // Bottom\r\n        0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0,\r\n\r\n        // Right\r\n        1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0,\r\n\r\n        // Left\r\n        -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0,\r\n    ];\r\n\r\n    let cubeNormalBuffer = gl.createBuffer();\r\n    gl.bindBuffer(gl.ARRAY_BUFFER, cubeNormalBuffer);\r\n    gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(vertexNormals), gl.STATIC_DRAW);\r\n\r\n    const vertexNormalAttribute = gl.getAttribLocation(shaderProgram, \"aVertexNormal\");\r\n    gl.vertexAttribPointer(vertexNormalAttribute, 3, gl.FLOAT, false, 0, 0);\r\n    gl.enableVertexAttribArray(vertexNormalAttribute);\r\n\r\n\r\n    //цвета\r\n    const faceColors = [\r\n        color,\r\n        color,\r\n        color,\r\n        color,\r\n        color,\r\n        color,\r\n    ];\r\n    let colors = [];\r\n\r\n    for (let j = 0; j < faceColors.length; ++j) {\r\n        const c = faceColors[j];\r\n        // Repeat each color four times for the four vertices of the face\r\n        colors = colors.concat(c, c, c, c);\r\n    }\r\n    let colorBuffer = gl.createBuffer();\r\n    gl.bindBuffer(gl.ARRAY_BUFFER, colorBuffer);\r\n    gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(colors), gl.STATIC_DRAW);\r\n    gl.vertexAttribPointer(gl.getAttribLocation(shaderProgram, \"aVertexColor\"),4,gl.FLOAT,false,0,0);\r\n    gl.enableVertexAttribArray(gl.getAttribLocation(shaderProgram, \"aVertexColor\"));\r\n\r\n\r\n    //операции над кубами\r\n    const mProj = gl.getUniformLocation(shaderProgram, \"mProj\");\r\n    const mWorld = gl.getUniformLocation(shaderProgram, \"mWorld\");\r\n\r\n    const fieldOfView = ( Math.PI) / 10;\r\n    const aspect = gl.canvas.clientWidth / gl.canvas.clientHeight;\r\n    const Near = 0.1;\r\n    const Far = 500.0;\r\n\r\n    const projectionMatrix = glm.mat4.create();\r\n    const worldMatrix = glm.mat4.create();\r\n    glm.mat4.perspective(projectionMatrix, fieldOfView, aspect, Near, Far);\r\n    // перемещаем камеру на 4 вниз и 30 от плоскости ху, кубы в центре координат\r\n    glm.mat4.translate(projectionMatrix, projectionMatrix, [0.0, 0.0, 0]);//можно было не трогать камеру, но так проще для понимания\r\n    glm.mat4.translate(worldMatrix, worldMatrix, [0.0, -2.0, -30.0]);\r\n    //кубы еще не разделены, ставит центр сцены в [12.0, 0.0, 0.0], а крутит вокруг [0.0, 0.0, 0.0]\r\n    glm.mat4.rotateY(worldMatrix, worldMatrix, Scene);\r\n    glm.mat4.translate(worldMatrix, worldMatrix, [0.0, 0.0, 0.0]);//становится локальным центром пьедестала\r\n    //кубы уже  разделены (благодаря pos), ставит центр каждого отдельного куба pos относительно [12.0, 0.0, 0.0], а крутит вокруг [12.0, 0.0, 0.0]\r\n    glm.mat4.rotateY(worldMatrix, worldMatrix, Pedestal);\r\n    glm.mat4.translate(worldMatrix, worldMatrix, pos);//локальный центр каждого куба, т.к. больше нет translate, то у него больше нет точки, относительно которой он будет вращать локальный центр, поэтому каждый куб имеет свой локальный центр, и каждый центр прописан в pos\r\n//пока необязательно, но в 5 лабе нужно разделение каждого куба отдельно\r\nswitch (type) {\r\n        case \"cube1\":\r\n\r\n            glm.mat4.rotateY(worldMatrix, worldMatrix, cube1);\r\n            break;\r\n        case \"cube2\":\r\n            glm.mat4.rotateY(worldMatrix, worldMatrix, cube2);\r\n            break;\r\n        case \"cube3\":\r\n            glm.mat4.rotateY(worldMatrix, worldMatrix, cube3);\r\n            break;\r\n        case \"cube4\":\r\n            glm.mat4.rotateY(worldMatrix, worldMatrix, cube4);\r\n            break;\r\n    }\r\n\r\n    gl.uniformMatrix4fv(mProj, false, projectionMatrix);\r\n    gl.uniformMatrix4fv(mWorld, false, worldMatrix);\r\n\r\n    //матрица нормалей\r\n    const normalMatrix = glm.mat4.create();\r\n    glm.mat4.invert(normalMatrix, worldMatrix);\r\n    glm.mat4.transpose(normalMatrix, normalMatrix);\r\n    gl.getUniformLocation(shaderProgram, \"uNormalMatrix\")\r\n    gl.uniformMatrix4fv(gl.getUniformLocation(shaderProgram, \"uNormalMatrix\"),false,normalMatrix);\r\n//отрисовка кубов\r\n    gl.drawElements(gl.TRIANGLES, indices.length, gl.UNSIGNED_SHORT, 0)\r\n\r\n    //положение источника света\r\n    const lightPositionValue = [0, -2, distance];\r\n    gl.uniform3fv(gl.getUniformLocation(shaderProgram, \"uLightPosition\"),lightPositionValue);\r\n    //цвет фонового освещения\r\n    gl.uniform3fv( gl.getUniformLocation(shaderProgram, \"uAmbientLightColor\"),[0.1, 0.1, 0.1]);\r\n    //цвет диффузиозного освещения\r\n    gl.uniform3fv( gl.getUniformLocation(shaderProgram, \"uDiffuseLightColor\"),[0.7, 0.7, 0.7]);\r\n    //спекулярный цвет освещения\r\n    gl.uniform3fv(gl.getUniformLocation(shaderProgram, \"uSpecularLightColor\"),[1.0, 1.0, 1.0]);\r\n    //коэффициент линейного рассеивания\r\n    gl.uniform1f(gl.getUniformLocation(shaderProgram, \"uc1\"),c1);\r\n    //коэффициент квадратичного рассеивания\r\n    gl.uniform1f(gl.getUniformLocation(shaderProgram, \"uc2\"),c2);\r\n    //коэффициент фонового освещения\r\n    gl.uniform1f(gl.getUniformLocation(shaderProgram, \"uAmbientIntensity\"),ambientCoeff);\r\n    gl.uniform1f(gl.getUniformLocation(shaderProgram,'uLightingModel'), lightingModel);\r\n    gl.uniform1f(gl.getUniformLocation(shaderProgram,'uShadingModel'), shadingModel);\r\n\r\n\r\n\r\n}\r\nstart();\r\n\r\nfunction initWebGL(canvas) {\r\n    gl = null;\r\n    try { // Попытаться получить стандартный контекст.\r\n        // Если не получится, попробовать получить экспериментальный.\r\n        gl = canvas.getContext(\"webgl2\") || canvas.getContext(\"webgl\") || canvas.getContext(\"experimental-webgl\");\r\n    }\r\n    catch(e) {}\r\n    // Если мы не получили контекст GL, завершить работу\r\n    if (!gl) {\r\n        alert(\"Unable to initialize WebGL. Your browser may not support it.\");\r\n        gl = null;\r\n    }\r\n    return gl;\r\n}\r\n\r\nfunction initShaderProgram(gl, vsSource, fsSource) {\r\n    const vertexShader = loadShader(gl, gl.VERTEX_SHADER, vsSource);\r\n    const fragmentShader = loadShader(gl, gl.FRAGMENT_SHADER, fsSource);\r\n    // Create the shader program\r\n    const shaderProgram = gl.createProgram();\r\n    gl.attachShader(shaderProgram, vertexShader);\r\n    gl.attachShader(shaderProgram, fragmentShader);\r\n    gl.linkProgram(shaderProgram);\r\n\r\n    // If creating the shader program failed, alert\r\n\r\n    if (!gl.getProgramParameter(shaderProgram, gl.LINK_STATUS)) {\r\n        alert('Unable to initialize the shader program: ' + gl.getProgramInfoLog(shaderProgram));\r\n        return null;\r\n    }\r\n\r\n    return shaderProgram;\r\n\r\n}\r\n\r\nfunction loadShader(gl, type, source) {\r\n    const shader = gl.createShader(type);\r\n    // Send the source to the shader object\r\n    gl.shaderSource(shader, source);\r\n    // Compile the shader program\r\n    gl.compileShader(shader);\r\n    // See if it compiled successfully\r\n    if (!gl.getShaderParameter(shader, gl.COMPILE_STATUS)) {\r\n        alert('An error occurred compiling the shaders: ' + gl.getShaderInfoLog(shader));\r\n        gl.deleteShader(shader);\r\n        return null;\r\n    }\r\n    return shader;\r\n}\r\n\r\nvar elment= \"\";\r\nvar cube1= 0.0;\r\nvar cube2= 0.0;\r\nvar cube3= 0.0;\r\nvar cube4= 0.0;\r\nvar pedestal= 0.0;\r\nvar scene= 0.0;\r\n\r\nfunction start() {\r\n    main(\"scene\");\r\n\r\n\r\n} // function start\r\n\r\nfunction checkKeyPressed(e) {\r\n    if (e.keyCode == \"49\")\r\n    {\r\n        elment = \"1\";\r\n    }\r\n    if (e.keyCode == \"50\")\r\n    {\r\n        elment = \"2\";\r\n    }\r\n    if (e.keyCode == \"51\")\r\n    {\r\n        elment = \"3\";\r\n    }\r\n    if (e.keyCode == \"52\")\r\n    {\r\n        elment = \"4\";\r\n    }\r\n    if (e.keyCode == \"53\")\r\n    {\r\n        elment = \"p\";\r\n    }\r\n    if (e.keyCode == \"54\")\r\n    {\r\n        elment = \"s\";\r\n    }\r\n\r\n    if (e.keyCode == \"37\") {\r\n        switch (elment) {\r\n            case \"1\":\r\n                cube1 -= 0.1;\r\n                break;\r\n            case \"2\":\r\n                cube2 -= 0.1;\r\n                break;\r\n            case \"3\":\r\n                cube3 -= 0.1;\r\n                break;\r\n            case \"4\":\r\n                cube4 -= 0.1;\r\n                break;\r\n            case \"p\":\r\n                pedestal -= 0.1;\r\n                break;\r\n            case \"s\":\r\n                scene -= 0.1;\r\n                break;\r\n\r\n        }\r\n    }\r\n    if (e.keyCode == \"39\") {\r\n        switch (elment) {\r\n            case \"1\":\r\n                cube1 += 0.1;\r\n                break;\r\n            case \"2\":\r\n                cube2 += 0.1;\r\n                break;\r\n            case \"3\":\r\n                cube3 += 0.1;\r\n                break;\r\n            case \"4\":\r\n                cube4 += 0.1;\r\n                break;\r\n            case \"p\":\r\n                pedestal += 0.1;\r\n                break;\r\n            case \"s\":\r\n                scene += 0.1;\r\n                break;\r\n        }\r\n    }\r\n\r\n    document.getElementById('btn-lighting').onclick = () => {\r\n        let text = document.getElementById('lightingModel')\r\n        lightingModel++\r\n        if (lightingModel == 3) lightingModel = 0\r\n        if (lightingModel == 0) text.textContent = 'Phong Lighting Model'\r\n        else if (lightingModel == 1) text.textContent = 'Lambert Lighting Model'\r\n        else if (lightingModel == 2) text.textContent = 'Blinn-Phong Lighting Model'\r\n    }\r\n\r\n    document.getElementById('btn-shading').onclick = () => {\r\n        let text = document.getElementById('shadingModel')\r\n\r\n        shadingModel++\r\n        if (shadingModel == 3) shadingModel = 0\r\n        if (shadingModel == 0) text.textContent = 'Phong Shading Model'\r\n        else if (shadingModel == 1) text.textContent = 'Goureau Shading Model'\r\n        else if (shadingModel == 2) text.textContent = 'Toon Shading Model'\r\n    }\r\n\r\n    document.getElementById('myRange').oninput = () => {\r\n        ambientCoeff = Number(document.getElementById('myRange').value) ;\r\n    }\r\n\r\n    document.getElementById('c1-range').oninput = () => {\r\n        c1 = Number(document.getElementById('c1-range').value);\r\n    }\r\n\r\n    document.getElementById('c2-range').oninput = () => {\r\n        c2 = Number(document.getElementById('c2-range').value);\r\n    }\r\n    document.getElementById('distance').oninput = () => {\r\n        distance = Number(document.getElementById('distance').value);\r\n    }\r\n\r\n\r\n}\r\n\r\n","const PhongFS =\r\n    [\r\n        '#version 300 es',\r\n        '#ifdef GL_ES',\r\n        'precision highp float;',\r\n        '#endif',\r\n\r\n        'in highp vec3 vLightDir;',\r\n        'in vec3 vNormal;',\r\n        'in vec4 vColor;',\r\n        'in vec3 vPosition;',\r\n        'uniform vec3 uLightPosition;',\r\n        'uniform float uc1;',\r\n        'uniform float uc2;',\r\n        'uniform float uAmbientIntensity;',\r\n        'uniform vec3 uAmbientLightColor;',\r\n        'uniform vec3 uDiffuseLightColor;',\r\n        'uniform vec3 uSpecularLightColor;',\r\n\r\n        'uniform float uShadingModel;',\r\n        'uniform float uAmbientCoeff;',\r\n\r\n        'const float shininess = 32.0;',\r\n        'const float edge0 = 0.1;',\r\n        'const float edge1 = 0.3;',\r\n        'precision mediump float;',\r\n        'out vec4 fragColor;',\r\n        'void main(void) {',\r\n        'vec3 lightDirection = normalize(uLightPosition - vPosition);',\r\n            'float d = distance(uLightPosition,vPosition);',\r\n        'float diffuseLightDot = max(dot(vNormal, lightDirection), 0.0);',\r\n        'vec3 reflectionVector = normalize(reflect(-lightDirection, vNormal));',\r\n        'vec3 viewVectorEye = -normalize(vPosition);',\r\n        'float specularLightDot = max(dot(reflectionVector, viewVectorEye), 0.0);',\r\n        'float specularLightParam = pow(specularLightDot, shininess);',\r\n            'float attenuation = 1.0 / (1.0 + uc1 * d + uc2 * d * d);',\r\n        'vec3 vLightWeighting = uAmbientLightColor * uAmbientIntensity + (uDiffuseLightColor * diffuseLightDot + uSpecularLightColor * specularLightParam) * attenuation;;' ,\r\n        'fragColor = vec4(vLightWeighting.rgb * vColor.rgb, vColor.a);',\r\n        '',\r\n        '',\r\n        '',\r\n        '',\r\n        '}',\r\n    ].join('\\n');\r\nexport default PhongFS;","exports.interopDefault = function (a) {\n  return a && a.__esModule ? a : {default: a};\n};\n\nexports.defineInteropFlag = function (a) {\n  Object.defineProperty(a, '__esModule', {value: true});\n};\n\nexports.exportAll = function (source, dest) {\n  Object.keys(source).forEach(function (key) {\n    if (key === 'default' || key === '__esModule' || dest.hasOwnProperty(key)) {\n      return;\n    }\n\n    Object.defineProperty(dest, key, {\n      enumerable: true,\n      get: function () {\n        return source[key];\n      },\n    });\n  });\n\n  return dest;\n};\n\nexports.export = function (dest, destName, get) {\n  Object.defineProperty(dest, destName, {\n    enumerable: true,\n    get: get,\n  });\n};\n","const PhongVS =\r\n    [\r\n        '#version 300 es',\r\n        'in vec3 aVertexPosition;',\r\n        'in vec3 aVertexNormal;',\r\n        'in vec4 aVertexColor;',\r\n\r\n        'uniform mat4 mWorld;',\r\n        'uniform mat4 mProj;',\r\n        'uniform mat4 uNormalMatrix;',\r\n\r\n            'uniform float uShadingModel;',\r\n            'uniform float uAmbientCoeff;',\r\n\r\n        'uniform vec3 uLightPosition;',\r\n        'uniform vec3 uAmbientLightColor;',\r\n        'uniform vec3 uDiffuseLightColor;',\r\n        'uniform vec3 uSpecularLightColor;',\r\n        'uniform float uAmbientIntensity;',\r\n          // ' uniform mat3 uNMatrix;',\r\n        'uniform float uc1;',\r\n        'uniform float uc2;',\r\n       // 'uniform float uLightingModel;',\r\n        //'uniform float uShadingModel;',\r\n\r\n        'out vec4 vColor;',\r\n        'out vec3 vPosition;',\r\n        'out vec3 vNormal;',\r\n        'out vec3 vCameraPosition;',\r\n        'out highp vec3 vLightWeighting;',\r\n        'const float shininess = 32.0;',\r\n        'void main() {',\r\n        'vec4 vertexPositionEye4 = mWorld * vec4(aVertexPosition, 1.0);',\r\n        'vec3 vertexPositionEye3 = vertexPositionEye4.xyz / vertexPositionEye4.w;',\r\n        'vec3 lightDirection = normalize(uLightPosition - vertexPositionEye3);',\r\n        'float d = distance(uLightPosition,vPosition);',\r\n        'vec3 normal = normalize(mat3(uNormalMatrix) * aVertexNormal);',\r\n        'float diffuseLightDot = max(dot(normal, lightDirection), 0.0);',\r\n        'vec3 reflectionVector = normalize(reflect(-lightDirection, normal));',\r\n        'vec3 viewVectorEye = -normalize(vertexPositionEye3);',\r\n        'float specularLightDot = max(dot(reflectionVector, viewVectorEye), 0.0);',\r\n        'float specularLightParam = pow(specularLightDot, shininess);',\r\n        'float attenuation = 1.0 / (1.0 + uc1 * d + uc2 * d * d);',\r\n        'vLightWeighting = uAmbientLightColor * uAmbientIntensity +  (uDiffuseLightColor * diffuseLightDot + uSpecularLightColor * specularLightParam) * attenuation;',\r\n        'gl_Position = mProj * mWorld * vec4(aVertexPosition, 1.0);',\r\n        'vPosition = vertexPositionEye3;',\r\n        'vColor = aVertexColor;',\r\n        'vNormal = normal;',\r\n        'vCameraPosition = viewVectorEye;',\r\n        '',\r\n        '}',\r\n    ].join('\\n');\r\nexport default PhongVS;","const BlinnPhongVS =[\r\n    '#version 300 es',\r\n    'in vec3 aVertexPosition;',\r\n    'in vec3 aVertexNormal;',\r\n    'in vec4 aVertexColor;',\r\n\r\n    'uniform mat4 mWorld;',\r\n    'uniform mat4 mProj;',\r\n    'uniform mat4 uNormalMatrix;',\r\n\r\n    'uniform float uShadingModel;',\r\n    'uniform float uAmbientCoeff;',\r\n\r\n    'uniform vec3 uLightPosition;',\r\n    'uniform vec3 uAmbientLightColor;',\r\n    'uniform vec3 uDiffuseLightColor;',\r\n    'uniform vec3 uSpecularLightColor;',\r\n    'uniform float uAmbientIntensity;',\r\n    // ' uniform mat3 uNMatrix;',\r\n    'uniform float uc1;',\r\n    'uniform float uc2;',\r\n    // 'uniform float uLightingModel;',\r\n    //'uniform float uShadingModel;',\r\n\r\n    'out vec4 vColor;',\r\n    'out vec3 vPosition;',\r\n    'out vec3 vNormal;',\r\n    'out vec3 vCameraPosition;',\r\n    'out highp vec3 vLightWeighting;',\r\n    'const float shininess = 16.0;',\r\n    'void main() {',\r\n    'vec4 vertexPositionEye4 = mWorld * vec4(aVertexPosition, 1.0);',\r\n    '    vec3 vertexPositionEye3 = vertexPositionEye4.xyz / vertexPositionEye4.w;',\r\n    'vec3 lightDirection = normalize(uLightPosition - vertexPositionEye3);',\r\n    'vec3 halfway = normalize(lightDirection - normalize(vertexPositionEye3));',\r\n    'vec3 normal = normalize(mat3(uNormalMatrix) * aVertexNormal);',\r\n    'float diffuseLightDot = max(dot(normal, lightDirection), 0.0);',\r\n    'vec3 reflectionVector = normalize(reflect(-lightDirection, normal));',\r\n    'vec3 viewVectorEye = -normalize(vertexPositionEye3);',\r\n    'float specularLightDot = max(dot(normal, halfway), 0.0);',\r\n    'float specularLightParam = pow(specularLightDot, shininess);',\r\n    'float d = distance(uLightPosition,vPosition);',\r\n    'float attenuation = 1.0 / (1.0 + uc1 * d + uc2 * d * d);',\r\n    'vLightWeighting = uAmbientLightColor * uAmbientIntensity +(uDiffuseLightColor * diffuseLightDot + uSpecularLightColor * specularLightParam) * attenuation;',\r\n    'gl_Position = mProj * mWorld * vec4(aVertexPosition, 1.0);',\r\n    'vPosition = vertexPositionEye3;',\r\n    'vColor = aVertexColor;',\r\n    ' vNormal = normal;',\r\n    'vCameraPosition = viewVectorEye;',\r\n    '}'\r\n].join('\\n');\r\nexport default BlinnPhongVS;","const LambertVS =[\r\n    '#version 300 es',\r\n    'in vec3 aVertexPosition;',\r\n    'in vec3 aVertexNormal;',\r\n    'in vec4 aVertexColor;',\r\n\r\n    'uniform mat4 mWorld;',\r\n    'uniform mat4 mProj;',\r\n    'uniform mat4 uNormalMatrix;',\r\n\r\n    'uniform float uShadingModel;',\r\n    'uniform float uAmbientCoeff;',\r\n\r\n    'uniform vec3 uLightPosition;',\r\n    'uniform vec3 uAmbientLightColor;',\r\n    'uniform vec3 uDiffuseLightColor;',\r\n    'uniform vec3 uSpecularLightColor;',\r\n    'uniform float uAmbientIntensity;',\r\n    // ' uniform mat3 uNMatrix;',\r\n    'uniform float uc1;',\r\n    'uniform float uc2;',\r\n    // 'uniform float uLightingModel;',\r\n    //'uniform float uShadingModel;',\r\n\r\n    'out vec4 vColor;',\r\n    'out vec3 vPosition;',\r\n    'out vec3 vNormal;',\r\n    'out vec3 vCameraPosition;',\r\n    'out highp vec3 vLightWeighting;',\r\n    'const float shininess = 32.0;',\r\n    'void main() {',\r\n    'vec4 vertexPositionEye4 = mWorld * vec4(aVertexPosition, 1.0);',\r\n    'vec3 vertexPositionEye3 = vertexPositionEye4.xyz / vertexPositionEye4.w;',\r\n    ' vec3 lightDirection = normalize(uLightPosition - vertexPositionEye3);',\r\n    'float d = distance(uLightPosition,vPosition);',\r\n    'float attenuation = 1.0 / (1.0 + uc1 * d + uc2 * d * d);',\r\n    'vec3 normal = normalize(mat3(uNormalMatrix) * aVertexNormal);',\r\n    'float diffuseLightDot = max(dot(normal, lightDirection), 0.0);',\r\n    'vec3 viewVectorEye = -normalize(vertexPositionEye3);',\r\n    'vLightWeighting = uAmbientLightColor * uAmbientIntensity + uDiffuseLightColor * diffuseLightDot;',\r\n    'gl_Position = mProj * mWorld * vec4(aVertexPosition, 1.0);',\r\n    'vPosition = vertexPositionEye3;',\r\n    'vColor = aVertexColor;',\r\n    'vNormal = normal;',\r\n    'vCameraPosition = viewVectorEye;',\r\n    '}'\r\n].join('\\n');\r\nexport default LambertVS;","const GoureauFS =[\r\n    '#version 300 es',\r\n    '#ifdef GL_ES',\r\n    'precision highp float;',\r\n    '#endif',\r\n    'in highp vec3 vLightWeighting;',\r\n    'in vec4 vColor;',\r\n    'out vec4 fragColor;',\r\n    'void main() {',\r\n    '    fragColor = vec4(vLightWeighting.rgb * vColor.rgb, vColor.a);',\r\n    '}',\r\n    ''\r\n].join('\\n');\r\nexport default GoureauFS;","const ToonShadingFS =[\r\n\r\n    '#version 300 es',\r\n    '#ifdef GL_ES',\r\n    'precision highp float;',\r\n    '#endif',\r\n\r\n    'in highp vec3 vLightDir;',\r\n    'in vec3 vNormal;',\r\n    'in vec4 vColor;',\r\n    'in vec3 vPosition;',\r\n    'uniform vec3 uLightPosition;',\r\n    'uniform float uc1;',\r\n    'uniform float uc2;',\r\n    'uniform float uAmbientIntensity;',\r\n    'uniform vec3 uAmbientLightColor;',\r\n    'uniform vec3 uDiffuseLightColor;',\r\n    'uniform vec3 uSpecularLightColor;',\r\n\r\n    'uniform float uShadingModel;',\r\n    'uniform float uAmbientCoeff;',\r\n\r\n    'const float shininess = 32.0;',\r\n    'const float edge0 = 0.1;',\r\n    'const float edge1 = 0.3;',\r\n    'precision mediump float;',\r\n    'out vec4 fragColor;',\r\n    'void main(void) {',\r\n    'vec3 lightDirection = normalize(uLightPosition - vPosition);',\r\n    '    float intensity = dot(vNormal, lightDirection);',\r\n    'float diffuseLightDot = max(dot(vNormal, lightDirection), 0.0);',\r\n    'float d = distance(uLightPosition,vPosition);',\r\n    'float attenuation = 1.0 / (1.0 + uc1 * d + uc2 * d * d);',\r\n    'vec3 diffuse = uDiffuseLightColor * diffuseLightDot;',\r\n    ' vec3 specular = vec3(0.0);',\r\n    ' vec3 vLightWeighting = vec3(0.0);',\r\n    'if (intensity > 0.95) {',\r\n    'specular = uSpecularLightColor * pow(max(dot(normalize(reflect(-normalize(uLightPosition - vPosition), normalize(vNormal))), normalize(-vPosition)), 0.0), shininess);',\r\n    'vLightWeighting = uAmbientLightColor * uAmbientIntensity + (specular) * attenuation;',\r\n    'fragColor = vec4(vLightWeighting.rgb * vColor.rgb, vColor.a);',\r\n    '} else if (intensity > 0.5) {',\r\n    'vLightWeighting = uAmbientLightColor * uAmbientIntensity +(specular + diffuse) * attenuation;',\r\n    'fragColor = vec4(vLightWeighting.rgb * vColor.rgb, vColor.a);',\r\n    '} else {',\r\n    'vLightWeighting = uAmbientLightColor * uAmbientIntensity + (diffuse) * attenuation;',\r\n    'fragColor = vec4(vLightWeighting.rgb * vColor.rgb, vColor.a);}',\r\n    'if (fragColor.r > 0.8) {',\r\n    ' fragColor.rgb = vLightWeighting * vColor.rgb * vec3(1.0);',\r\n    '} else if (fragColor.r > 0.6) {',\r\n    'fragColor.rgb = vLightWeighting * vColor.rgb * 0.8;',\r\n    '} else if (fragColor.r > 0.4) {',\r\n    'fragColor.rgb = vLightWeighting * vColor.rgb * 0.6;',\r\n    '} else if (fragColor.r > 0.2) {',\r\n    ' fragColor.rgb = vLightWeighting * vColor.rgb * 0.4;',\r\n    '} else {',\r\n    'fragColor.rgb = vLightWeighting * vColor.rgb * 0.2;',\r\n    '}',\r\n    '}',\r\n    '',\r\n    '',\r\n].join('\\n');\r\nexport default ToonShadingFS;","import * as glMatrix from \"./common.js\";\nimport * as mat2 from \"./mat2.js\";\nimport * as mat2d from \"./mat2d.js\";\nimport * as mat3 from \"./mat3.js\";\nimport * as mat4 from \"./mat4.js\";\nimport * as quat from \"./quat.js\";\nimport * as quat2 from \"./quat2.js\";\nimport * as vec2 from \"./vec2.js\";\nimport * as vec3 from \"./vec3.js\";\nimport * as vec4 from \"./vec4.js\";\nexport { glMatrix, mat2, mat2d, mat3, mat4, quat, quat2, vec2, vec3, vec4 };","/**\n * Common utilities\n * @module glMatrix\n */\n// Configuration Constants\nexport var EPSILON = 0.000001;\nexport var ARRAY_TYPE = typeof Float32Array !== 'undefined' ? Float32Array : Array;\nexport var RANDOM = Math.random;\n/**\n * Sets the type of array used when creating new vectors and matrices\n *\n * @param {Float32ArrayConstructor | ArrayConstructor} type Array type, such as Float32Array or Array\n */\n\nexport function setMatrixArrayType(type) {\n  ARRAY_TYPE = type;\n}\nvar degree = Math.PI / 180;\n/**\n * Convert Degree To Radian\n *\n * @param {Number} a Angle in Degrees\n */\n\nexport function toRadian(a) {\n  return a * degree;\n}\n/**\n * Tests whether or not the arguments have approximately the same value, within an absolute\n * or relative tolerance of glMatrix.EPSILON (an absolute tolerance is used for values less\n * than or equal to 1.0, and a relative tolerance is used for larger values)\n *\n * @param {Number} a The first number to test.\n * @param {Number} b The second number to test.\n * @returns {Boolean} True if the numbers are approximately equal, false otherwise.\n */\n\nexport function equals(a, b) {\n  return Math.abs(a - b) <= EPSILON * Math.max(1.0, Math.abs(a), Math.abs(b));\n}\nif (!Math.hypot) Math.hypot = function () {\n  var y = 0,\n      i = arguments.length;\n\n  while (i--) {\n    y += arguments[i] * arguments[i];\n  }\n\n  return Math.sqrt(y);\n};","import * as glMatrix from \"./common.js\";\n/**\n * 2x2 Matrix\n * @module mat2\n */\n\n/**\n * Creates a new identity mat2\n *\n * @returns {mat2} a new 2x2 matrix\n */\n\nexport function create() {\n  var out = new glMatrix.ARRAY_TYPE(4);\n\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\n    out[1] = 0;\n    out[2] = 0;\n  }\n\n  out[0] = 1;\n  out[3] = 1;\n  return out;\n}\n/**\n * Creates a new mat2 initialized with values from an existing matrix\n *\n * @param {ReadonlyMat2} a matrix to clone\n * @returns {mat2} a new 2x2 matrix\n */\n\nexport function clone(a) {\n  var out = new glMatrix.ARRAY_TYPE(4);\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  return out;\n}\n/**\n * Copy the values from one mat2 to another\n *\n * @param {mat2} out the receiving matrix\n * @param {ReadonlyMat2} a the source matrix\n * @returns {mat2} out\n */\n\nexport function copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  return out;\n}\n/**\n * Set a mat2 to the identity matrix\n *\n * @param {mat2} out the receiving matrix\n * @returns {mat2} out\n */\n\nexport function identity(out) {\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 1;\n  return out;\n}\n/**\n * Create a new mat2 with the given values\n *\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\n * @param {Number} m10 Component in column 1, row 0 position (index 2)\n * @param {Number} m11 Component in column 1, row 1 position (index 3)\n * @returns {mat2} out A new 2x2 matrix\n */\n\nexport function fromValues(m00, m01, m10, m11) {\n  var out = new glMatrix.ARRAY_TYPE(4);\n  out[0] = m00;\n  out[1] = m01;\n  out[2] = m10;\n  out[3] = m11;\n  return out;\n}\n/**\n * Set the components of a mat2 to the given values\n *\n * @param {mat2} out the receiving matrix\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\n * @param {Number} m10 Component in column 1, row 0 position (index 2)\n * @param {Number} m11 Component in column 1, row 1 position (index 3)\n * @returns {mat2} out\n */\n\nexport function set(out, m00, m01, m10, m11) {\n  out[0] = m00;\n  out[1] = m01;\n  out[2] = m10;\n  out[3] = m11;\n  return out;\n}\n/**\n * Transpose the values of a mat2\n *\n * @param {mat2} out the receiving matrix\n * @param {ReadonlyMat2} a the source matrix\n * @returns {mat2} out\n */\n\nexport function transpose(out, a) {\n  // If we are transposing ourselves we can skip a few steps but have to cache\n  // some values\n  if (out === a) {\n    var a1 = a[1];\n    out[1] = a[2];\n    out[2] = a1;\n  } else {\n    out[0] = a[0];\n    out[1] = a[2];\n    out[2] = a[1];\n    out[3] = a[3];\n  }\n\n  return out;\n}\n/**\n * Inverts a mat2\n *\n * @param {mat2} out the receiving matrix\n * @param {ReadonlyMat2} a the source matrix\n * @returns {mat2} out\n */\n\nexport function invert(out, a) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3]; // Calculate the determinant\n\n  var det = a0 * a3 - a2 * a1;\n\n  if (!det) {\n    return null;\n  }\n\n  det = 1.0 / det;\n  out[0] = a3 * det;\n  out[1] = -a1 * det;\n  out[2] = -a2 * det;\n  out[3] = a0 * det;\n  return out;\n}\n/**\n * Calculates the adjugate of a mat2\n *\n * @param {mat2} out the receiving matrix\n * @param {ReadonlyMat2} a the source matrix\n * @returns {mat2} out\n */\n\nexport function adjoint(out, a) {\n  // Caching this value is nessecary if out == a\n  var a0 = a[0];\n  out[0] = a[3];\n  out[1] = -a[1];\n  out[2] = -a[2];\n  out[3] = a0;\n  return out;\n}\n/**\n * Calculates the determinant of a mat2\n *\n * @param {ReadonlyMat2} a the source matrix\n * @returns {Number} determinant of a\n */\n\nexport function determinant(a) {\n  return a[0] * a[3] - a[2] * a[1];\n}\n/**\n * Multiplies two mat2's\n *\n * @param {mat2} out the receiving matrix\n * @param {ReadonlyMat2} a the first operand\n * @param {ReadonlyMat2} b the second operand\n * @returns {mat2} out\n */\n\nexport function multiply(out, a, b) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3];\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2],\n      b3 = b[3];\n  out[0] = a0 * b0 + a2 * b1;\n  out[1] = a1 * b0 + a3 * b1;\n  out[2] = a0 * b2 + a2 * b3;\n  out[3] = a1 * b2 + a3 * b3;\n  return out;\n}\n/**\n * Rotates a mat2 by the given angle\n *\n * @param {mat2} out the receiving matrix\n * @param {ReadonlyMat2} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat2} out\n */\n\nexport function rotate(out, a, rad) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3];\n  var s = Math.sin(rad);\n  var c = Math.cos(rad);\n  out[0] = a0 * c + a2 * s;\n  out[1] = a1 * c + a3 * s;\n  out[2] = a0 * -s + a2 * c;\n  out[3] = a1 * -s + a3 * c;\n  return out;\n}\n/**\n * Scales the mat2 by the dimensions in the given vec2\n *\n * @param {mat2} out the receiving matrix\n * @param {ReadonlyMat2} a the matrix to rotate\n * @param {ReadonlyVec2} v the vec2 to scale the matrix by\n * @returns {mat2} out\n **/\n\nexport function scale(out, a, v) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3];\n  var v0 = v[0],\n      v1 = v[1];\n  out[0] = a0 * v0;\n  out[1] = a1 * v0;\n  out[2] = a2 * v1;\n  out[3] = a3 * v1;\n  return out;\n}\n/**\n * Creates a matrix from a given angle\n * This is equivalent to (but much faster than):\n *\n *     mat2.identity(dest);\n *     mat2.rotate(dest, dest, rad);\n *\n * @param {mat2} out mat2 receiving operation result\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat2} out\n */\n\nexport function fromRotation(out, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad);\n  out[0] = c;\n  out[1] = s;\n  out[2] = -s;\n  out[3] = c;\n  return out;\n}\n/**\n * Creates a matrix from a vector scaling\n * This is equivalent to (but much faster than):\n *\n *     mat2.identity(dest);\n *     mat2.scale(dest, dest, vec);\n *\n * @param {mat2} out mat2 receiving operation result\n * @param {ReadonlyVec2} v Scaling vector\n * @returns {mat2} out\n */\n\nexport function fromScaling(out, v) {\n  out[0] = v[0];\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = v[1];\n  return out;\n}\n/**\n * Returns a string representation of a mat2\n *\n * @param {ReadonlyMat2} a matrix to represent as a string\n * @returns {String} string representation of the matrix\n */\n\nexport function str(a) {\n  return \"mat2(\" + a[0] + \", \" + a[1] + \", \" + a[2] + \", \" + a[3] + \")\";\n}\n/**\n * Returns Frobenius norm of a mat2\n *\n * @param {ReadonlyMat2} a the matrix to calculate Frobenius norm of\n * @returns {Number} Frobenius norm\n */\n\nexport function frob(a) {\n  return Math.hypot(a[0], a[1], a[2], a[3]);\n}\n/**\n * Returns L, D and U matrices (Lower triangular, Diagonal and Upper triangular) by factorizing the input matrix\n * @param {ReadonlyMat2} L the lower triangular matrix\n * @param {ReadonlyMat2} D the diagonal matrix\n * @param {ReadonlyMat2} U the upper triangular matrix\n * @param {ReadonlyMat2} a the input matrix to factorize\n */\n\nexport function LDU(L, D, U, a) {\n  L[2] = a[2] / a[0];\n  U[0] = a[0];\n  U[1] = a[1];\n  U[3] = a[3] - L[2] * U[1];\n  return [L, D, U];\n}\n/**\n * Adds two mat2's\n *\n * @param {mat2} out the receiving matrix\n * @param {ReadonlyMat2} a the first operand\n * @param {ReadonlyMat2} b the second operand\n * @returns {mat2} out\n */\n\nexport function add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  out[2] = a[2] + b[2];\n  out[3] = a[3] + b[3];\n  return out;\n}\n/**\n * Subtracts matrix b from matrix a\n *\n * @param {mat2} out the receiving matrix\n * @param {ReadonlyMat2} a the first operand\n * @param {ReadonlyMat2} b the second operand\n * @returns {mat2} out\n */\n\nexport function subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  out[2] = a[2] - b[2];\n  out[3] = a[3] - b[3];\n  return out;\n}\n/**\n * Returns whether or not the matrices have exactly the same elements in the same position (when compared with ===)\n *\n * @param {ReadonlyMat2} a The first matrix.\n * @param {ReadonlyMat2} b The second matrix.\n * @returns {Boolean} True if the matrices are equal, false otherwise.\n */\n\nexport function exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3];\n}\n/**\n * Returns whether or not the matrices have approximately the same elements in the same position.\n *\n * @param {ReadonlyMat2} a The first matrix.\n * @param {ReadonlyMat2} b The second matrix.\n * @returns {Boolean} True if the matrices are equal, false otherwise.\n */\n\nexport function equals(a, b) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3];\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2],\n      b3 = b[3];\n  return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2)) && Math.abs(a3 - b3) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a3), Math.abs(b3));\n}\n/**\n * Multiply each element of the matrix by a scalar.\n *\n * @param {mat2} out the receiving matrix\n * @param {ReadonlyMat2} a the matrix to scale\n * @param {Number} b amount to scale the matrix's elements by\n * @returns {mat2} out\n */\n\nexport function multiplyScalar(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  out[2] = a[2] * b;\n  out[3] = a[3] * b;\n  return out;\n}\n/**\n * Adds two mat2's after multiplying each element of the second operand by a scalar value.\n *\n * @param {mat2} out the receiving vector\n * @param {ReadonlyMat2} a the first operand\n * @param {ReadonlyMat2} b the second operand\n * @param {Number} scale the amount to scale b's elements by before adding\n * @returns {mat2} out\n */\n\nexport function multiplyScalarAndAdd(out, a, b, scale) {\n  out[0] = a[0] + b[0] * scale;\n  out[1] = a[1] + b[1] * scale;\n  out[2] = a[2] + b[2] * scale;\n  out[3] = a[3] + b[3] * scale;\n  return out;\n}\n/**\n * Alias for {@link mat2.multiply}\n * @function\n */\n\nexport var mul = multiply;\n/**\n * Alias for {@link mat2.subtract}\n * @function\n */\n\nexport var sub = subtract;","import * as glMatrix from \"./common.js\";\n/**\n * 2x3 Matrix\n * @module mat2d\n * @description\n * A mat2d contains six elements defined as:\n * <pre>\n * [a, b,\n *  c, d,\n *  tx, ty]\n * </pre>\n * This is a short form for the 3x3 matrix:\n * <pre>\n * [a, b, 0,\n *  c, d, 0,\n *  tx, ty, 1]\n * </pre>\n * The last column is ignored so the array is shorter and operations are faster.\n */\n\n/**\n * Creates a new identity mat2d\n *\n * @returns {mat2d} a new 2x3 matrix\n */\n\nexport function create() {\n  var out = new glMatrix.ARRAY_TYPE(6);\n\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\n    out[1] = 0;\n    out[2] = 0;\n    out[4] = 0;\n    out[5] = 0;\n  }\n\n  out[0] = 1;\n  out[3] = 1;\n  return out;\n}\n/**\n * Creates a new mat2d initialized with values from an existing matrix\n *\n * @param {ReadonlyMat2d} a matrix to clone\n * @returns {mat2d} a new 2x3 matrix\n */\n\nexport function clone(a) {\n  var out = new glMatrix.ARRAY_TYPE(6);\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  out[4] = a[4];\n  out[5] = a[5];\n  return out;\n}\n/**\n * Copy the values from one mat2d to another\n *\n * @param {mat2d} out the receiving matrix\n * @param {ReadonlyMat2d} a the source matrix\n * @returns {mat2d} out\n */\n\nexport function copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  out[4] = a[4];\n  out[5] = a[5];\n  return out;\n}\n/**\n * Set a mat2d to the identity matrix\n *\n * @param {mat2d} out the receiving matrix\n * @returns {mat2d} out\n */\n\nexport function identity(out) {\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 1;\n  out[4] = 0;\n  out[5] = 0;\n  return out;\n}\n/**\n * Create a new mat2d with the given values\n *\n * @param {Number} a Component A (index 0)\n * @param {Number} b Component B (index 1)\n * @param {Number} c Component C (index 2)\n * @param {Number} d Component D (index 3)\n * @param {Number} tx Component TX (index 4)\n * @param {Number} ty Component TY (index 5)\n * @returns {mat2d} A new mat2d\n */\n\nexport function fromValues(a, b, c, d, tx, ty) {\n  var out = new glMatrix.ARRAY_TYPE(6);\n  out[0] = a;\n  out[1] = b;\n  out[2] = c;\n  out[3] = d;\n  out[4] = tx;\n  out[5] = ty;\n  return out;\n}\n/**\n * Set the components of a mat2d to the given values\n *\n * @param {mat2d} out the receiving matrix\n * @param {Number} a Component A (index 0)\n * @param {Number} b Component B (index 1)\n * @param {Number} c Component C (index 2)\n * @param {Number} d Component D (index 3)\n * @param {Number} tx Component TX (index 4)\n * @param {Number} ty Component TY (index 5)\n * @returns {mat2d} out\n */\n\nexport function set(out, a, b, c, d, tx, ty) {\n  out[0] = a;\n  out[1] = b;\n  out[2] = c;\n  out[3] = d;\n  out[4] = tx;\n  out[5] = ty;\n  return out;\n}\n/**\n * Inverts a mat2d\n *\n * @param {mat2d} out the receiving matrix\n * @param {ReadonlyMat2d} a the source matrix\n * @returns {mat2d} out\n */\n\nexport function invert(out, a) {\n  var aa = a[0],\n      ab = a[1],\n      ac = a[2],\n      ad = a[3];\n  var atx = a[4],\n      aty = a[5];\n  var det = aa * ad - ab * ac;\n\n  if (!det) {\n    return null;\n  }\n\n  det = 1.0 / det;\n  out[0] = ad * det;\n  out[1] = -ab * det;\n  out[2] = -ac * det;\n  out[3] = aa * det;\n  out[4] = (ac * aty - ad * atx) * det;\n  out[5] = (ab * atx - aa * aty) * det;\n  return out;\n}\n/**\n * Calculates the determinant of a mat2d\n *\n * @param {ReadonlyMat2d} a the source matrix\n * @returns {Number} determinant of a\n */\n\nexport function determinant(a) {\n  return a[0] * a[3] - a[1] * a[2];\n}\n/**\n * Multiplies two mat2d's\n *\n * @param {mat2d} out the receiving matrix\n * @param {ReadonlyMat2d} a the first operand\n * @param {ReadonlyMat2d} b the second operand\n * @returns {mat2d} out\n */\n\nexport function multiply(out, a, b) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3],\n      a4 = a[4],\n      a5 = a[5];\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2],\n      b3 = b[3],\n      b4 = b[4],\n      b5 = b[5];\n  out[0] = a0 * b0 + a2 * b1;\n  out[1] = a1 * b0 + a3 * b1;\n  out[2] = a0 * b2 + a2 * b3;\n  out[3] = a1 * b2 + a3 * b3;\n  out[4] = a0 * b4 + a2 * b5 + a4;\n  out[5] = a1 * b4 + a3 * b5 + a5;\n  return out;\n}\n/**\n * Rotates a mat2d by the given angle\n *\n * @param {mat2d} out the receiving matrix\n * @param {ReadonlyMat2d} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat2d} out\n */\n\nexport function rotate(out, a, rad) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3],\n      a4 = a[4],\n      a5 = a[5];\n  var s = Math.sin(rad);\n  var c = Math.cos(rad);\n  out[0] = a0 * c + a2 * s;\n  out[1] = a1 * c + a3 * s;\n  out[2] = a0 * -s + a2 * c;\n  out[3] = a1 * -s + a3 * c;\n  out[4] = a4;\n  out[5] = a5;\n  return out;\n}\n/**\n * Scales the mat2d by the dimensions in the given vec2\n *\n * @param {mat2d} out the receiving matrix\n * @param {ReadonlyMat2d} a the matrix to translate\n * @param {ReadonlyVec2} v the vec2 to scale the matrix by\n * @returns {mat2d} out\n **/\n\nexport function scale(out, a, v) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3],\n      a4 = a[4],\n      a5 = a[5];\n  var v0 = v[0],\n      v1 = v[1];\n  out[0] = a0 * v0;\n  out[1] = a1 * v0;\n  out[2] = a2 * v1;\n  out[3] = a3 * v1;\n  out[4] = a4;\n  out[5] = a5;\n  return out;\n}\n/**\n * Translates the mat2d by the dimensions in the given vec2\n *\n * @param {mat2d} out the receiving matrix\n * @param {ReadonlyMat2d} a the matrix to translate\n * @param {ReadonlyVec2} v the vec2 to translate the matrix by\n * @returns {mat2d} out\n **/\n\nexport function translate(out, a, v) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3],\n      a4 = a[4],\n      a5 = a[5];\n  var v0 = v[0],\n      v1 = v[1];\n  out[0] = a0;\n  out[1] = a1;\n  out[2] = a2;\n  out[3] = a3;\n  out[4] = a0 * v0 + a2 * v1 + a4;\n  out[5] = a1 * v0 + a3 * v1 + a5;\n  return out;\n}\n/**\n * Creates a matrix from a given angle\n * This is equivalent to (but much faster than):\n *\n *     mat2d.identity(dest);\n *     mat2d.rotate(dest, dest, rad);\n *\n * @param {mat2d} out mat2d receiving operation result\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat2d} out\n */\n\nexport function fromRotation(out, rad) {\n  var s = Math.sin(rad),\n      c = Math.cos(rad);\n  out[0] = c;\n  out[1] = s;\n  out[2] = -s;\n  out[3] = c;\n  out[4] = 0;\n  out[5] = 0;\n  return out;\n}\n/**\n * Creates a matrix from a vector scaling\n * This is equivalent to (but much faster than):\n *\n *     mat2d.identity(dest);\n *     mat2d.scale(dest, dest, vec);\n *\n * @param {mat2d} out mat2d receiving operation result\n * @param {ReadonlyVec2} v Scaling vector\n * @returns {mat2d} out\n */\n\nexport function fromScaling(out, v) {\n  out[0] = v[0];\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = v[1];\n  out[4] = 0;\n  out[5] = 0;\n  return out;\n}\n/**\n * Creates a matrix from a vector translation\n * This is equivalent to (but much faster than):\n *\n *     mat2d.identity(dest);\n *     mat2d.translate(dest, dest, vec);\n *\n * @param {mat2d} out mat2d receiving operation result\n * @param {ReadonlyVec2} v Translation vector\n * @returns {mat2d} out\n */\n\nexport function fromTranslation(out, v) {\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 1;\n  out[4] = v[0];\n  out[5] = v[1];\n  return out;\n}\n/**\n * Returns a string representation of a mat2d\n *\n * @param {ReadonlyMat2d} a matrix to represent as a string\n * @returns {String} string representation of the matrix\n */\n\nexport function str(a) {\n  return \"mat2d(\" + a[0] + \", \" + a[1] + \", \" + a[2] + \", \" + a[3] + \", \" + a[4] + \", \" + a[5] + \")\";\n}\n/**\n * Returns Frobenius norm of a mat2d\n *\n * @param {ReadonlyMat2d} a the matrix to calculate Frobenius norm of\n * @returns {Number} Frobenius norm\n */\n\nexport function frob(a) {\n  return Math.hypot(a[0], a[1], a[2], a[3], a[4], a[5], 1);\n}\n/**\n * Adds two mat2d's\n *\n * @param {mat2d} out the receiving matrix\n * @param {ReadonlyMat2d} a the first operand\n * @param {ReadonlyMat2d} b the second operand\n * @returns {mat2d} out\n */\n\nexport function add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  out[2] = a[2] + b[2];\n  out[3] = a[3] + b[3];\n  out[4] = a[4] + b[4];\n  out[5] = a[5] + b[5];\n  return out;\n}\n/**\n * Subtracts matrix b from matrix a\n *\n * @param {mat2d} out the receiving matrix\n * @param {ReadonlyMat2d} a the first operand\n * @param {ReadonlyMat2d} b the second operand\n * @returns {mat2d} out\n */\n\nexport function subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  out[2] = a[2] - b[2];\n  out[3] = a[3] - b[3];\n  out[4] = a[4] - b[4];\n  out[5] = a[5] - b[5];\n  return out;\n}\n/**\n * Multiply each element of the matrix by a scalar.\n *\n * @param {mat2d} out the receiving matrix\n * @param {ReadonlyMat2d} a the matrix to scale\n * @param {Number} b amount to scale the matrix's elements by\n * @returns {mat2d} out\n */\n\nexport function multiplyScalar(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  out[2] = a[2] * b;\n  out[3] = a[3] * b;\n  out[4] = a[4] * b;\n  out[5] = a[5] * b;\n  return out;\n}\n/**\n * Adds two mat2d's after multiplying each element of the second operand by a scalar value.\n *\n * @param {mat2d} out the receiving vector\n * @param {ReadonlyMat2d} a the first operand\n * @param {ReadonlyMat2d} b the second operand\n * @param {Number} scale the amount to scale b's elements by before adding\n * @returns {mat2d} out\n */\n\nexport function multiplyScalarAndAdd(out, a, b, scale) {\n  out[0] = a[0] + b[0] * scale;\n  out[1] = a[1] + b[1] * scale;\n  out[2] = a[2] + b[2] * scale;\n  out[3] = a[3] + b[3] * scale;\n  out[4] = a[4] + b[4] * scale;\n  out[5] = a[5] + b[5] * scale;\n  return out;\n}\n/**\n * Returns whether or not the matrices have exactly the same elements in the same position (when compared with ===)\n *\n * @param {ReadonlyMat2d} a The first matrix.\n * @param {ReadonlyMat2d} b The second matrix.\n * @returns {Boolean} True if the matrices are equal, false otherwise.\n */\n\nexport function exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3] && a[4] === b[4] && a[5] === b[5];\n}\n/**\n * Returns whether or not the matrices have approximately the same elements in the same position.\n *\n * @param {ReadonlyMat2d} a The first matrix.\n * @param {ReadonlyMat2d} b The second matrix.\n * @returns {Boolean} True if the matrices are equal, false otherwise.\n */\n\nexport function equals(a, b) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3],\n      a4 = a[4],\n      a5 = a[5];\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2],\n      b3 = b[3],\n      b4 = b[4],\n      b5 = b[5];\n  return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2)) && Math.abs(a3 - b3) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a3), Math.abs(b3)) && Math.abs(a4 - b4) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a4), Math.abs(b4)) && Math.abs(a5 - b5) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a5), Math.abs(b5));\n}\n/**\n * Alias for {@link mat2d.multiply}\n * @function\n */\n\nexport var mul = multiply;\n/**\n * Alias for {@link mat2d.subtract}\n * @function\n */\n\nexport var sub = subtract;","import * as glMatrix from \"./common.js\";\n/**\n * 3x3 Matrix\n * @module mat3\n */\n\n/**\n * Creates a new identity mat3\n *\n * @returns {mat3} a new 3x3 matrix\n */\n\nexport function create() {\n  var out = new glMatrix.ARRAY_TYPE(9);\n\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n    out[5] = 0;\n    out[6] = 0;\n    out[7] = 0;\n  }\n\n  out[0] = 1;\n  out[4] = 1;\n  out[8] = 1;\n  return out;\n}\n/**\n * Copies the upper-left 3x3 values into the given mat3.\n *\n * @param {mat3} out the receiving 3x3 matrix\n * @param {ReadonlyMat4} a   the source 4x4 matrix\n * @returns {mat3} out\n */\n\nexport function fromMat4(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[4];\n  out[4] = a[5];\n  out[5] = a[6];\n  out[6] = a[8];\n  out[7] = a[9];\n  out[8] = a[10];\n  return out;\n}\n/**\n * Creates a new mat3 initialized with values from an existing matrix\n *\n * @param {ReadonlyMat3} a matrix to clone\n * @returns {mat3} a new 3x3 matrix\n */\n\nexport function clone(a) {\n  var out = new glMatrix.ARRAY_TYPE(9);\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  out[4] = a[4];\n  out[5] = a[5];\n  out[6] = a[6];\n  out[7] = a[7];\n  out[8] = a[8];\n  return out;\n}\n/**\n * Copy the values from one mat3 to another\n *\n * @param {mat3} out the receiving matrix\n * @param {ReadonlyMat3} a the source matrix\n * @returns {mat3} out\n */\n\nexport function copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  out[4] = a[4];\n  out[5] = a[5];\n  out[6] = a[6];\n  out[7] = a[7];\n  out[8] = a[8];\n  return out;\n}\n/**\n * Create a new mat3 with the given values\n *\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\n * @param {Number} m02 Component in column 0, row 2 position (index 2)\n * @param {Number} m10 Component in column 1, row 0 position (index 3)\n * @param {Number} m11 Component in column 1, row 1 position (index 4)\n * @param {Number} m12 Component in column 1, row 2 position (index 5)\n * @param {Number} m20 Component in column 2, row 0 position (index 6)\n * @param {Number} m21 Component in column 2, row 1 position (index 7)\n * @param {Number} m22 Component in column 2, row 2 position (index 8)\n * @returns {mat3} A new mat3\n */\n\nexport function fromValues(m00, m01, m02, m10, m11, m12, m20, m21, m22) {\n  var out = new glMatrix.ARRAY_TYPE(9);\n  out[0] = m00;\n  out[1] = m01;\n  out[2] = m02;\n  out[3] = m10;\n  out[4] = m11;\n  out[5] = m12;\n  out[6] = m20;\n  out[7] = m21;\n  out[8] = m22;\n  return out;\n}\n/**\n * Set the components of a mat3 to the given values\n *\n * @param {mat3} out the receiving matrix\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\n * @param {Number} m02 Component in column 0, row 2 position (index 2)\n * @param {Number} m10 Component in column 1, row 0 position (index 3)\n * @param {Number} m11 Component in column 1, row 1 position (index 4)\n * @param {Number} m12 Component in column 1, row 2 position (index 5)\n * @param {Number} m20 Component in column 2, row 0 position (index 6)\n * @param {Number} m21 Component in column 2, row 1 position (index 7)\n * @param {Number} m22 Component in column 2, row 2 position (index 8)\n * @returns {mat3} out\n */\n\nexport function set(out, m00, m01, m02, m10, m11, m12, m20, m21, m22) {\n  out[0] = m00;\n  out[1] = m01;\n  out[2] = m02;\n  out[3] = m10;\n  out[4] = m11;\n  out[5] = m12;\n  out[6] = m20;\n  out[7] = m21;\n  out[8] = m22;\n  return out;\n}\n/**\n * Set a mat3 to the identity matrix\n *\n * @param {mat3} out the receiving matrix\n * @returns {mat3} out\n */\n\nexport function identity(out) {\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 1;\n  out[5] = 0;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 1;\n  return out;\n}\n/**\n * Transpose the values of a mat3\n *\n * @param {mat3} out the receiving matrix\n * @param {ReadonlyMat3} a the source matrix\n * @returns {mat3} out\n */\n\nexport function transpose(out, a) {\n  // If we are transposing ourselves we can skip a few steps but have to cache some values\n  if (out === a) {\n    var a01 = a[1],\n        a02 = a[2],\n        a12 = a[5];\n    out[1] = a[3];\n    out[2] = a[6];\n    out[3] = a01;\n    out[5] = a[7];\n    out[6] = a02;\n    out[7] = a12;\n  } else {\n    out[0] = a[0];\n    out[1] = a[3];\n    out[2] = a[6];\n    out[3] = a[1];\n    out[4] = a[4];\n    out[5] = a[7];\n    out[6] = a[2];\n    out[7] = a[5];\n    out[8] = a[8];\n  }\n\n  return out;\n}\n/**\n * Inverts a mat3\n *\n * @param {mat3} out the receiving matrix\n * @param {ReadonlyMat3} a the source matrix\n * @returns {mat3} out\n */\n\nexport function invert(out, a) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2];\n  var a10 = a[3],\n      a11 = a[4],\n      a12 = a[5];\n  var a20 = a[6],\n      a21 = a[7],\n      a22 = a[8];\n  var b01 = a22 * a11 - a12 * a21;\n  var b11 = -a22 * a10 + a12 * a20;\n  var b21 = a21 * a10 - a11 * a20; // Calculate the determinant\n\n  var det = a00 * b01 + a01 * b11 + a02 * b21;\n\n  if (!det) {\n    return null;\n  }\n\n  det = 1.0 / det;\n  out[0] = b01 * det;\n  out[1] = (-a22 * a01 + a02 * a21) * det;\n  out[2] = (a12 * a01 - a02 * a11) * det;\n  out[3] = b11 * det;\n  out[4] = (a22 * a00 - a02 * a20) * det;\n  out[5] = (-a12 * a00 + a02 * a10) * det;\n  out[6] = b21 * det;\n  out[7] = (-a21 * a00 + a01 * a20) * det;\n  out[8] = (a11 * a00 - a01 * a10) * det;\n  return out;\n}\n/**\n * Calculates the adjugate of a mat3\n *\n * @param {mat3} out the receiving matrix\n * @param {ReadonlyMat3} a the source matrix\n * @returns {mat3} out\n */\n\nexport function adjoint(out, a) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2];\n  var a10 = a[3],\n      a11 = a[4],\n      a12 = a[5];\n  var a20 = a[6],\n      a21 = a[7],\n      a22 = a[8];\n  out[0] = a11 * a22 - a12 * a21;\n  out[1] = a02 * a21 - a01 * a22;\n  out[2] = a01 * a12 - a02 * a11;\n  out[3] = a12 * a20 - a10 * a22;\n  out[4] = a00 * a22 - a02 * a20;\n  out[5] = a02 * a10 - a00 * a12;\n  out[6] = a10 * a21 - a11 * a20;\n  out[7] = a01 * a20 - a00 * a21;\n  out[8] = a00 * a11 - a01 * a10;\n  return out;\n}\n/**\n * Calculates the determinant of a mat3\n *\n * @param {ReadonlyMat3} a the source matrix\n * @returns {Number} determinant of a\n */\n\nexport function determinant(a) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2];\n  var a10 = a[3],\n      a11 = a[4],\n      a12 = a[5];\n  var a20 = a[6],\n      a21 = a[7],\n      a22 = a[8];\n  return a00 * (a22 * a11 - a12 * a21) + a01 * (-a22 * a10 + a12 * a20) + a02 * (a21 * a10 - a11 * a20);\n}\n/**\n * Multiplies two mat3's\n *\n * @param {mat3} out the receiving matrix\n * @param {ReadonlyMat3} a the first operand\n * @param {ReadonlyMat3} b the second operand\n * @returns {mat3} out\n */\n\nexport function multiply(out, a, b) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2];\n  var a10 = a[3],\n      a11 = a[4],\n      a12 = a[5];\n  var a20 = a[6],\n      a21 = a[7],\n      a22 = a[8];\n  var b00 = b[0],\n      b01 = b[1],\n      b02 = b[2];\n  var b10 = b[3],\n      b11 = b[4],\n      b12 = b[5];\n  var b20 = b[6],\n      b21 = b[7],\n      b22 = b[8];\n  out[0] = b00 * a00 + b01 * a10 + b02 * a20;\n  out[1] = b00 * a01 + b01 * a11 + b02 * a21;\n  out[2] = b00 * a02 + b01 * a12 + b02 * a22;\n  out[3] = b10 * a00 + b11 * a10 + b12 * a20;\n  out[4] = b10 * a01 + b11 * a11 + b12 * a21;\n  out[5] = b10 * a02 + b11 * a12 + b12 * a22;\n  out[6] = b20 * a00 + b21 * a10 + b22 * a20;\n  out[7] = b20 * a01 + b21 * a11 + b22 * a21;\n  out[8] = b20 * a02 + b21 * a12 + b22 * a22;\n  return out;\n}\n/**\n * Translate a mat3 by the given vector\n *\n * @param {mat3} out the receiving matrix\n * @param {ReadonlyMat3} a the matrix to translate\n * @param {ReadonlyVec2} v vector to translate by\n * @returns {mat3} out\n */\n\nexport function translate(out, a, v) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a10 = a[3],\n      a11 = a[4],\n      a12 = a[5],\n      a20 = a[6],\n      a21 = a[7],\n      a22 = a[8],\n      x = v[0],\n      y = v[1];\n  out[0] = a00;\n  out[1] = a01;\n  out[2] = a02;\n  out[3] = a10;\n  out[4] = a11;\n  out[5] = a12;\n  out[6] = x * a00 + y * a10 + a20;\n  out[7] = x * a01 + y * a11 + a21;\n  out[8] = x * a02 + y * a12 + a22;\n  return out;\n}\n/**\n * Rotates a mat3 by the given angle\n *\n * @param {mat3} out the receiving matrix\n * @param {ReadonlyMat3} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat3} out\n */\n\nexport function rotate(out, a, rad) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a10 = a[3],\n      a11 = a[4],\n      a12 = a[5],\n      a20 = a[6],\n      a21 = a[7],\n      a22 = a[8],\n      s = Math.sin(rad),\n      c = Math.cos(rad);\n  out[0] = c * a00 + s * a10;\n  out[1] = c * a01 + s * a11;\n  out[2] = c * a02 + s * a12;\n  out[3] = c * a10 - s * a00;\n  out[4] = c * a11 - s * a01;\n  out[5] = c * a12 - s * a02;\n  out[6] = a20;\n  out[7] = a21;\n  out[8] = a22;\n  return out;\n}\n/**\n * Scales the mat3 by the dimensions in the given vec2\n *\n * @param {mat3} out the receiving matrix\n * @param {ReadonlyMat3} a the matrix to rotate\n * @param {ReadonlyVec2} v the vec2 to scale the matrix by\n * @returns {mat3} out\n **/\n\nexport function scale(out, a, v) {\n  var x = v[0],\n      y = v[1];\n  out[0] = x * a[0];\n  out[1] = x * a[1];\n  out[2] = x * a[2];\n  out[3] = y * a[3];\n  out[4] = y * a[4];\n  out[5] = y * a[5];\n  out[6] = a[6];\n  out[7] = a[7];\n  out[8] = a[8];\n  return out;\n}\n/**\n * Creates a matrix from a vector translation\n * This is equivalent to (but much faster than):\n *\n *     mat3.identity(dest);\n *     mat3.translate(dest, dest, vec);\n *\n * @param {mat3} out mat3 receiving operation result\n * @param {ReadonlyVec2} v Translation vector\n * @returns {mat3} out\n */\n\nexport function fromTranslation(out, v) {\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 1;\n  out[5] = 0;\n  out[6] = v[0];\n  out[7] = v[1];\n  out[8] = 1;\n  return out;\n}\n/**\n * Creates a matrix from a given angle\n * This is equivalent to (but much faster than):\n *\n *     mat3.identity(dest);\n *     mat3.rotate(dest, dest, rad);\n *\n * @param {mat3} out mat3 receiving operation result\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat3} out\n */\n\nexport function fromRotation(out, rad) {\n  var s = Math.sin(rad),\n      c = Math.cos(rad);\n  out[0] = c;\n  out[1] = s;\n  out[2] = 0;\n  out[3] = -s;\n  out[4] = c;\n  out[5] = 0;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 1;\n  return out;\n}\n/**\n * Creates a matrix from a vector scaling\n * This is equivalent to (but much faster than):\n *\n *     mat3.identity(dest);\n *     mat3.scale(dest, dest, vec);\n *\n * @param {mat3} out mat3 receiving operation result\n * @param {ReadonlyVec2} v Scaling vector\n * @returns {mat3} out\n */\n\nexport function fromScaling(out, v) {\n  out[0] = v[0];\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = v[1];\n  out[5] = 0;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 1;\n  return out;\n}\n/**\n * Copies the values from a mat2d into a mat3\n *\n * @param {mat3} out the receiving matrix\n * @param {ReadonlyMat2d} a the matrix to copy\n * @returns {mat3} out\n **/\n\nexport function fromMat2d(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = 0;\n  out[3] = a[2];\n  out[4] = a[3];\n  out[5] = 0;\n  out[6] = a[4];\n  out[7] = a[5];\n  out[8] = 1;\n  return out;\n}\n/**\n * Calculates a 3x3 matrix from the given quaternion\n *\n * @param {mat3} out mat3 receiving operation result\n * @param {ReadonlyQuat} q Quaternion to create matrix from\n *\n * @returns {mat3} out\n */\n\nexport function fromQuat(out, q) {\n  var x = q[0],\n      y = q[1],\n      z = q[2],\n      w = q[3];\n  var x2 = x + x;\n  var y2 = y + y;\n  var z2 = z + z;\n  var xx = x * x2;\n  var yx = y * x2;\n  var yy = y * y2;\n  var zx = z * x2;\n  var zy = z * y2;\n  var zz = z * z2;\n  var wx = w * x2;\n  var wy = w * y2;\n  var wz = w * z2;\n  out[0] = 1 - yy - zz;\n  out[3] = yx - wz;\n  out[6] = zx + wy;\n  out[1] = yx + wz;\n  out[4] = 1 - xx - zz;\n  out[7] = zy - wx;\n  out[2] = zx - wy;\n  out[5] = zy + wx;\n  out[8] = 1 - xx - yy;\n  return out;\n}\n/**\n * Calculates a 3x3 normal matrix (transpose inverse) from the 4x4 matrix\n *\n * @param {mat3} out mat3 receiving operation result\n * @param {ReadonlyMat4} a Mat4 to derive the normal matrix from\n *\n * @returns {mat3} out\n */\n\nexport function normalFromMat4(out, a) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a03 = a[3];\n  var a10 = a[4],\n      a11 = a[5],\n      a12 = a[6],\n      a13 = a[7];\n  var a20 = a[8],\n      a21 = a[9],\n      a22 = a[10],\n      a23 = a[11];\n  var a30 = a[12],\n      a31 = a[13],\n      a32 = a[14],\n      a33 = a[15];\n  var b00 = a00 * a11 - a01 * a10;\n  var b01 = a00 * a12 - a02 * a10;\n  var b02 = a00 * a13 - a03 * a10;\n  var b03 = a01 * a12 - a02 * a11;\n  var b04 = a01 * a13 - a03 * a11;\n  var b05 = a02 * a13 - a03 * a12;\n  var b06 = a20 * a31 - a21 * a30;\n  var b07 = a20 * a32 - a22 * a30;\n  var b08 = a20 * a33 - a23 * a30;\n  var b09 = a21 * a32 - a22 * a31;\n  var b10 = a21 * a33 - a23 * a31;\n  var b11 = a22 * a33 - a23 * a32; // Calculate the determinant\n\n  var det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\n\n  if (!det) {\n    return null;\n  }\n\n  det = 1.0 / det;\n  out[0] = (a11 * b11 - a12 * b10 + a13 * b09) * det;\n  out[1] = (a12 * b08 - a10 * b11 - a13 * b07) * det;\n  out[2] = (a10 * b10 - a11 * b08 + a13 * b06) * det;\n  out[3] = (a02 * b10 - a01 * b11 - a03 * b09) * det;\n  out[4] = (a00 * b11 - a02 * b08 + a03 * b07) * det;\n  out[5] = (a01 * b08 - a00 * b10 - a03 * b06) * det;\n  out[6] = (a31 * b05 - a32 * b04 + a33 * b03) * det;\n  out[7] = (a32 * b02 - a30 * b05 - a33 * b01) * det;\n  out[8] = (a30 * b04 - a31 * b02 + a33 * b00) * det;\n  return out;\n}\n/**\n * Generates a 2D projection matrix with the given bounds\n *\n * @param {mat3} out mat3 frustum matrix will be written into\n * @param {number} width Width of your gl context\n * @param {number} height Height of gl context\n * @returns {mat3} out\n */\n\nexport function projection(out, width, height) {\n  out[0] = 2 / width;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = -2 / height;\n  out[5] = 0;\n  out[6] = -1;\n  out[7] = 1;\n  out[8] = 1;\n  return out;\n}\n/**\n * Returns a string representation of a mat3\n *\n * @param {ReadonlyMat3} a matrix to represent as a string\n * @returns {String} string representation of the matrix\n */\n\nexport function str(a) {\n  return \"mat3(\" + a[0] + \", \" + a[1] + \", \" + a[2] + \", \" + a[3] + \", \" + a[4] + \", \" + a[5] + \", \" + a[6] + \", \" + a[7] + \", \" + a[8] + \")\";\n}\n/**\n * Returns Frobenius norm of a mat3\n *\n * @param {ReadonlyMat3} a the matrix to calculate Frobenius norm of\n * @returns {Number} Frobenius norm\n */\n\nexport function frob(a) {\n  return Math.hypot(a[0], a[1], a[2], a[3], a[4], a[5], a[6], a[7], a[8]);\n}\n/**\n * Adds two mat3's\n *\n * @param {mat3} out the receiving matrix\n * @param {ReadonlyMat3} a the first operand\n * @param {ReadonlyMat3} b the second operand\n * @returns {mat3} out\n */\n\nexport function add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  out[2] = a[2] + b[2];\n  out[3] = a[3] + b[3];\n  out[4] = a[4] + b[4];\n  out[5] = a[5] + b[5];\n  out[6] = a[6] + b[6];\n  out[7] = a[7] + b[7];\n  out[8] = a[8] + b[8];\n  return out;\n}\n/**\n * Subtracts matrix b from matrix a\n *\n * @param {mat3} out the receiving matrix\n * @param {ReadonlyMat3} a the first operand\n * @param {ReadonlyMat3} b the second operand\n * @returns {mat3} out\n */\n\nexport function subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  out[2] = a[2] - b[2];\n  out[3] = a[3] - b[3];\n  out[4] = a[4] - b[4];\n  out[5] = a[5] - b[5];\n  out[6] = a[6] - b[6];\n  out[7] = a[7] - b[7];\n  out[8] = a[8] - b[8];\n  return out;\n}\n/**\n * Multiply each element of the matrix by a scalar.\n *\n * @param {mat3} out the receiving matrix\n * @param {ReadonlyMat3} a the matrix to scale\n * @param {Number} b amount to scale the matrix's elements by\n * @returns {mat3} out\n */\n\nexport function multiplyScalar(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  out[2] = a[2] * b;\n  out[3] = a[3] * b;\n  out[4] = a[4] * b;\n  out[5] = a[5] * b;\n  out[6] = a[6] * b;\n  out[7] = a[7] * b;\n  out[8] = a[8] * b;\n  return out;\n}\n/**\n * Adds two mat3's after multiplying each element of the second operand by a scalar value.\n *\n * @param {mat3} out the receiving vector\n * @param {ReadonlyMat3} a the first operand\n * @param {ReadonlyMat3} b the second operand\n * @param {Number} scale the amount to scale b's elements by before adding\n * @returns {mat3} out\n */\n\nexport function multiplyScalarAndAdd(out, a, b, scale) {\n  out[0] = a[0] + b[0] * scale;\n  out[1] = a[1] + b[1] * scale;\n  out[2] = a[2] + b[2] * scale;\n  out[3] = a[3] + b[3] * scale;\n  out[4] = a[4] + b[4] * scale;\n  out[5] = a[5] + b[5] * scale;\n  out[6] = a[6] + b[6] * scale;\n  out[7] = a[7] + b[7] * scale;\n  out[8] = a[8] + b[8] * scale;\n  return out;\n}\n/**\n * Returns whether or not the matrices have exactly the same elements in the same position (when compared with ===)\n *\n * @param {ReadonlyMat3} a The first matrix.\n * @param {ReadonlyMat3} b The second matrix.\n * @returns {Boolean} True if the matrices are equal, false otherwise.\n */\n\nexport function exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3] && a[4] === b[4] && a[5] === b[5] && a[6] === b[6] && a[7] === b[7] && a[8] === b[8];\n}\n/**\n * Returns whether or not the matrices have approximately the same elements in the same position.\n *\n * @param {ReadonlyMat3} a The first matrix.\n * @param {ReadonlyMat3} b The second matrix.\n * @returns {Boolean} True if the matrices are equal, false otherwise.\n */\n\nexport function equals(a, b) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3],\n      a4 = a[4],\n      a5 = a[5],\n      a6 = a[6],\n      a7 = a[7],\n      a8 = a[8];\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2],\n      b3 = b[3],\n      b4 = b[4],\n      b5 = b[5],\n      b6 = b[6],\n      b7 = b[7],\n      b8 = b[8];\n  return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2)) && Math.abs(a3 - b3) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a3), Math.abs(b3)) && Math.abs(a4 - b4) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a4), Math.abs(b4)) && Math.abs(a5 - b5) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a5), Math.abs(b5)) && Math.abs(a6 - b6) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a6), Math.abs(b6)) && Math.abs(a7 - b7) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a7), Math.abs(b7)) && Math.abs(a8 - b8) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a8), Math.abs(b8));\n}\n/**\n * Alias for {@link mat3.multiply}\n * @function\n */\n\nexport var mul = multiply;\n/**\n * Alias for {@link mat3.subtract}\n * @function\n */\n\nexport var sub = subtract;","import * as glMatrix from \"./common.js\";\n/**\n * 4x4 Matrix<br>Format: column-major, when typed out it looks like row-major<br>The matrices are being post multiplied.\n * @module mat4\n */\n\n/**\n * Creates a new identity mat4\n *\n * @returns {mat4} a new 4x4 matrix\n */\n\nexport function create() {\n  var out = new glMatrix.ARRAY_TYPE(16);\n\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n    out[4] = 0;\n    out[6] = 0;\n    out[7] = 0;\n    out[8] = 0;\n    out[9] = 0;\n    out[11] = 0;\n    out[12] = 0;\n    out[13] = 0;\n    out[14] = 0;\n  }\n\n  out[0] = 1;\n  out[5] = 1;\n  out[10] = 1;\n  out[15] = 1;\n  return out;\n}\n/**\n * Creates a new mat4 initialized with values from an existing matrix\n *\n * @param {ReadonlyMat4} a matrix to clone\n * @returns {mat4} a new 4x4 matrix\n */\n\nexport function clone(a) {\n  var out = new glMatrix.ARRAY_TYPE(16);\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  out[4] = a[4];\n  out[5] = a[5];\n  out[6] = a[6];\n  out[7] = a[7];\n  out[8] = a[8];\n  out[9] = a[9];\n  out[10] = a[10];\n  out[11] = a[11];\n  out[12] = a[12];\n  out[13] = a[13];\n  out[14] = a[14];\n  out[15] = a[15];\n  return out;\n}\n/**\n * Copy the values from one mat4 to another\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the source matrix\n * @returns {mat4} out\n */\n\nexport function copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  out[4] = a[4];\n  out[5] = a[5];\n  out[6] = a[6];\n  out[7] = a[7];\n  out[8] = a[8];\n  out[9] = a[9];\n  out[10] = a[10];\n  out[11] = a[11];\n  out[12] = a[12];\n  out[13] = a[13];\n  out[14] = a[14];\n  out[15] = a[15];\n  return out;\n}\n/**\n * Create a new mat4 with the given values\n *\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\n * @param {Number} m02 Component in column 0, row 2 position (index 2)\n * @param {Number} m03 Component in column 0, row 3 position (index 3)\n * @param {Number} m10 Component in column 1, row 0 position (index 4)\n * @param {Number} m11 Component in column 1, row 1 position (index 5)\n * @param {Number} m12 Component in column 1, row 2 position (index 6)\n * @param {Number} m13 Component in column 1, row 3 position (index 7)\n * @param {Number} m20 Component in column 2, row 0 position (index 8)\n * @param {Number} m21 Component in column 2, row 1 position (index 9)\n * @param {Number} m22 Component in column 2, row 2 position (index 10)\n * @param {Number} m23 Component in column 2, row 3 position (index 11)\n * @param {Number} m30 Component in column 3, row 0 position (index 12)\n * @param {Number} m31 Component in column 3, row 1 position (index 13)\n * @param {Number} m32 Component in column 3, row 2 position (index 14)\n * @param {Number} m33 Component in column 3, row 3 position (index 15)\n * @returns {mat4} A new mat4\n */\n\nexport function fromValues(m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23, m30, m31, m32, m33) {\n  var out = new glMatrix.ARRAY_TYPE(16);\n  out[0] = m00;\n  out[1] = m01;\n  out[2] = m02;\n  out[3] = m03;\n  out[4] = m10;\n  out[5] = m11;\n  out[6] = m12;\n  out[7] = m13;\n  out[8] = m20;\n  out[9] = m21;\n  out[10] = m22;\n  out[11] = m23;\n  out[12] = m30;\n  out[13] = m31;\n  out[14] = m32;\n  out[15] = m33;\n  return out;\n}\n/**\n * Set the components of a mat4 to the given values\n *\n * @param {mat4} out the receiving matrix\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\n * @param {Number} m02 Component in column 0, row 2 position (index 2)\n * @param {Number} m03 Component in column 0, row 3 position (index 3)\n * @param {Number} m10 Component in column 1, row 0 position (index 4)\n * @param {Number} m11 Component in column 1, row 1 position (index 5)\n * @param {Number} m12 Component in column 1, row 2 position (index 6)\n * @param {Number} m13 Component in column 1, row 3 position (index 7)\n * @param {Number} m20 Component in column 2, row 0 position (index 8)\n * @param {Number} m21 Component in column 2, row 1 position (index 9)\n * @param {Number} m22 Component in column 2, row 2 position (index 10)\n * @param {Number} m23 Component in column 2, row 3 position (index 11)\n * @param {Number} m30 Component in column 3, row 0 position (index 12)\n * @param {Number} m31 Component in column 3, row 1 position (index 13)\n * @param {Number} m32 Component in column 3, row 2 position (index 14)\n * @param {Number} m33 Component in column 3, row 3 position (index 15)\n * @returns {mat4} out\n */\n\nexport function set(out, m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23, m30, m31, m32, m33) {\n  out[0] = m00;\n  out[1] = m01;\n  out[2] = m02;\n  out[3] = m03;\n  out[4] = m10;\n  out[5] = m11;\n  out[6] = m12;\n  out[7] = m13;\n  out[8] = m20;\n  out[9] = m21;\n  out[10] = m22;\n  out[11] = m23;\n  out[12] = m30;\n  out[13] = m31;\n  out[14] = m32;\n  out[15] = m33;\n  return out;\n}\n/**\n * Set a mat4 to the identity matrix\n *\n * @param {mat4} out the receiving matrix\n * @returns {mat4} out\n */\n\nexport function identity(out) {\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = 1;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = 1;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\n * Transpose the values of a mat4\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the source matrix\n * @returns {mat4} out\n */\n\nexport function transpose(out, a) {\n  // If we are transposing ourselves we can skip a few steps but have to cache some values\n  if (out === a) {\n    var a01 = a[1],\n        a02 = a[2],\n        a03 = a[3];\n    var a12 = a[6],\n        a13 = a[7];\n    var a23 = a[11];\n    out[1] = a[4];\n    out[2] = a[8];\n    out[3] = a[12];\n    out[4] = a01;\n    out[6] = a[9];\n    out[7] = a[13];\n    out[8] = a02;\n    out[9] = a12;\n    out[11] = a[14];\n    out[12] = a03;\n    out[13] = a13;\n    out[14] = a23;\n  } else {\n    out[0] = a[0];\n    out[1] = a[4];\n    out[2] = a[8];\n    out[3] = a[12];\n    out[4] = a[1];\n    out[5] = a[5];\n    out[6] = a[9];\n    out[7] = a[13];\n    out[8] = a[2];\n    out[9] = a[6];\n    out[10] = a[10];\n    out[11] = a[14];\n    out[12] = a[3];\n    out[13] = a[7];\n    out[14] = a[11];\n    out[15] = a[15];\n  }\n\n  return out;\n}\n/**\n * Inverts a mat4\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the source matrix\n * @returns {mat4} out\n */\n\nexport function invert(out, a) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a03 = a[3];\n  var a10 = a[4],\n      a11 = a[5],\n      a12 = a[6],\n      a13 = a[7];\n  var a20 = a[8],\n      a21 = a[9],\n      a22 = a[10],\n      a23 = a[11];\n  var a30 = a[12],\n      a31 = a[13],\n      a32 = a[14],\n      a33 = a[15];\n  var b00 = a00 * a11 - a01 * a10;\n  var b01 = a00 * a12 - a02 * a10;\n  var b02 = a00 * a13 - a03 * a10;\n  var b03 = a01 * a12 - a02 * a11;\n  var b04 = a01 * a13 - a03 * a11;\n  var b05 = a02 * a13 - a03 * a12;\n  var b06 = a20 * a31 - a21 * a30;\n  var b07 = a20 * a32 - a22 * a30;\n  var b08 = a20 * a33 - a23 * a30;\n  var b09 = a21 * a32 - a22 * a31;\n  var b10 = a21 * a33 - a23 * a31;\n  var b11 = a22 * a33 - a23 * a32; // Calculate the determinant\n\n  var det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\n\n  if (!det) {\n    return null;\n  }\n\n  det = 1.0 / det;\n  out[0] = (a11 * b11 - a12 * b10 + a13 * b09) * det;\n  out[1] = (a02 * b10 - a01 * b11 - a03 * b09) * det;\n  out[2] = (a31 * b05 - a32 * b04 + a33 * b03) * det;\n  out[3] = (a22 * b04 - a21 * b05 - a23 * b03) * det;\n  out[4] = (a12 * b08 - a10 * b11 - a13 * b07) * det;\n  out[5] = (a00 * b11 - a02 * b08 + a03 * b07) * det;\n  out[6] = (a32 * b02 - a30 * b05 - a33 * b01) * det;\n  out[7] = (a20 * b05 - a22 * b02 + a23 * b01) * det;\n  out[8] = (a10 * b10 - a11 * b08 + a13 * b06) * det;\n  out[9] = (a01 * b08 - a00 * b10 - a03 * b06) * det;\n  out[10] = (a30 * b04 - a31 * b02 + a33 * b00) * det;\n  out[11] = (a21 * b02 - a20 * b04 - a23 * b00) * det;\n  out[12] = (a11 * b07 - a10 * b09 - a12 * b06) * det;\n  out[13] = (a00 * b09 - a01 * b07 + a02 * b06) * det;\n  out[14] = (a31 * b01 - a30 * b03 - a32 * b00) * det;\n  out[15] = (a20 * b03 - a21 * b01 + a22 * b00) * det;\n  return out;\n}\n/**\n * Calculates the adjugate of a mat4\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the source matrix\n * @returns {mat4} out\n */\n\nexport function adjoint(out, a) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a03 = a[3];\n  var a10 = a[4],\n      a11 = a[5],\n      a12 = a[6],\n      a13 = a[7];\n  var a20 = a[8],\n      a21 = a[9],\n      a22 = a[10],\n      a23 = a[11];\n  var a30 = a[12],\n      a31 = a[13],\n      a32 = a[14],\n      a33 = a[15];\n  out[0] = a11 * (a22 * a33 - a23 * a32) - a21 * (a12 * a33 - a13 * a32) + a31 * (a12 * a23 - a13 * a22);\n  out[1] = -(a01 * (a22 * a33 - a23 * a32) - a21 * (a02 * a33 - a03 * a32) + a31 * (a02 * a23 - a03 * a22));\n  out[2] = a01 * (a12 * a33 - a13 * a32) - a11 * (a02 * a33 - a03 * a32) + a31 * (a02 * a13 - a03 * a12);\n  out[3] = -(a01 * (a12 * a23 - a13 * a22) - a11 * (a02 * a23 - a03 * a22) + a21 * (a02 * a13 - a03 * a12));\n  out[4] = -(a10 * (a22 * a33 - a23 * a32) - a20 * (a12 * a33 - a13 * a32) + a30 * (a12 * a23 - a13 * a22));\n  out[5] = a00 * (a22 * a33 - a23 * a32) - a20 * (a02 * a33 - a03 * a32) + a30 * (a02 * a23 - a03 * a22);\n  out[6] = -(a00 * (a12 * a33 - a13 * a32) - a10 * (a02 * a33 - a03 * a32) + a30 * (a02 * a13 - a03 * a12));\n  out[7] = a00 * (a12 * a23 - a13 * a22) - a10 * (a02 * a23 - a03 * a22) + a20 * (a02 * a13 - a03 * a12);\n  out[8] = a10 * (a21 * a33 - a23 * a31) - a20 * (a11 * a33 - a13 * a31) + a30 * (a11 * a23 - a13 * a21);\n  out[9] = -(a00 * (a21 * a33 - a23 * a31) - a20 * (a01 * a33 - a03 * a31) + a30 * (a01 * a23 - a03 * a21));\n  out[10] = a00 * (a11 * a33 - a13 * a31) - a10 * (a01 * a33 - a03 * a31) + a30 * (a01 * a13 - a03 * a11);\n  out[11] = -(a00 * (a11 * a23 - a13 * a21) - a10 * (a01 * a23 - a03 * a21) + a20 * (a01 * a13 - a03 * a11));\n  out[12] = -(a10 * (a21 * a32 - a22 * a31) - a20 * (a11 * a32 - a12 * a31) + a30 * (a11 * a22 - a12 * a21));\n  out[13] = a00 * (a21 * a32 - a22 * a31) - a20 * (a01 * a32 - a02 * a31) + a30 * (a01 * a22 - a02 * a21);\n  out[14] = -(a00 * (a11 * a32 - a12 * a31) - a10 * (a01 * a32 - a02 * a31) + a30 * (a01 * a12 - a02 * a11));\n  out[15] = a00 * (a11 * a22 - a12 * a21) - a10 * (a01 * a22 - a02 * a21) + a20 * (a01 * a12 - a02 * a11);\n  return out;\n}\n/**\n * Calculates the determinant of a mat4\n *\n * @param {ReadonlyMat4} a the source matrix\n * @returns {Number} determinant of a\n */\n\nexport function determinant(a) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a03 = a[3];\n  var a10 = a[4],\n      a11 = a[5],\n      a12 = a[6],\n      a13 = a[7];\n  var a20 = a[8],\n      a21 = a[9],\n      a22 = a[10],\n      a23 = a[11];\n  var a30 = a[12],\n      a31 = a[13],\n      a32 = a[14],\n      a33 = a[15];\n  var b00 = a00 * a11 - a01 * a10;\n  var b01 = a00 * a12 - a02 * a10;\n  var b02 = a00 * a13 - a03 * a10;\n  var b03 = a01 * a12 - a02 * a11;\n  var b04 = a01 * a13 - a03 * a11;\n  var b05 = a02 * a13 - a03 * a12;\n  var b06 = a20 * a31 - a21 * a30;\n  var b07 = a20 * a32 - a22 * a30;\n  var b08 = a20 * a33 - a23 * a30;\n  var b09 = a21 * a32 - a22 * a31;\n  var b10 = a21 * a33 - a23 * a31;\n  var b11 = a22 * a33 - a23 * a32; // Calculate the determinant\n\n  return b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\n}\n/**\n * Multiplies two mat4s\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the first operand\n * @param {ReadonlyMat4} b the second operand\n * @returns {mat4} out\n */\n\nexport function multiply(out, a, b) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a03 = a[3];\n  var a10 = a[4],\n      a11 = a[5],\n      a12 = a[6],\n      a13 = a[7];\n  var a20 = a[8],\n      a21 = a[9],\n      a22 = a[10],\n      a23 = a[11];\n  var a30 = a[12],\n      a31 = a[13],\n      a32 = a[14],\n      a33 = a[15]; // Cache only the current line of the second matrix\n\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2],\n      b3 = b[3];\n  out[0] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n  out[1] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n  out[2] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n  out[3] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n  b0 = b[4];\n  b1 = b[5];\n  b2 = b[6];\n  b3 = b[7];\n  out[4] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n  out[5] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n  out[6] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n  out[7] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n  b0 = b[8];\n  b1 = b[9];\n  b2 = b[10];\n  b3 = b[11];\n  out[8] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n  out[9] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n  out[10] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n  out[11] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n  b0 = b[12];\n  b1 = b[13];\n  b2 = b[14];\n  b3 = b[15];\n  out[12] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n  out[13] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n  out[14] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n  out[15] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n  return out;\n}\n/**\n * Translate a mat4 by the given vector\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the matrix to translate\n * @param {ReadonlyVec3} v vector to translate by\n * @returns {mat4} out\n */\n\nexport function translate(out, a, v) {\n  var x = v[0],\n      y = v[1],\n      z = v[2];\n  var a00, a01, a02, a03;\n  var a10, a11, a12, a13;\n  var a20, a21, a22, a23;\n\n  if (a === out) {\n    out[12] = a[0] * x + a[4] * y + a[8] * z + a[12];\n    out[13] = a[1] * x + a[5] * y + a[9] * z + a[13];\n    out[14] = a[2] * x + a[6] * y + a[10] * z + a[14];\n    out[15] = a[3] * x + a[7] * y + a[11] * z + a[15];\n  } else {\n    a00 = a[0];\n    a01 = a[1];\n    a02 = a[2];\n    a03 = a[3];\n    a10 = a[4];\n    a11 = a[5];\n    a12 = a[6];\n    a13 = a[7];\n    a20 = a[8];\n    a21 = a[9];\n    a22 = a[10];\n    a23 = a[11];\n    out[0] = a00;\n    out[1] = a01;\n    out[2] = a02;\n    out[3] = a03;\n    out[4] = a10;\n    out[5] = a11;\n    out[6] = a12;\n    out[7] = a13;\n    out[8] = a20;\n    out[9] = a21;\n    out[10] = a22;\n    out[11] = a23;\n    out[12] = a00 * x + a10 * y + a20 * z + a[12];\n    out[13] = a01 * x + a11 * y + a21 * z + a[13];\n    out[14] = a02 * x + a12 * y + a22 * z + a[14];\n    out[15] = a03 * x + a13 * y + a23 * z + a[15];\n  }\n\n  return out;\n}\n/**\n * Scales the mat4 by the dimensions in the given vec3 not using vectorization\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the matrix to scale\n * @param {ReadonlyVec3} v the vec3 to scale the matrix by\n * @returns {mat4} out\n **/\n\nexport function scale(out, a, v) {\n  var x = v[0],\n      y = v[1],\n      z = v[2];\n  out[0] = a[0] * x;\n  out[1] = a[1] * x;\n  out[2] = a[2] * x;\n  out[3] = a[3] * x;\n  out[4] = a[4] * y;\n  out[5] = a[5] * y;\n  out[6] = a[6] * y;\n  out[7] = a[7] * y;\n  out[8] = a[8] * z;\n  out[9] = a[9] * z;\n  out[10] = a[10] * z;\n  out[11] = a[11] * z;\n  out[12] = a[12];\n  out[13] = a[13];\n  out[14] = a[14];\n  out[15] = a[15];\n  return out;\n}\n/**\n * Rotates a mat4 by the given angle around the given axis\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @param {ReadonlyVec3} axis the axis to rotate around\n * @returns {mat4} out\n */\n\nexport function rotate(out, a, rad, axis) {\n  var x = axis[0],\n      y = axis[1],\n      z = axis[2];\n  var len = Math.hypot(x, y, z);\n  var s, c, t;\n  var a00, a01, a02, a03;\n  var a10, a11, a12, a13;\n  var a20, a21, a22, a23;\n  var b00, b01, b02;\n  var b10, b11, b12;\n  var b20, b21, b22;\n\n  if (len < glMatrix.EPSILON) {\n    return null;\n  }\n\n  len = 1 / len;\n  x *= len;\n  y *= len;\n  z *= len;\n  s = Math.sin(rad);\n  c = Math.cos(rad);\n  t = 1 - c;\n  a00 = a[0];\n  a01 = a[1];\n  a02 = a[2];\n  a03 = a[3];\n  a10 = a[4];\n  a11 = a[5];\n  a12 = a[6];\n  a13 = a[7];\n  a20 = a[8];\n  a21 = a[9];\n  a22 = a[10];\n  a23 = a[11]; // Construct the elements of the rotation matrix\n\n  b00 = x * x * t + c;\n  b01 = y * x * t + z * s;\n  b02 = z * x * t - y * s;\n  b10 = x * y * t - z * s;\n  b11 = y * y * t + c;\n  b12 = z * y * t + x * s;\n  b20 = x * z * t + y * s;\n  b21 = y * z * t - x * s;\n  b22 = z * z * t + c; // Perform rotation-specific matrix multiplication\n\n  out[0] = a00 * b00 + a10 * b01 + a20 * b02;\n  out[1] = a01 * b00 + a11 * b01 + a21 * b02;\n  out[2] = a02 * b00 + a12 * b01 + a22 * b02;\n  out[3] = a03 * b00 + a13 * b01 + a23 * b02;\n  out[4] = a00 * b10 + a10 * b11 + a20 * b12;\n  out[5] = a01 * b10 + a11 * b11 + a21 * b12;\n  out[6] = a02 * b10 + a12 * b11 + a22 * b12;\n  out[7] = a03 * b10 + a13 * b11 + a23 * b12;\n  out[8] = a00 * b20 + a10 * b21 + a20 * b22;\n  out[9] = a01 * b20 + a11 * b21 + a21 * b22;\n  out[10] = a02 * b20 + a12 * b21 + a22 * b22;\n  out[11] = a03 * b20 + a13 * b21 + a23 * b22;\n\n  if (a !== out) {\n    // If the source and destination differ, copy the unchanged last row\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n  }\n\n  return out;\n}\n/**\n * Rotates a matrix by the given angle around the X axis\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\n\nexport function rotateX(out, a, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad);\n  var a10 = a[4];\n  var a11 = a[5];\n  var a12 = a[6];\n  var a13 = a[7];\n  var a20 = a[8];\n  var a21 = a[9];\n  var a22 = a[10];\n  var a23 = a[11];\n\n  if (a !== out) {\n    // If the source and destination differ, copy the unchanged rows\n    out[0] = a[0];\n    out[1] = a[1];\n    out[2] = a[2];\n    out[3] = a[3];\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n  } // Perform axis-specific matrix multiplication\n\n\n  out[4] = a10 * c + a20 * s;\n  out[5] = a11 * c + a21 * s;\n  out[6] = a12 * c + a22 * s;\n  out[7] = a13 * c + a23 * s;\n  out[8] = a20 * c - a10 * s;\n  out[9] = a21 * c - a11 * s;\n  out[10] = a22 * c - a12 * s;\n  out[11] = a23 * c - a13 * s;\n  return out;\n}\n/**\n * Rotates a matrix by the given angle around the Y axis\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\n\nexport function rotateY(out, a, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad);\n  var a00 = a[0];\n  var a01 = a[1];\n  var a02 = a[2];\n  var a03 = a[3];\n  var a20 = a[8];\n  var a21 = a[9];\n  var a22 = a[10];\n  var a23 = a[11];\n\n  if (a !== out) {\n    // If the source and destination differ, copy the unchanged rows\n    out[4] = a[4];\n    out[5] = a[5];\n    out[6] = a[6];\n    out[7] = a[7];\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n  } // Perform axis-specific matrix multiplication\n\n\n  out[0] = a00 * c - a20 * s;\n  out[1] = a01 * c - a21 * s;\n  out[2] = a02 * c - a22 * s;\n  out[3] = a03 * c - a23 * s;\n  out[8] = a00 * s + a20 * c;\n  out[9] = a01 * s + a21 * c;\n  out[10] = a02 * s + a22 * c;\n  out[11] = a03 * s + a23 * c;\n  return out;\n}\n/**\n * Rotates a matrix by the given angle around the Z axis\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\n\nexport function rotateZ(out, a, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad);\n  var a00 = a[0];\n  var a01 = a[1];\n  var a02 = a[2];\n  var a03 = a[3];\n  var a10 = a[4];\n  var a11 = a[5];\n  var a12 = a[6];\n  var a13 = a[7];\n\n  if (a !== out) {\n    // If the source and destination differ, copy the unchanged last row\n    out[8] = a[8];\n    out[9] = a[9];\n    out[10] = a[10];\n    out[11] = a[11];\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n  } // Perform axis-specific matrix multiplication\n\n\n  out[0] = a00 * c + a10 * s;\n  out[1] = a01 * c + a11 * s;\n  out[2] = a02 * c + a12 * s;\n  out[3] = a03 * c + a13 * s;\n  out[4] = a10 * c - a00 * s;\n  out[5] = a11 * c - a01 * s;\n  out[6] = a12 * c - a02 * s;\n  out[7] = a13 * c - a03 * s;\n  return out;\n}\n/**\n * Creates a matrix from a vector translation\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.translate(dest, dest, vec);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {ReadonlyVec3} v Translation vector\n * @returns {mat4} out\n */\n\nexport function fromTranslation(out, v) {\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = 1;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = 1;\n  out[11] = 0;\n  out[12] = v[0];\n  out[13] = v[1];\n  out[14] = v[2];\n  out[15] = 1;\n  return out;\n}\n/**\n * Creates a matrix from a vector scaling\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.scale(dest, dest, vec);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {ReadonlyVec3} v Scaling vector\n * @returns {mat4} out\n */\n\nexport function fromScaling(out, v) {\n  out[0] = v[0];\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = v[1];\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = v[2];\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\n * Creates a matrix from a given angle around a given axis\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.rotate(dest, dest, rad, axis);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {Number} rad the angle to rotate the matrix by\n * @param {ReadonlyVec3} axis the axis to rotate around\n * @returns {mat4} out\n */\n\nexport function fromRotation(out, rad, axis) {\n  var x = axis[0],\n      y = axis[1],\n      z = axis[2];\n  var len = Math.hypot(x, y, z);\n  var s, c, t;\n\n  if (len < glMatrix.EPSILON) {\n    return null;\n  }\n\n  len = 1 / len;\n  x *= len;\n  y *= len;\n  z *= len;\n  s = Math.sin(rad);\n  c = Math.cos(rad);\n  t = 1 - c; // Perform rotation-specific matrix multiplication\n\n  out[0] = x * x * t + c;\n  out[1] = y * x * t + z * s;\n  out[2] = z * x * t - y * s;\n  out[3] = 0;\n  out[4] = x * y * t - z * s;\n  out[5] = y * y * t + c;\n  out[6] = z * y * t + x * s;\n  out[7] = 0;\n  out[8] = x * z * t + y * s;\n  out[9] = y * z * t - x * s;\n  out[10] = z * z * t + c;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\n * Creates a matrix from the given angle around the X axis\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.rotateX(dest, dest, rad);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\n\nexport function fromXRotation(out, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad); // Perform axis-specific matrix multiplication\n\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = c;\n  out[6] = s;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = -s;\n  out[10] = c;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\n * Creates a matrix from the given angle around the Y axis\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.rotateY(dest, dest, rad);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\n\nexport function fromYRotation(out, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad); // Perform axis-specific matrix multiplication\n\n  out[0] = c;\n  out[1] = 0;\n  out[2] = -s;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = 1;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = s;\n  out[9] = 0;\n  out[10] = c;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\n * Creates a matrix from the given angle around the Z axis\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.rotateZ(dest, dest, rad);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\n\nexport function fromZRotation(out, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad); // Perform axis-specific matrix multiplication\n\n  out[0] = c;\n  out[1] = s;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = -s;\n  out[5] = c;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = 1;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\n * Creates a matrix from a quaternion rotation and vector translation\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.translate(dest, vec);\n *     let quatMat = mat4.create();\n *     quat4.toMat4(quat, quatMat);\n *     mat4.multiply(dest, quatMat);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {quat4} q Rotation quaternion\n * @param {ReadonlyVec3} v Translation vector\n * @returns {mat4} out\n */\n\nexport function fromRotationTranslation(out, q, v) {\n  // Quaternion math\n  var x = q[0],\n      y = q[1],\n      z = q[2],\n      w = q[3];\n  var x2 = x + x;\n  var y2 = y + y;\n  var z2 = z + z;\n  var xx = x * x2;\n  var xy = x * y2;\n  var xz = x * z2;\n  var yy = y * y2;\n  var yz = y * z2;\n  var zz = z * z2;\n  var wx = w * x2;\n  var wy = w * y2;\n  var wz = w * z2;\n  out[0] = 1 - (yy + zz);\n  out[1] = xy + wz;\n  out[2] = xz - wy;\n  out[3] = 0;\n  out[4] = xy - wz;\n  out[5] = 1 - (xx + zz);\n  out[6] = yz + wx;\n  out[7] = 0;\n  out[8] = xz + wy;\n  out[9] = yz - wx;\n  out[10] = 1 - (xx + yy);\n  out[11] = 0;\n  out[12] = v[0];\n  out[13] = v[1];\n  out[14] = v[2];\n  out[15] = 1;\n  return out;\n}\n/**\n * Creates a new mat4 from a dual quat.\n *\n * @param {mat4} out Matrix\n * @param {ReadonlyQuat2} a Dual Quaternion\n * @returns {mat4} mat4 receiving operation result\n */\n\nexport function fromQuat2(out, a) {\n  var translation = new glMatrix.ARRAY_TYPE(3);\n  var bx = -a[0],\n      by = -a[1],\n      bz = -a[2],\n      bw = a[3],\n      ax = a[4],\n      ay = a[5],\n      az = a[6],\n      aw = a[7];\n  var magnitude = bx * bx + by * by + bz * bz + bw * bw; //Only scale if it makes sense\n\n  if (magnitude > 0) {\n    translation[0] = (ax * bw + aw * bx + ay * bz - az * by) * 2 / magnitude;\n    translation[1] = (ay * bw + aw * by + az * bx - ax * bz) * 2 / magnitude;\n    translation[2] = (az * bw + aw * bz + ax * by - ay * bx) * 2 / magnitude;\n  } else {\n    translation[0] = (ax * bw + aw * bx + ay * bz - az * by) * 2;\n    translation[1] = (ay * bw + aw * by + az * bx - ax * bz) * 2;\n    translation[2] = (az * bw + aw * bz + ax * by - ay * bx) * 2;\n  }\n\n  fromRotationTranslation(out, a, translation);\n  return out;\n}\n/**\n * Returns the translation vector component of a transformation\n *  matrix. If a matrix is built with fromRotationTranslation,\n *  the returned vector will be the same as the translation vector\n *  originally supplied.\n * @param  {vec3} out Vector to receive translation component\n * @param  {ReadonlyMat4} mat Matrix to be decomposed (input)\n * @return {vec3} out\n */\n\nexport function getTranslation(out, mat) {\n  out[0] = mat[12];\n  out[1] = mat[13];\n  out[2] = mat[14];\n  return out;\n}\n/**\n * Returns the scaling factor component of a transformation\n *  matrix. If a matrix is built with fromRotationTranslationScale\n *  with a normalized Quaternion paramter, the returned vector will be\n *  the same as the scaling vector\n *  originally supplied.\n * @param  {vec3} out Vector to receive scaling factor component\n * @param  {ReadonlyMat4} mat Matrix to be decomposed (input)\n * @return {vec3} out\n */\n\nexport function getScaling(out, mat) {\n  var m11 = mat[0];\n  var m12 = mat[1];\n  var m13 = mat[2];\n  var m21 = mat[4];\n  var m22 = mat[5];\n  var m23 = mat[6];\n  var m31 = mat[8];\n  var m32 = mat[9];\n  var m33 = mat[10];\n  out[0] = Math.hypot(m11, m12, m13);\n  out[1] = Math.hypot(m21, m22, m23);\n  out[2] = Math.hypot(m31, m32, m33);\n  return out;\n}\n/**\n * Returns a quaternion representing the rotational component\n *  of a transformation matrix. If a matrix is built with\n *  fromRotationTranslation, the returned quaternion will be the\n *  same as the quaternion originally supplied.\n * @param {quat} out Quaternion to receive the rotation component\n * @param {ReadonlyMat4} mat Matrix to be decomposed (input)\n * @return {quat} out\n */\n\nexport function getRotation(out, mat) {\n  var scaling = new glMatrix.ARRAY_TYPE(3);\n  getScaling(scaling, mat);\n  var is1 = 1 / scaling[0];\n  var is2 = 1 / scaling[1];\n  var is3 = 1 / scaling[2];\n  var sm11 = mat[0] * is1;\n  var sm12 = mat[1] * is2;\n  var sm13 = mat[2] * is3;\n  var sm21 = mat[4] * is1;\n  var sm22 = mat[5] * is2;\n  var sm23 = mat[6] * is3;\n  var sm31 = mat[8] * is1;\n  var sm32 = mat[9] * is2;\n  var sm33 = mat[10] * is3;\n  var trace = sm11 + sm22 + sm33;\n  var S = 0;\n\n  if (trace > 0) {\n    S = Math.sqrt(trace + 1.0) * 2;\n    out[3] = 0.25 * S;\n    out[0] = (sm23 - sm32) / S;\n    out[1] = (sm31 - sm13) / S;\n    out[2] = (sm12 - sm21) / S;\n  } else if (sm11 > sm22 && sm11 > sm33) {\n    S = Math.sqrt(1.0 + sm11 - sm22 - sm33) * 2;\n    out[3] = (sm23 - sm32) / S;\n    out[0] = 0.25 * S;\n    out[1] = (sm12 + sm21) / S;\n    out[2] = (sm31 + sm13) / S;\n  } else if (sm22 > sm33) {\n    S = Math.sqrt(1.0 + sm22 - sm11 - sm33) * 2;\n    out[3] = (sm31 - sm13) / S;\n    out[0] = (sm12 + sm21) / S;\n    out[1] = 0.25 * S;\n    out[2] = (sm23 + sm32) / S;\n  } else {\n    S = Math.sqrt(1.0 + sm33 - sm11 - sm22) * 2;\n    out[3] = (sm12 - sm21) / S;\n    out[0] = (sm31 + sm13) / S;\n    out[1] = (sm23 + sm32) / S;\n    out[2] = 0.25 * S;\n  }\n\n  return out;\n}\n/**\n * Creates a matrix from a quaternion rotation, vector translation and vector scale\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.translate(dest, vec);\n *     let quatMat = mat4.create();\n *     quat4.toMat4(quat, quatMat);\n *     mat4.multiply(dest, quatMat);\n *     mat4.scale(dest, scale)\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {quat4} q Rotation quaternion\n * @param {ReadonlyVec3} v Translation vector\n * @param {ReadonlyVec3} s Scaling vector\n * @returns {mat4} out\n */\n\nexport function fromRotationTranslationScale(out, q, v, s) {\n  // Quaternion math\n  var x = q[0],\n      y = q[1],\n      z = q[2],\n      w = q[3];\n  var x2 = x + x;\n  var y2 = y + y;\n  var z2 = z + z;\n  var xx = x * x2;\n  var xy = x * y2;\n  var xz = x * z2;\n  var yy = y * y2;\n  var yz = y * z2;\n  var zz = z * z2;\n  var wx = w * x2;\n  var wy = w * y2;\n  var wz = w * z2;\n  var sx = s[0];\n  var sy = s[1];\n  var sz = s[2];\n  out[0] = (1 - (yy + zz)) * sx;\n  out[1] = (xy + wz) * sx;\n  out[2] = (xz - wy) * sx;\n  out[3] = 0;\n  out[4] = (xy - wz) * sy;\n  out[5] = (1 - (xx + zz)) * sy;\n  out[6] = (yz + wx) * sy;\n  out[7] = 0;\n  out[8] = (xz + wy) * sz;\n  out[9] = (yz - wx) * sz;\n  out[10] = (1 - (xx + yy)) * sz;\n  out[11] = 0;\n  out[12] = v[0];\n  out[13] = v[1];\n  out[14] = v[2];\n  out[15] = 1;\n  return out;\n}\n/**\n * Creates a matrix from a quaternion rotation, vector translation and vector scale, rotating and scaling around the given origin\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.translate(dest, vec);\n *     mat4.translate(dest, origin);\n *     let quatMat = mat4.create();\n *     quat4.toMat4(quat, quatMat);\n *     mat4.multiply(dest, quatMat);\n *     mat4.scale(dest, scale)\n *     mat4.translate(dest, negativeOrigin);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {quat4} q Rotation quaternion\n * @param {ReadonlyVec3} v Translation vector\n * @param {ReadonlyVec3} s Scaling vector\n * @param {ReadonlyVec3} o The origin vector around which to scale and rotate\n * @returns {mat4} out\n */\n\nexport function fromRotationTranslationScaleOrigin(out, q, v, s, o) {\n  // Quaternion math\n  var x = q[0],\n      y = q[1],\n      z = q[2],\n      w = q[3];\n  var x2 = x + x;\n  var y2 = y + y;\n  var z2 = z + z;\n  var xx = x * x2;\n  var xy = x * y2;\n  var xz = x * z2;\n  var yy = y * y2;\n  var yz = y * z2;\n  var zz = z * z2;\n  var wx = w * x2;\n  var wy = w * y2;\n  var wz = w * z2;\n  var sx = s[0];\n  var sy = s[1];\n  var sz = s[2];\n  var ox = o[0];\n  var oy = o[1];\n  var oz = o[2];\n  var out0 = (1 - (yy + zz)) * sx;\n  var out1 = (xy + wz) * sx;\n  var out2 = (xz - wy) * sx;\n  var out4 = (xy - wz) * sy;\n  var out5 = (1 - (xx + zz)) * sy;\n  var out6 = (yz + wx) * sy;\n  var out8 = (xz + wy) * sz;\n  var out9 = (yz - wx) * sz;\n  var out10 = (1 - (xx + yy)) * sz;\n  out[0] = out0;\n  out[1] = out1;\n  out[2] = out2;\n  out[3] = 0;\n  out[4] = out4;\n  out[5] = out5;\n  out[6] = out6;\n  out[7] = 0;\n  out[8] = out8;\n  out[9] = out9;\n  out[10] = out10;\n  out[11] = 0;\n  out[12] = v[0] + ox - (out0 * ox + out4 * oy + out8 * oz);\n  out[13] = v[1] + oy - (out1 * ox + out5 * oy + out9 * oz);\n  out[14] = v[2] + oz - (out2 * ox + out6 * oy + out10 * oz);\n  out[15] = 1;\n  return out;\n}\n/**\n * Calculates a 4x4 matrix from the given quaternion\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {ReadonlyQuat} q Quaternion to create matrix from\n *\n * @returns {mat4} out\n */\n\nexport function fromQuat(out, q) {\n  var x = q[0],\n      y = q[1],\n      z = q[2],\n      w = q[3];\n  var x2 = x + x;\n  var y2 = y + y;\n  var z2 = z + z;\n  var xx = x * x2;\n  var yx = y * x2;\n  var yy = y * y2;\n  var zx = z * x2;\n  var zy = z * y2;\n  var zz = z * z2;\n  var wx = w * x2;\n  var wy = w * y2;\n  var wz = w * z2;\n  out[0] = 1 - yy - zz;\n  out[1] = yx + wz;\n  out[2] = zx - wy;\n  out[3] = 0;\n  out[4] = yx - wz;\n  out[5] = 1 - xx - zz;\n  out[6] = zy + wx;\n  out[7] = 0;\n  out[8] = zx + wy;\n  out[9] = zy - wx;\n  out[10] = 1 - xx - yy;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\n * Generates a frustum matrix with the given bounds\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {Number} left Left bound of the frustum\n * @param {Number} right Right bound of the frustum\n * @param {Number} bottom Bottom bound of the frustum\n * @param {Number} top Top bound of the frustum\n * @param {Number} near Near bound of the frustum\n * @param {Number} far Far bound of the frustum\n * @returns {mat4} out\n */\n\nexport function frustum(out, left, right, bottom, top, near, far) {\n  var rl = 1 / (right - left);\n  var tb = 1 / (top - bottom);\n  var nf = 1 / (near - far);\n  out[0] = near * 2 * rl;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = near * 2 * tb;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = (right + left) * rl;\n  out[9] = (top + bottom) * tb;\n  out[10] = (far + near) * nf;\n  out[11] = -1;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = far * near * 2 * nf;\n  out[15] = 0;\n  return out;\n}\n/**\n * Generates a perspective projection matrix with the given bounds.\n * The near/far clip planes correspond to a normalized device coordinate Z range of [-1, 1],\n * which matches WebGL/OpenGL's clip volume.\n * Passing null/undefined/no value for far will generate infinite projection matrix.\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {number} fovy Vertical field of view in radians\n * @param {number} aspect Aspect ratio. typically viewport width/height\n * @param {number} near Near bound of the frustum\n * @param {number} far Far bound of the frustum, can be null or Infinity\n * @returns {mat4} out\n */\n\nexport function perspectiveNO(out, fovy, aspect, near, far) {\n  var f = 1.0 / Math.tan(fovy / 2),\n      nf;\n  out[0] = f / aspect;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = f;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[11] = -1;\n  out[12] = 0;\n  out[13] = 0;\n  out[15] = 0;\n\n  if (far != null && far !== Infinity) {\n    nf = 1 / (near - far);\n    out[10] = (far + near) * nf;\n    out[14] = 2 * far * near * nf;\n  } else {\n    out[10] = -1;\n    out[14] = -2 * near;\n  }\n\n  return out;\n}\n/**\n * Alias for {@link mat4.perspectiveNO}\n * @function\n */\n\nexport var perspective = perspectiveNO;\n/**\n * Generates a perspective projection matrix suitable for WebGPU with the given bounds.\n * The near/far clip planes correspond to a normalized device coordinate Z range of [0, 1],\n * which matches WebGPU/Vulkan/DirectX/Metal's clip volume.\n * Passing null/undefined/no value for far will generate infinite projection matrix.\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {number} fovy Vertical field of view in radians\n * @param {number} aspect Aspect ratio. typically viewport width/height\n * @param {number} near Near bound of the frustum\n * @param {number} far Far bound of the frustum, can be null or Infinity\n * @returns {mat4} out\n */\n\nexport function perspectiveZO(out, fovy, aspect, near, far) {\n  var f = 1.0 / Math.tan(fovy / 2),\n      nf;\n  out[0] = f / aspect;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = f;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[11] = -1;\n  out[12] = 0;\n  out[13] = 0;\n  out[15] = 0;\n\n  if (far != null && far !== Infinity) {\n    nf = 1 / (near - far);\n    out[10] = far * nf;\n    out[14] = far * near * nf;\n  } else {\n    out[10] = -1;\n    out[14] = -near;\n  }\n\n  return out;\n}\n/**\n * Generates a perspective projection matrix with the given field of view.\n * This is primarily useful for generating projection matrices to be used\n * with the still experiemental WebVR API.\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {Object} fov Object containing the following values: upDegrees, downDegrees, leftDegrees, rightDegrees\n * @param {number} near Near bound of the frustum\n * @param {number} far Far bound of the frustum\n * @returns {mat4} out\n */\n\nexport function perspectiveFromFieldOfView(out, fov, near, far) {\n  var upTan = Math.tan(fov.upDegrees * Math.PI / 180.0);\n  var downTan = Math.tan(fov.downDegrees * Math.PI / 180.0);\n  var leftTan = Math.tan(fov.leftDegrees * Math.PI / 180.0);\n  var rightTan = Math.tan(fov.rightDegrees * Math.PI / 180.0);\n  var xScale = 2.0 / (leftTan + rightTan);\n  var yScale = 2.0 / (upTan + downTan);\n  out[0] = xScale;\n  out[1] = 0.0;\n  out[2] = 0.0;\n  out[3] = 0.0;\n  out[4] = 0.0;\n  out[5] = yScale;\n  out[6] = 0.0;\n  out[7] = 0.0;\n  out[8] = -((leftTan - rightTan) * xScale * 0.5);\n  out[9] = (upTan - downTan) * yScale * 0.5;\n  out[10] = far / (near - far);\n  out[11] = -1.0;\n  out[12] = 0.0;\n  out[13] = 0.0;\n  out[14] = far * near / (near - far);\n  out[15] = 0.0;\n  return out;\n}\n/**\n * Generates a orthogonal projection matrix with the given bounds.\n * The near/far clip planes correspond to a normalized device coordinate Z range of [-1, 1],\n * which matches WebGL/OpenGL's clip volume.\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {number} left Left bound of the frustum\n * @param {number} right Right bound of the frustum\n * @param {number} bottom Bottom bound of the frustum\n * @param {number} top Top bound of the frustum\n * @param {number} near Near bound of the frustum\n * @param {number} far Far bound of the frustum\n * @returns {mat4} out\n */\n\nexport function orthoNO(out, left, right, bottom, top, near, far) {\n  var lr = 1 / (left - right);\n  var bt = 1 / (bottom - top);\n  var nf = 1 / (near - far);\n  out[0] = -2 * lr;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = -2 * bt;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = 2 * nf;\n  out[11] = 0;\n  out[12] = (left + right) * lr;\n  out[13] = (top + bottom) * bt;\n  out[14] = (far + near) * nf;\n  out[15] = 1;\n  return out;\n}\n/**\n * Alias for {@link mat4.orthoNO}\n * @function\n */\n\nexport var ortho = orthoNO;\n/**\n * Generates a orthogonal projection matrix with the given bounds.\n * The near/far clip planes correspond to a normalized device coordinate Z range of [0, 1],\n * which matches WebGPU/Vulkan/DirectX/Metal's clip volume.\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {number} left Left bound of the frustum\n * @param {number} right Right bound of the frustum\n * @param {number} bottom Bottom bound of the frustum\n * @param {number} top Top bound of the frustum\n * @param {number} near Near bound of the frustum\n * @param {number} far Far bound of the frustum\n * @returns {mat4} out\n */\n\nexport function orthoZO(out, left, right, bottom, top, near, far) {\n  var lr = 1 / (left - right);\n  var bt = 1 / (bottom - top);\n  var nf = 1 / (near - far);\n  out[0] = -2 * lr;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = -2 * bt;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = nf;\n  out[11] = 0;\n  out[12] = (left + right) * lr;\n  out[13] = (top + bottom) * bt;\n  out[14] = near * nf;\n  out[15] = 1;\n  return out;\n}\n/**\n * Generates a look-at matrix with the given eye position, focal point, and up axis.\n * If you want a matrix that actually makes an object look at another object, you should use targetTo instead.\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {ReadonlyVec3} eye Position of the viewer\n * @param {ReadonlyVec3} center Point the viewer is looking at\n * @param {ReadonlyVec3} up vec3 pointing up\n * @returns {mat4} out\n */\n\nexport function lookAt(out, eye, center, up) {\n  var x0, x1, x2, y0, y1, y2, z0, z1, z2, len;\n  var eyex = eye[0];\n  var eyey = eye[1];\n  var eyez = eye[2];\n  var upx = up[0];\n  var upy = up[1];\n  var upz = up[2];\n  var centerx = center[0];\n  var centery = center[1];\n  var centerz = center[2];\n\n  if (Math.abs(eyex - centerx) < glMatrix.EPSILON && Math.abs(eyey - centery) < glMatrix.EPSILON && Math.abs(eyez - centerz) < glMatrix.EPSILON) {\n    return identity(out);\n  }\n\n  z0 = eyex - centerx;\n  z1 = eyey - centery;\n  z2 = eyez - centerz;\n  len = 1 / Math.hypot(z0, z1, z2);\n  z0 *= len;\n  z1 *= len;\n  z2 *= len;\n  x0 = upy * z2 - upz * z1;\n  x1 = upz * z0 - upx * z2;\n  x2 = upx * z1 - upy * z0;\n  len = Math.hypot(x0, x1, x2);\n\n  if (!len) {\n    x0 = 0;\n    x1 = 0;\n    x2 = 0;\n  } else {\n    len = 1 / len;\n    x0 *= len;\n    x1 *= len;\n    x2 *= len;\n  }\n\n  y0 = z1 * x2 - z2 * x1;\n  y1 = z2 * x0 - z0 * x2;\n  y2 = z0 * x1 - z1 * x0;\n  len = Math.hypot(y0, y1, y2);\n\n  if (!len) {\n    y0 = 0;\n    y1 = 0;\n    y2 = 0;\n  } else {\n    len = 1 / len;\n    y0 *= len;\n    y1 *= len;\n    y2 *= len;\n  }\n\n  out[0] = x0;\n  out[1] = y0;\n  out[2] = z0;\n  out[3] = 0;\n  out[4] = x1;\n  out[5] = y1;\n  out[6] = z1;\n  out[7] = 0;\n  out[8] = x2;\n  out[9] = y2;\n  out[10] = z2;\n  out[11] = 0;\n  out[12] = -(x0 * eyex + x1 * eyey + x2 * eyez);\n  out[13] = -(y0 * eyex + y1 * eyey + y2 * eyez);\n  out[14] = -(z0 * eyex + z1 * eyey + z2 * eyez);\n  out[15] = 1;\n  return out;\n}\n/**\n * Generates a matrix that makes something look at something else.\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {ReadonlyVec3} eye Position of the viewer\n * @param {ReadonlyVec3} center Point the viewer is looking at\n * @param {ReadonlyVec3} up vec3 pointing up\n * @returns {mat4} out\n */\n\nexport function targetTo(out, eye, target, up) {\n  var eyex = eye[0],\n      eyey = eye[1],\n      eyez = eye[2],\n      upx = up[0],\n      upy = up[1],\n      upz = up[2];\n  var z0 = eyex - target[0],\n      z1 = eyey - target[1],\n      z2 = eyez - target[2];\n  var len = z0 * z0 + z1 * z1 + z2 * z2;\n\n  if (len > 0) {\n    len = 1 / Math.sqrt(len);\n    z0 *= len;\n    z1 *= len;\n    z2 *= len;\n  }\n\n  var x0 = upy * z2 - upz * z1,\n      x1 = upz * z0 - upx * z2,\n      x2 = upx * z1 - upy * z0;\n  len = x0 * x0 + x1 * x1 + x2 * x2;\n\n  if (len > 0) {\n    len = 1 / Math.sqrt(len);\n    x0 *= len;\n    x1 *= len;\n    x2 *= len;\n  }\n\n  out[0] = x0;\n  out[1] = x1;\n  out[2] = x2;\n  out[3] = 0;\n  out[4] = z1 * x2 - z2 * x1;\n  out[5] = z2 * x0 - z0 * x2;\n  out[6] = z0 * x1 - z1 * x0;\n  out[7] = 0;\n  out[8] = z0;\n  out[9] = z1;\n  out[10] = z2;\n  out[11] = 0;\n  out[12] = eyex;\n  out[13] = eyey;\n  out[14] = eyez;\n  out[15] = 1;\n  return out;\n}\n/**\n * Returns a string representation of a mat4\n *\n * @param {ReadonlyMat4} a matrix to represent as a string\n * @returns {String} string representation of the matrix\n */\n\nexport function str(a) {\n  return \"mat4(\" + a[0] + \", \" + a[1] + \", \" + a[2] + \", \" + a[3] + \", \" + a[4] + \", \" + a[5] + \", \" + a[6] + \", \" + a[7] + \", \" + a[8] + \", \" + a[9] + \", \" + a[10] + \", \" + a[11] + \", \" + a[12] + \", \" + a[13] + \", \" + a[14] + \", \" + a[15] + \")\";\n}\n/**\n * Returns Frobenius norm of a mat4\n *\n * @param {ReadonlyMat4} a the matrix to calculate Frobenius norm of\n * @returns {Number} Frobenius norm\n */\n\nexport function frob(a) {\n  return Math.hypot(a[0], a[1], a[2], a[3], a[4], a[5], a[6], a[7], a[8], a[9], a[10], a[11], a[12], a[13], a[14], a[15]);\n}\n/**\n * Adds two mat4's\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the first operand\n * @param {ReadonlyMat4} b the second operand\n * @returns {mat4} out\n */\n\nexport function add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  out[2] = a[2] + b[2];\n  out[3] = a[3] + b[3];\n  out[4] = a[4] + b[4];\n  out[5] = a[5] + b[5];\n  out[6] = a[6] + b[6];\n  out[7] = a[7] + b[7];\n  out[8] = a[8] + b[8];\n  out[9] = a[9] + b[9];\n  out[10] = a[10] + b[10];\n  out[11] = a[11] + b[11];\n  out[12] = a[12] + b[12];\n  out[13] = a[13] + b[13];\n  out[14] = a[14] + b[14];\n  out[15] = a[15] + b[15];\n  return out;\n}\n/**\n * Subtracts matrix b from matrix a\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the first operand\n * @param {ReadonlyMat4} b the second operand\n * @returns {mat4} out\n */\n\nexport function subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  out[2] = a[2] - b[2];\n  out[3] = a[3] - b[3];\n  out[4] = a[4] - b[4];\n  out[5] = a[5] - b[5];\n  out[6] = a[6] - b[6];\n  out[7] = a[7] - b[7];\n  out[8] = a[8] - b[8];\n  out[9] = a[9] - b[9];\n  out[10] = a[10] - b[10];\n  out[11] = a[11] - b[11];\n  out[12] = a[12] - b[12];\n  out[13] = a[13] - b[13];\n  out[14] = a[14] - b[14];\n  out[15] = a[15] - b[15];\n  return out;\n}\n/**\n * Multiply each element of the matrix by a scalar.\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the matrix to scale\n * @param {Number} b amount to scale the matrix's elements by\n * @returns {mat4} out\n */\n\nexport function multiplyScalar(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  out[2] = a[2] * b;\n  out[3] = a[3] * b;\n  out[4] = a[4] * b;\n  out[5] = a[5] * b;\n  out[6] = a[6] * b;\n  out[7] = a[7] * b;\n  out[8] = a[8] * b;\n  out[9] = a[9] * b;\n  out[10] = a[10] * b;\n  out[11] = a[11] * b;\n  out[12] = a[12] * b;\n  out[13] = a[13] * b;\n  out[14] = a[14] * b;\n  out[15] = a[15] * b;\n  return out;\n}\n/**\n * Adds two mat4's after multiplying each element of the second operand by a scalar value.\n *\n * @param {mat4} out the receiving vector\n * @param {ReadonlyMat4} a the first operand\n * @param {ReadonlyMat4} b the second operand\n * @param {Number} scale the amount to scale b's elements by before adding\n * @returns {mat4} out\n */\n\nexport function multiplyScalarAndAdd(out, a, b, scale) {\n  out[0] = a[0] + b[0] * scale;\n  out[1] = a[1] + b[1] * scale;\n  out[2] = a[2] + b[2] * scale;\n  out[3] = a[3] + b[3] * scale;\n  out[4] = a[4] + b[4] * scale;\n  out[5] = a[5] + b[5] * scale;\n  out[6] = a[6] + b[6] * scale;\n  out[7] = a[7] + b[7] * scale;\n  out[8] = a[8] + b[8] * scale;\n  out[9] = a[9] + b[9] * scale;\n  out[10] = a[10] + b[10] * scale;\n  out[11] = a[11] + b[11] * scale;\n  out[12] = a[12] + b[12] * scale;\n  out[13] = a[13] + b[13] * scale;\n  out[14] = a[14] + b[14] * scale;\n  out[15] = a[15] + b[15] * scale;\n  return out;\n}\n/**\n * Returns whether or not the matrices have exactly the same elements in the same position (when compared with ===)\n *\n * @param {ReadonlyMat4} a The first matrix.\n * @param {ReadonlyMat4} b The second matrix.\n * @returns {Boolean} True if the matrices are equal, false otherwise.\n */\n\nexport function exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3] && a[4] === b[4] && a[5] === b[5] && a[6] === b[6] && a[7] === b[7] && a[8] === b[8] && a[9] === b[9] && a[10] === b[10] && a[11] === b[11] && a[12] === b[12] && a[13] === b[13] && a[14] === b[14] && a[15] === b[15];\n}\n/**\n * Returns whether or not the matrices have approximately the same elements in the same position.\n *\n * @param {ReadonlyMat4} a The first matrix.\n * @param {ReadonlyMat4} b The second matrix.\n * @returns {Boolean} True if the matrices are equal, false otherwise.\n */\n\nexport function equals(a, b) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3];\n  var a4 = a[4],\n      a5 = a[5],\n      a6 = a[6],\n      a7 = a[7];\n  var a8 = a[8],\n      a9 = a[9],\n      a10 = a[10],\n      a11 = a[11];\n  var a12 = a[12],\n      a13 = a[13],\n      a14 = a[14],\n      a15 = a[15];\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2],\n      b3 = b[3];\n  var b4 = b[4],\n      b5 = b[5],\n      b6 = b[6],\n      b7 = b[7];\n  var b8 = b[8],\n      b9 = b[9],\n      b10 = b[10],\n      b11 = b[11];\n  var b12 = b[12],\n      b13 = b[13],\n      b14 = b[14],\n      b15 = b[15];\n  return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2)) && Math.abs(a3 - b3) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a3), Math.abs(b3)) && Math.abs(a4 - b4) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a4), Math.abs(b4)) && Math.abs(a5 - b5) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a5), Math.abs(b5)) && Math.abs(a6 - b6) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a6), Math.abs(b6)) && Math.abs(a7 - b7) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a7), Math.abs(b7)) && Math.abs(a8 - b8) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a8), Math.abs(b8)) && Math.abs(a9 - b9) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a9), Math.abs(b9)) && Math.abs(a10 - b10) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a10), Math.abs(b10)) && Math.abs(a11 - b11) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a11), Math.abs(b11)) && Math.abs(a12 - b12) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a12), Math.abs(b12)) && Math.abs(a13 - b13) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a13), Math.abs(b13)) && Math.abs(a14 - b14) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a14), Math.abs(b14)) && Math.abs(a15 - b15) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a15), Math.abs(b15));\n}\n/**\n * Alias for {@link mat4.multiply}\n * @function\n */\n\nexport var mul = multiply;\n/**\n * Alias for {@link mat4.subtract}\n * @function\n */\n\nexport var sub = subtract;","import * as glMatrix from \"./common.js\";\nimport * as mat3 from \"./mat3.js\";\nimport * as vec3 from \"./vec3.js\";\nimport * as vec4 from \"./vec4.js\";\n/**\n * Quaternion\n * @module quat\n */\n\n/**\n * Creates a new identity quat\n *\n * @returns {quat} a new quaternion\n */\n\nexport function create() {\n  var out = new glMatrix.ARRAY_TYPE(4);\n\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\n    out[0] = 0;\n    out[1] = 0;\n    out[2] = 0;\n  }\n\n  out[3] = 1;\n  return out;\n}\n/**\n * Set a quat to the identity quaternion\n *\n * @param {quat} out the receiving quaternion\n * @returns {quat} out\n */\n\nexport function identity(out) {\n  out[0] = 0;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 1;\n  return out;\n}\n/**\n * Sets a quat from the given angle and rotation axis,\n * then returns it.\n *\n * @param {quat} out the receiving quaternion\n * @param {ReadonlyVec3} axis the axis around which to rotate\n * @param {Number} rad the angle in radians\n * @returns {quat} out\n **/\n\nexport function setAxisAngle(out, axis, rad) {\n  rad = rad * 0.5;\n  var s = Math.sin(rad);\n  out[0] = s * axis[0];\n  out[1] = s * axis[1];\n  out[2] = s * axis[2];\n  out[3] = Math.cos(rad);\n  return out;\n}\n/**\n * Gets the rotation axis and angle for a given\n *  quaternion. If a quaternion is created with\n *  setAxisAngle, this method will return the same\n *  values as providied in the original parameter list\n *  OR functionally equivalent values.\n * Example: The quaternion formed by axis [0, 0, 1] and\n *  angle -90 is the same as the quaternion formed by\n *  [0, 0, 1] and 270. This method favors the latter.\n * @param  {vec3} out_axis  Vector receiving the axis of rotation\n * @param  {ReadonlyQuat} q     Quaternion to be decomposed\n * @return {Number}     Angle, in radians, of the rotation\n */\n\nexport function getAxisAngle(out_axis, q) {\n  var rad = Math.acos(q[3]) * 2.0;\n  var s = Math.sin(rad / 2.0);\n\n  if (s > glMatrix.EPSILON) {\n    out_axis[0] = q[0] / s;\n    out_axis[1] = q[1] / s;\n    out_axis[2] = q[2] / s;\n  } else {\n    // If s is zero, return any axis (no rotation - axis does not matter)\n    out_axis[0] = 1;\n    out_axis[1] = 0;\n    out_axis[2] = 0;\n  }\n\n  return rad;\n}\n/**\n * Gets the angular distance between two unit quaternions\n *\n * @param  {ReadonlyQuat} a     Origin unit quaternion\n * @param  {ReadonlyQuat} b     Destination unit quaternion\n * @return {Number}     Angle, in radians, between the two quaternions\n */\n\nexport function getAngle(a, b) {\n  var dotproduct = dot(a, b);\n  return Math.acos(2 * dotproduct * dotproduct - 1);\n}\n/**\n * Multiplies two quat's\n *\n * @param {quat} out the receiving quaternion\n * @param {ReadonlyQuat} a the first operand\n * @param {ReadonlyQuat} b the second operand\n * @returns {quat} out\n */\n\nexport function multiply(out, a, b) {\n  var ax = a[0],\n      ay = a[1],\n      az = a[2],\n      aw = a[3];\n  var bx = b[0],\n      by = b[1],\n      bz = b[2],\n      bw = b[3];\n  out[0] = ax * bw + aw * bx + ay * bz - az * by;\n  out[1] = ay * bw + aw * by + az * bx - ax * bz;\n  out[2] = az * bw + aw * bz + ax * by - ay * bx;\n  out[3] = aw * bw - ax * bx - ay * by - az * bz;\n  return out;\n}\n/**\n * Rotates a quaternion by the given angle about the X axis\n *\n * @param {quat} out quat receiving operation result\n * @param {ReadonlyQuat} a quat to rotate\n * @param {number} rad angle (in radians) to rotate\n * @returns {quat} out\n */\n\nexport function rotateX(out, a, rad) {\n  rad *= 0.5;\n  var ax = a[0],\n      ay = a[1],\n      az = a[2],\n      aw = a[3];\n  var bx = Math.sin(rad),\n      bw = Math.cos(rad);\n  out[0] = ax * bw + aw * bx;\n  out[1] = ay * bw + az * bx;\n  out[2] = az * bw - ay * bx;\n  out[3] = aw * bw - ax * bx;\n  return out;\n}\n/**\n * Rotates a quaternion by the given angle about the Y axis\n *\n * @param {quat} out quat receiving operation result\n * @param {ReadonlyQuat} a quat to rotate\n * @param {number} rad angle (in radians) to rotate\n * @returns {quat} out\n */\n\nexport function rotateY(out, a, rad) {\n  rad *= 0.5;\n  var ax = a[0],\n      ay = a[1],\n      az = a[2],\n      aw = a[3];\n  var by = Math.sin(rad),\n      bw = Math.cos(rad);\n  out[0] = ax * bw - az * by;\n  out[1] = ay * bw + aw * by;\n  out[2] = az * bw + ax * by;\n  out[3] = aw * bw - ay * by;\n  return out;\n}\n/**\n * Rotates a quaternion by the given angle about the Z axis\n *\n * @param {quat} out quat receiving operation result\n * @param {ReadonlyQuat} a quat to rotate\n * @param {number} rad angle (in radians) to rotate\n * @returns {quat} out\n */\n\nexport function rotateZ(out, a, rad) {\n  rad *= 0.5;\n  var ax = a[0],\n      ay = a[1],\n      az = a[2],\n      aw = a[3];\n  var bz = Math.sin(rad),\n      bw = Math.cos(rad);\n  out[0] = ax * bw + ay * bz;\n  out[1] = ay * bw - ax * bz;\n  out[2] = az * bw + aw * bz;\n  out[3] = aw * bw - az * bz;\n  return out;\n}\n/**\n * Calculates the W component of a quat from the X, Y, and Z components.\n * Assumes that quaternion is 1 unit in length.\n * Any existing W component will be ignored.\n *\n * @param {quat} out the receiving quaternion\n * @param {ReadonlyQuat} a quat to calculate W component of\n * @returns {quat} out\n */\n\nexport function calculateW(out, a) {\n  var x = a[0],\n      y = a[1],\n      z = a[2];\n  out[0] = x;\n  out[1] = y;\n  out[2] = z;\n  out[3] = Math.sqrt(Math.abs(1.0 - x * x - y * y - z * z));\n  return out;\n}\n/**\n * Calculate the exponential of a unit quaternion.\n *\n * @param {quat} out the receiving quaternion\n * @param {ReadonlyQuat} a quat to calculate the exponential of\n * @returns {quat} out\n */\n\nexport function exp(out, a) {\n  var x = a[0],\n      y = a[1],\n      z = a[2],\n      w = a[3];\n  var r = Math.sqrt(x * x + y * y + z * z);\n  var et = Math.exp(w);\n  var s = r > 0 ? et * Math.sin(r) / r : 0;\n  out[0] = x * s;\n  out[1] = y * s;\n  out[2] = z * s;\n  out[3] = et * Math.cos(r);\n  return out;\n}\n/**\n * Calculate the natural logarithm of a unit quaternion.\n *\n * @param {quat} out the receiving quaternion\n * @param {ReadonlyQuat} a quat to calculate the exponential of\n * @returns {quat} out\n */\n\nexport function ln(out, a) {\n  var x = a[0],\n      y = a[1],\n      z = a[2],\n      w = a[3];\n  var r = Math.sqrt(x * x + y * y + z * z);\n  var t = r > 0 ? Math.atan2(r, w) / r : 0;\n  out[0] = x * t;\n  out[1] = y * t;\n  out[2] = z * t;\n  out[3] = 0.5 * Math.log(x * x + y * y + z * z + w * w);\n  return out;\n}\n/**\n * Calculate the scalar power of a unit quaternion.\n *\n * @param {quat} out the receiving quaternion\n * @param {ReadonlyQuat} a quat to calculate the exponential of\n * @param {Number} b amount to scale the quaternion by\n * @returns {quat} out\n */\n\nexport function pow(out, a, b) {\n  ln(out, a);\n  scale(out, out, b);\n  exp(out, out);\n  return out;\n}\n/**\n * Performs a spherical linear interpolation between two quat\n *\n * @param {quat} out the receiving quaternion\n * @param {ReadonlyQuat} a the first operand\n * @param {ReadonlyQuat} b the second operand\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\n * @returns {quat} out\n */\n\nexport function slerp(out, a, b, t) {\n  // benchmarks:\n  //    http://jsperf.com/quaternion-slerp-implementations\n  var ax = a[0],\n      ay = a[1],\n      az = a[2],\n      aw = a[3];\n  var bx = b[0],\n      by = b[1],\n      bz = b[2],\n      bw = b[3];\n  var omega, cosom, sinom, scale0, scale1; // calc cosine\n\n  cosom = ax * bx + ay * by + az * bz + aw * bw; // adjust signs (if necessary)\n\n  if (cosom < 0.0) {\n    cosom = -cosom;\n    bx = -bx;\n    by = -by;\n    bz = -bz;\n    bw = -bw;\n  } // calculate coefficients\n\n\n  if (1.0 - cosom > glMatrix.EPSILON) {\n    // standard case (slerp)\n    omega = Math.acos(cosom);\n    sinom = Math.sin(omega);\n    scale0 = Math.sin((1.0 - t) * omega) / sinom;\n    scale1 = Math.sin(t * omega) / sinom;\n  } else {\n    // \"from\" and \"to\" quaternions are very close\n    //  ... so we can do a linear interpolation\n    scale0 = 1.0 - t;\n    scale1 = t;\n  } // calculate final values\n\n\n  out[0] = scale0 * ax + scale1 * bx;\n  out[1] = scale0 * ay + scale1 * by;\n  out[2] = scale0 * az + scale1 * bz;\n  out[3] = scale0 * aw + scale1 * bw;\n  return out;\n}\n/**\n * Generates a random unit quaternion\n *\n * @param {quat} out the receiving quaternion\n * @returns {quat} out\n */\n\nexport function random(out) {\n  // Implementation of http://planning.cs.uiuc.edu/node198.html\n  // TODO: Calling random 3 times is probably not the fastest solution\n  var u1 = glMatrix.RANDOM();\n  var u2 = glMatrix.RANDOM();\n  var u3 = glMatrix.RANDOM();\n  var sqrt1MinusU1 = Math.sqrt(1 - u1);\n  var sqrtU1 = Math.sqrt(u1);\n  out[0] = sqrt1MinusU1 * Math.sin(2.0 * Math.PI * u2);\n  out[1] = sqrt1MinusU1 * Math.cos(2.0 * Math.PI * u2);\n  out[2] = sqrtU1 * Math.sin(2.0 * Math.PI * u3);\n  out[3] = sqrtU1 * Math.cos(2.0 * Math.PI * u3);\n  return out;\n}\n/**\n * Calculates the inverse of a quat\n *\n * @param {quat} out the receiving quaternion\n * @param {ReadonlyQuat} a quat to calculate inverse of\n * @returns {quat} out\n */\n\nexport function invert(out, a) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3];\n  var dot = a0 * a0 + a1 * a1 + a2 * a2 + a3 * a3;\n  var invDot = dot ? 1.0 / dot : 0; // TODO: Would be faster to return [0,0,0,0] immediately if dot == 0\n\n  out[0] = -a0 * invDot;\n  out[1] = -a1 * invDot;\n  out[2] = -a2 * invDot;\n  out[3] = a3 * invDot;\n  return out;\n}\n/**\n * Calculates the conjugate of a quat\n * If the quaternion is normalized, this function is faster than quat.inverse and produces the same result.\n *\n * @param {quat} out the receiving quaternion\n * @param {ReadonlyQuat} a quat to calculate conjugate of\n * @returns {quat} out\n */\n\nexport function conjugate(out, a) {\n  out[0] = -a[0];\n  out[1] = -a[1];\n  out[2] = -a[2];\n  out[3] = a[3];\n  return out;\n}\n/**\n * Creates a quaternion from the given 3x3 rotation matrix.\n *\n * NOTE: The resultant quaternion is not normalized, so you should be sure\n * to renormalize the quaternion yourself where necessary.\n *\n * @param {quat} out the receiving quaternion\n * @param {ReadonlyMat3} m rotation matrix\n * @returns {quat} out\n * @function\n */\n\nexport function fromMat3(out, m) {\n  // Algorithm in Ken Shoemake's article in 1987 SIGGRAPH course notes\n  // article \"Quaternion Calculus and Fast Animation\".\n  var fTrace = m[0] + m[4] + m[8];\n  var fRoot;\n\n  if (fTrace > 0.0) {\n    // |w| > 1/2, may as well choose w > 1/2\n    fRoot = Math.sqrt(fTrace + 1.0); // 2w\n\n    out[3] = 0.5 * fRoot;\n    fRoot = 0.5 / fRoot; // 1/(4w)\n\n    out[0] = (m[5] - m[7]) * fRoot;\n    out[1] = (m[6] - m[2]) * fRoot;\n    out[2] = (m[1] - m[3]) * fRoot;\n  } else {\n    // |w| <= 1/2\n    var i = 0;\n    if (m[4] > m[0]) i = 1;\n    if (m[8] > m[i * 3 + i]) i = 2;\n    var j = (i + 1) % 3;\n    var k = (i + 2) % 3;\n    fRoot = Math.sqrt(m[i * 3 + i] - m[j * 3 + j] - m[k * 3 + k] + 1.0);\n    out[i] = 0.5 * fRoot;\n    fRoot = 0.5 / fRoot;\n    out[3] = (m[j * 3 + k] - m[k * 3 + j]) * fRoot;\n    out[j] = (m[j * 3 + i] + m[i * 3 + j]) * fRoot;\n    out[k] = (m[k * 3 + i] + m[i * 3 + k]) * fRoot;\n  }\n\n  return out;\n}\n/**\n * Creates a quaternion from the given euler angle x, y, z.\n *\n * @param {quat} out the receiving quaternion\n * @param {x} Angle to rotate around X axis in degrees.\n * @param {y} Angle to rotate around Y axis in degrees.\n * @param {z} Angle to rotate around Z axis in degrees.\n * @returns {quat} out\n * @function\n */\n\nexport function fromEuler(out, x, y, z) {\n  var halfToRad = 0.5 * Math.PI / 180.0;\n  x *= halfToRad;\n  y *= halfToRad;\n  z *= halfToRad;\n  var sx = Math.sin(x);\n  var cx = Math.cos(x);\n  var sy = Math.sin(y);\n  var cy = Math.cos(y);\n  var sz = Math.sin(z);\n  var cz = Math.cos(z);\n  out[0] = sx * cy * cz - cx * sy * sz;\n  out[1] = cx * sy * cz + sx * cy * sz;\n  out[2] = cx * cy * sz - sx * sy * cz;\n  out[3] = cx * cy * cz + sx * sy * sz;\n  return out;\n}\n/**\n * Returns a string representation of a quatenion\n *\n * @param {ReadonlyQuat} a vector to represent as a string\n * @returns {String} string representation of the vector\n */\n\nexport function str(a) {\n  return \"quat(\" + a[0] + \", \" + a[1] + \", \" + a[2] + \", \" + a[3] + \")\";\n}\n/**\n * Creates a new quat initialized with values from an existing quaternion\n *\n * @param {ReadonlyQuat} a quaternion to clone\n * @returns {quat} a new quaternion\n * @function\n */\n\nexport var clone = vec4.clone;\n/**\n * Creates a new quat initialized with the given values\n *\n * @param {Number} x X component\n * @param {Number} y Y component\n * @param {Number} z Z component\n * @param {Number} w W component\n * @returns {quat} a new quaternion\n * @function\n */\n\nexport var fromValues = vec4.fromValues;\n/**\n * Copy the values from one quat to another\n *\n * @param {quat} out the receiving quaternion\n * @param {ReadonlyQuat} a the source quaternion\n * @returns {quat} out\n * @function\n */\n\nexport var copy = vec4.copy;\n/**\n * Set the components of a quat to the given values\n *\n * @param {quat} out the receiving quaternion\n * @param {Number} x X component\n * @param {Number} y Y component\n * @param {Number} z Z component\n * @param {Number} w W component\n * @returns {quat} out\n * @function\n */\n\nexport var set = vec4.set;\n/**\n * Adds two quat's\n *\n * @param {quat} out the receiving quaternion\n * @param {ReadonlyQuat} a the first operand\n * @param {ReadonlyQuat} b the second operand\n * @returns {quat} out\n * @function\n */\n\nexport var add = vec4.add;\n/**\n * Alias for {@link quat.multiply}\n * @function\n */\n\nexport var mul = multiply;\n/**\n * Scales a quat by a scalar number\n *\n * @param {quat} out the receiving vector\n * @param {ReadonlyQuat} a the vector to scale\n * @param {Number} b amount to scale the vector by\n * @returns {quat} out\n * @function\n */\n\nexport var scale = vec4.scale;\n/**\n * Calculates the dot product of two quat's\n *\n * @param {ReadonlyQuat} a the first operand\n * @param {ReadonlyQuat} b the second operand\n * @returns {Number} dot product of a and b\n * @function\n */\n\nexport var dot = vec4.dot;\n/**\n * Performs a linear interpolation between two quat's\n *\n * @param {quat} out the receiving quaternion\n * @param {ReadonlyQuat} a the first operand\n * @param {ReadonlyQuat} b the second operand\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\n * @returns {quat} out\n * @function\n */\n\nexport var lerp = vec4.lerp;\n/**\n * Calculates the length of a quat\n *\n * @param {ReadonlyQuat} a vector to calculate length of\n * @returns {Number} length of a\n */\n\nexport var length = vec4.length;\n/**\n * Alias for {@link quat.length}\n * @function\n */\n\nexport var len = length;\n/**\n * Calculates the squared length of a quat\n *\n * @param {ReadonlyQuat} a vector to calculate squared length of\n * @returns {Number} squared length of a\n * @function\n */\n\nexport var squaredLength = vec4.squaredLength;\n/**\n * Alias for {@link quat.squaredLength}\n * @function\n */\n\nexport var sqrLen = squaredLength;\n/**\n * Normalize a quat\n *\n * @param {quat} out the receiving quaternion\n * @param {ReadonlyQuat} a quaternion to normalize\n * @returns {quat} out\n * @function\n */\n\nexport var normalize = vec4.normalize;\n/**\n * Returns whether or not the quaternions have exactly the same elements in the same position (when compared with ===)\n *\n * @param {ReadonlyQuat} a The first quaternion.\n * @param {ReadonlyQuat} b The second quaternion.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\n\nexport var exactEquals = vec4.exactEquals;\n/**\n * Returns whether or not the quaternions have approximately the same elements in the same position.\n *\n * @param {ReadonlyQuat} a The first vector.\n * @param {ReadonlyQuat} b The second vector.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\n\nexport var equals = vec4.equals;\n/**\n * Sets a quaternion to represent the shortest rotation from one\n * vector to another.\n *\n * Both vectors are assumed to be unit length.\n *\n * @param {quat} out the receiving quaternion.\n * @param {ReadonlyVec3} a the initial vector\n * @param {ReadonlyVec3} b the destination vector\n * @returns {quat} out\n */\n\nexport var rotationTo = function () {\n  var tmpvec3 = vec3.create();\n  var xUnitVec3 = vec3.fromValues(1, 0, 0);\n  var yUnitVec3 = vec3.fromValues(0, 1, 0);\n  return function (out, a, b) {\n    var dot = vec3.dot(a, b);\n\n    if (dot < -0.999999) {\n      vec3.cross(tmpvec3, xUnitVec3, a);\n      if (vec3.len(tmpvec3) < 0.000001) vec3.cross(tmpvec3, yUnitVec3, a);\n      vec3.normalize(tmpvec3, tmpvec3);\n      setAxisAngle(out, tmpvec3, Math.PI);\n      return out;\n    } else if (dot > 0.999999) {\n      out[0] = 0;\n      out[1] = 0;\n      out[2] = 0;\n      out[3] = 1;\n      return out;\n    } else {\n      vec3.cross(tmpvec3, a, b);\n      out[0] = tmpvec3[0];\n      out[1] = tmpvec3[1];\n      out[2] = tmpvec3[2];\n      out[3] = 1 + dot;\n      return normalize(out, out);\n    }\n  };\n}();\n/**\n * Performs a spherical linear interpolation with two control points\n *\n * @param {quat} out the receiving quaternion\n * @param {ReadonlyQuat} a the first operand\n * @param {ReadonlyQuat} b the second operand\n * @param {ReadonlyQuat} c the third operand\n * @param {ReadonlyQuat} d the fourth operand\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\n * @returns {quat} out\n */\n\nexport var sqlerp = function () {\n  var temp1 = create();\n  var temp2 = create();\n  return function (out, a, b, c, d, t) {\n    slerp(temp1, a, d, t);\n    slerp(temp2, b, c, t);\n    slerp(out, temp1, temp2, 2 * t * (1 - t));\n    return out;\n  };\n}();\n/**\n * Sets the specified quaternion with values corresponding to the given\n * axes. Each axis is a vec3 and is expected to be unit length and\n * perpendicular to all other specified axes.\n *\n * @param {ReadonlyVec3} view  the vector representing the viewing direction\n * @param {ReadonlyVec3} right the vector representing the local \"right\" direction\n * @param {ReadonlyVec3} up    the vector representing the local \"up\" direction\n * @returns {quat} out\n */\n\nexport var setAxes = function () {\n  var matr = mat3.create();\n  return function (out, view, right, up) {\n    matr[0] = right[0];\n    matr[3] = right[1];\n    matr[6] = right[2];\n    matr[1] = up[0];\n    matr[4] = up[1];\n    matr[7] = up[2];\n    matr[2] = -view[0];\n    matr[5] = -view[1];\n    matr[8] = -view[2];\n    return normalize(out, fromMat3(out, matr));\n  };\n}();","import * as glMatrix from \"./common.js\";\n/**\n * 3 Dimensional Vector\n * @module vec3\n */\n\n/**\n * Creates a new, empty vec3\n *\n * @returns {vec3} a new 3D vector\n */\n\nexport function create() {\n  var out = new glMatrix.ARRAY_TYPE(3);\n\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\n    out[0] = 0;\n    out[1] = 0;\n    out[2] = 0;\n  }\n\n  return out;\n}\n/**\n * Creates a new vec3 initialized with values from an existing vector\n *\n * @param {ReadonlyVec3} a vector to clone\n * @returns {vec3} a new 3D vector\n */\n\nexport function clone(a) {\n  var out = new glMatrix.ARRAY_TYPE(3);\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  return out;\n}\n/**\n * Calculates the length of a vec3\n *\n * @param {ReadonlyVec3} a vector to calculate length of\n * @returns {Number} length of a\n */\n\nexport function length(a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  return Math.hypot(x, y, z);\n}\n/**\n * Creates a new vec3 initialized with the given values\n *\n * @param {Number} x X component\n * @param {Number} y Y component\n * @param {Number} z Z component\n * @returns {vec3} a new 3D vector\n */\n\nexport function fromValues(x, y, z) {\n  var out = new glMatrix.ARRAY_TYPE(3);\n  out[0] = x;\n  out[1] = y;\n  out[2] = z;\n  return out;\n}\n/**\n * Copy the values from one vec3 to another\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the source vector\n * @returns {vec3} out\n */\n\nexport function copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  return out;\n}\n/**\n * Set the components of a vec3 to the given values\n *\n * @param {vec3} out the receiving vector\n * @param {Number} x X component\n * @param {Number} y Y component\n * @param {Number} z Z component\n * @returns {vec3} out\n */\n\nexport function set(out, x, y, z) {\n  out[0] = x;\n  out[1] = y;\n  out[2] = z;\n  return out;\n}\n/**\n * Adds two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {vec3} out\n */\n\nexport function add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  out[2] = a[2] + b[2];\n  return out;\n}\n/**\n * Subtracts vector b from vector a\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {vec3} out\n */\n\nexport function subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  out[2] = a[2] - b[2];\n  return out;\n}\n/**\n * Multiplies two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {vec3} out\n */\n\nexport function multiply(out, a, b) {\n  out[0] = a[0] * b[0];\n  out[1] = a[1] * b[1];\n  out[2] = a[2] * b[2];\n  return out;\n}\n/**\n * Divides two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {vec3} out\n */\n\nexport function divide(out, a, b) {\n  out[0] = a[0] / b[0];\n  out[1] = a[1] / b[1];\n  out[2] = a[2] / b[2];\n  return out;\n}\n/**\n * Math.ceil the components of a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a vector to ceil\n * @returns {vec3} out\n */\n\nexport function ceil(out, a) {\n  out[0] = Math.ceil(a[0]);\n  out[1] = Math.ceil(a[1]);\n  out[2] = Math.ceil(a[2]);\n  return out;\n}\n/**\n * Math.floor the components of a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a vector to floor\n * @returns {vec3} out\n */\n\nexport function floor(out, a) {\n  out[0] = Math.floor(a[0]);\n  out[1] = Math.floor(a[1]);\n  out[2] = Math.floor(a[2]);\n  return out;\n}\n/**\n * Returns the minimum of two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {vec3} out\n */\n\nexport function min(out, a, b) {\n  out[0] = Math.min(a[0], b[0]);\n  out[1] = Math.min(a[1], b[1]);\n  out[2] = Math.min(a[2], b[2]);\n  return out;\n}\n/**\n * Returns the maximum of two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {vec3} out\n */\n\nexport function max(out, a, b) {\n  out[0] = Math.max(a[0], b[0]);\n  out[1] = Math.max(a[1], b[1]);\n  out[2] = Math.max(a[2], b[2]);\n  return out;\n}\n/**\n * Math.round the components of a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a vector to round\n * @returns {vec3} out\n */\n\nexport function round(out, a) {\n  out[0] = Math.round(a[0]);\n  out[1] = Math.round(a[1]);\n  out[2] = Math.round(a[2]);\n  return out;\n}\n/**\n * Scales a vec3 by a scalar number\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the vector to scale\n * @param {Number} b amount to scale the vector by\n * @returns {vec3} out\n */\n\nexport function scale(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  out[2] = a[2] * b;\n  return out;\n}\n/**\n * Adds two vec3's after scaling the second operand by a scalar value\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @param {Number} scale the amount to scale b by before adding\n * @returns {vec3} out\n */\n\nexport function scaleAndAdd(out, a, b, scale) {\n  out[0] = a[0] + b[0] * scale;\n  out[1] = a[1] + b[1] * scale;\n  out[2] = a[2] + b[2] * scale;\n  return out;\n}\n/**\n * Calculates the euclidian distance between two vec3's\n *\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {Number} distance between a and b\n */\n\nexport function distance(a, b) {\n  var x = b[0] - a[0];\n  var y = b[1] - a[1];\n  var z = b[2] - a[2];\n  return Math.hypot(x, y, z);\n}\n/**\n * Calculates the squared euclidian distance between two vec3's\n *\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {Number} squared distance between a and b\n */\n\nexport function squaredDistance(a, b) {\n  var x = b[0] - a[0];\n  var y = b[1] - a[1];\n  var z = b[2] - a[2];\n  return x * x + y * y + z * z;\n}\n/**\n * Calculates the squared length of a vec3\n *\n * @param {ReadonlyVec3} a vector to calculate squared length of\n * @returns {Number} squared length of a\n */\n\nexport function squaredLength(a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  return x * x + y * y + z * z;\n}\n/**\n * Negates the components of a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a vector to negate\n * @returns {vec3} out\n */\n\nexport function negate(out, a) {\n  out[0] = -a[0];\n  out[1] = -a[1];\n  out[2] = -a[2];\n  return out;\n}\n/**\n * Returns the inverse of the components of a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a vector to invert\n * @returns {vec3} out\n */\n\nexport function inverse(out, a) {\n  out[0] = 1.0 / a[0];\n  out[1] = 1.0 / a[1];\n  out[2] = 1.0 / a[2];\n  return out;\n}\n/**\n * Normalize a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a vector to normalize\n * @returns {vec3} out\n */\n\nexport function normalize(out, a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  var len = x * x + y * y + z * z;\n\n  if (len > 0) {\n    //TODO: evaluate use of glm_invsqrt here?\n    len = 1 / Math.sqrt(len);\n  }\n\n  out[0] = a[0] * len;\n  out[1] = a[1] * len;\n  out[2] = a[2] * len;\n  return out;\n}\n/**\n * Calculates the dot product of two vec3's\n *\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {Number} dot product of a and b\n */\n\nexport function dot(a, b) {\n  return a[0] * b[0] + a[1] * b[1] + a[2] * b[2];\n}\n/**\n * Computes the cross product of two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {vec3} out\n */\n\nexport function cross(out, a, b) {\n  var ax = a[0],\n      ay = a[1],\n      az = a[2];\n  var bx = b[0],\n      by = b[1],\n      bz = b[2];\n  out[0] = ay * bz - az * by;\n  out[1] = az * bx - ax * bz;\n  out[2] = ax * by - ay * bx;\n  return out;\n}\n/**\n * Performs a linear interpolation between two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\n * @returns {vec3} out\n */\n\nexport function lerp(out, a, b, t) {\n  var ax = a[0];\n  var ay = a[1];\n  var az = a[2];\n  out[0] = ax + t * (b[0] - ax);\n  out[1] = ay + t * (b[1] - ay);\n  out[2] = az + t * (b[2] - az);\n  return out;\n}\n/**\n * Performs a hermite interpolation with two control points\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @param {ReadonlyVec3} c the third operand\n * @param {ReadonlyVec3} d the fourth operand\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\n * @returns {vec3} out\n */\n\nexport function hermite(out, a, b, c, d, t) {\n  var factorTimes2 = t * t;\n  var factor1 = factorTimes2 * (2 * t - 3) + 1;\n  var factor2 = factorTimes2 * (t - 2) + t;\n  var factor3 = factorTimes2 * (t - 1);\n  var factor4 = factorTimes2 * (3 - 2 * t);\n  out[0] = a[0] * factor1 + b[0] * factor2 + c[0] * factor3 + d[0] * factor4;\n  out[1] = a[1] * factor1 + b[1] * factor2 + c[1] * factor3 + d[1] * factor4;\n  out[2] = a[2] * factor1 + b[2] * factor2 + c[2] * factor3 + d[2] * factor4;\n  return out;\n}\n/**\n * Performs a bezier interpolation with two control points\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @param {ReadonlyVec3} c the third operand\n * @param {ReadonlyVec3} d the fourth operand\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\n * @returns {vec3} out\n */\n\nexport function bezier(out, a, b, c, d, t) {\n  var inverseFactor = 1 - t;\n  var inverseFactorTimesTwo = inverseFactor * inverseFactor;\n  var factorTimes2 = t * t;\n  var factor1 = inverseFactorTimesTwo * inverseFactor;\n  var factor2 = 3 * t * inverseFactorTimesTwo;\n  var factor3 = 3 * factorTimes2 * inverseFactor;\n  var factor4 = factorTimes2 * t;\n  out[0] = a[0] * factor1 + b[0] * factor2 + c[0] * factor3 + d[0] * factor4;\n  out[1] = a[1] * factor1 + b[1] * factor2 + c[1] * factor3 + d[1] * factor4;\n  out[2] = a[2] * factor1 + b[2] * factor2 + c[2] * factor3 + d[2] * factor4;\n  return out;\n}\n/**\n * Generates a random vector with the given scale\n *\n * @param {vec3} out the receiving vector\n * @param {Number} [scale] Length of the resulting vector. If ommitted, a unit vector will be returned\n * @returns {vec3} out\n */\n\nexport function random(out, scale) {\n  scale = scale || 1.0;\n  var r = glMatrix.RANDOM() * 2.0 * Math.PI;\n  var z = glMatrix.RANDOM() * 2.0 - 1.0;\n  var zScale = Math.sqrt(1.0 - z * z) * scale;\n  out[0] = Math.cos(r) * zScale;\n  out[1] = Math.sin(r) * zScale;\n  out[2] = z * scale;\n  return out;\n}\n/**\n * Transforms the vec3 with a mat4.\n * 4th vector component is implicitly '1'\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the vector to transform\n * @param {ReadonlyMat4} m matrix to transform with\n * @returns {vec3} out\n */\n\nexport function transformMat4(out, a, m) {\n  var x = a[0],\n      y = a[1],\n      z = a[2];\n  var w = m[3] * x + m[7] * y + m[11] * z + m[15];\n  w = w || 1.0;\n  out[0] = (m[0] * x + m[4] * y + m[8] * z + m[12]) / w;\n  out[1] = (m[1] * x + m[5] * y + m[9] * z + m[13]) / w;\n  out[2] = (m[2] * x + m[6] * y + m[10] * z + m[14]) / w;\n  return out;\n}\n/**\n * Transforms the vec3 with a mat3.\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the vector to transform\n * @param {ReadonlyMat3} m the 3x3 matrix to transform with\n * @returns {vec3} out\n */\n\nexport function transformMat3(out, a, m) {\n  var x = a[0],\n      y = a[1],\n      z = a[2];\n  out[0] = x * m[0] + y * m[3] + z * m[6];\n  out[1] = x * m[1] + y * m[4] + z * m[7];\n  out[2] = x * m[2] + y * m[5] + z * m[8];\n  return out;\n}\n/**\n * Transforms the vec3 with a quat\n * Can also be used for dual quaternions. (Multiply it with the real part)\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the vector to transform\n * @param {ReadonlyQuat} q quaternion to transform with\n * @returns {vec3} out\n */\n\nexport function transformQuat(out, a, q) {\n  // benchmarks: https://jsperf.com/quaternion-transform-vec3-implementations-fixed\n  var qx = q[0],\n      qy = q[1],\n      qz = q[2],\n      qw = q[3];\n  var x = a[0],\n      y = a[1],\n      z = a[2]; // var qvec = [qx, qy, qz];\n  // var uv = vec3.cross([], qvec, a);\n\n  var uvx = qy * z - qz * y,\n      uvy = qz * x - qx * z,\n      uvz = qx * y - qy * x; // var uuv = vec3.cross([], qvec, uv);\n\n  var uuvx = qy * uvz - qz * uvy,\n      uuvy = qz * uvx - qx * uvz,\n      uuvz = qx * uvy - qy * uvx; // vec3.scale(uv, uv, 2 * w);\n\n  var w2 = qw * 2;\n  uvx *= w2;\n  uvy *= w2;\n  uvz *= w2; // vec3.scale(uuv, uuv, 2);\n\n  uuvx *= 2;\n  uuvy *= 2;\n  uuvz *= 2; // return vec3.add(out, a, vec3.add(out, uv, uuv));\n\n  out[0] = x + uvx + uuvx;\n  out[1] = y + uvy + uuvy;\n  out[2] = z + uvz + uuvz;\n  return out;\n}\n/**\n * Rotate a 3D vector around the x-axis\n * @param {vec3} out The receiving vec3\n * @param {ReadonlyVec3} a The vec3 point to rotate\n * @param {ReadonlyVec3} b The origin of the rotation\n * @param {Number} rad The angle of rotation in radians\n * @returns {vec3} out\n */\n\nexport function rotateX(out, a, b, rad) {\n  var p = [],\n      r = []; //Translate point to the origin\n\n  p[0] = a[0] - b[0];\n  p[1] = a[1] - b[1];\n  p[2] = a[2] - b[2]; //perform rotation\n\n  r[0] = p[0];\n  r[1] = p[1] * Math.cos(rad) - p[2] * Math.sin(rad);\n  r[2] = p[1] * Math.sin(rad) + p[2] * Math.cos(rad); //translate to correct position\n\n  out[0] = r[0] + b[0];\n  out[1] = r[1] + b[1];\n  out[2] = r[2] + b[2];\n  return out;\n}\n/**\n * Rotate a 3D vector around the y-axis\n * @param {vec3} out The receiving vec3\n * @param {ReadonlyVec3} a The vec3 point to rotate\n * @param {ReadonlyVec3} b The origin of the rotation\n * @param {Number} rad The angle of rotation in radians\n * @returns {vec3} out\n */\n\nexport function rotateY(out, a, b, rad) {\n  var p = [],\n      r = []; //Translate point to the origin\n\n  p[0] = a[0] - b[0];\n  p[1] = a[1] - b[1];\n  p[2] = a[2] - b[2]; //perform rotation\n\n  r[0] = p[2] * Math.sin(rad) + p[0] * Math.cos(rad);\n  r[1] = p[1];\n  r[2] = p[2] * Math.cos(rad) - p[0] * Math.sin(rad); //translate to correct position\n\n  out[0] = r[0] + b[0];\n  out[1] = r[1] + b[1];\n  out[2] = r[2] + b[2];\n  return out;\n}\n/**\n * Rotate a 3D vector around the z-axis\n * @param {vec3} out The receiving vec3\n * @param {ReadonlyVec3} a The vec3 point to rotate\n * @param {ReadonlyVec3} b The origin of the rotation\n * @param {Number} rad The angle of rotation in radians\n * @returns {vec3} out\n */\n\nexport function rotateZ(out, a, b, rad) {\n  var p = [],\n      r = []; //Translate point to the origin\n\n  p[0] = a[0] - b[0];\n  p[1] = a[1] - b[1];\n  p[2] = a[2] - b[2]; //perform rotation\n\n  r[0] = p[0] * Math.cos(rad) - p[1] * Math.sin(rad);\n  r[1] = p[0] * Math.sin(rad) + p[1] * Math.cos(rad);\n  r[2] = p[2]; //translate to correct position\n\n  out[0] = r[0] + b[0];\n  out[1] = r[1] + b[1];\n  out[2] = r[2] + b[2];\n  return out;\n}\n/**\n * Get the angle between two 3D vectors\n * @param {ReadonlyVec3} a The first operand\n * @param {ReadonlyVec3} b The second operand\n * @returns {Number} The angle in radians\n */\n\nexport function angle(a, b) {\n  var ax = a[0],\n      ay = a[1],\n      az = a[2],\n      bx = b[0],\n      by = b[1],\n      bz = b[2],\n      mag1 = Math.sqrt(ax * ax + ay * ay + az * az),\n      mag2 = Math.sqrt(bx * bx + by * by + bz * bz),\n      mag = mag1 * mag2,\n      cosine = mag && dot(a, b) / mag;\n  return Math.acos(Math.min(Math.max(cosine, -1), 1));\n}\n/**\n * Set the components of a vec3 to zero\n *\n * @param {vec3} out the receiving vector\n * @returns {vec3} out\n */\n\nexport function zero(out) {\n  out[0] = 0.0;\n  out[1] = 0.0;\n  out[2] = 0.0;\n  return out;\n}\n/**\n * Returns a string representation of a vector\n *\n * @param {ReadonlyVec3} a vector to represent as a string\n * @returns {String} string representation of the vector\n */\n\nexport function str(a) {\n  return \"vec3(\" + a[0] + \", \" + a[1] + \", \" + a[2] + \")\";\n}\n/**\n * Returns whether or not the vectors have exactly the same elements in the same position (when compared with ===)\n *\n * @param {ReadonlyVec3} a The first vector.\n * @param {ReadonlyVec3} b The second vector.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\n\nexport function exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2];\n}\n/**\n * Returns whether or not the vectors have approximately the same elements in the same position.\n *\n * @param {ReadonlyVec3} a The first vector.\n * @param {ReadonlyVec3} b The second vector.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\n\nexport function equals(a, b) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2];\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2];\n  return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2));\n}\n/**\n * Alias for {@link vec3.subtract}\n * @function\n */\n\nexport var sub = subtract;\n/**\n * Alias for {@link vec3.multiply}\n * @function\n */\n\nexport var mul = multiply;\n/**\n * Alias for {@link vec3.divide}\n * @function\n */\n\nexport var div = divide;\n/**\n * Alias for {@link vec3.distance}\n * @function\n */\n\nexport var dist = distance;\n/**\n * Alias for {@link vec3.squaredDistance}\n * @function\n */\n\nexport var sqrDist = squaredDistance;\n/**\n * Alias for {@link vec3.length}\n * @function\n */\n\nexport var len = length;\n/**\n * Alias for {@link vec3.squaredLength}\n * @function\n */\n\nexport var sqrLen = squaredLength;\n/**\n * Perform some operation over an array of vec3s.\n *\n * @param {Array} a the array of vectors to iterate over\n * @param {Number} stride Number of elements between the start of each vec3. If 0 assumes tightly packed\n * @param {Number} offset Number of elements to skip at the beginning of the array\n * @param {Number} count Number of vec3s to iterate over. If 0 iterates over entire array\n * @param {Function} fn Function to call for each vector in the array\n * @param {Object} [arg] additional argument to pass to fn\n * @returns {Array} a\n * @function\n */\n\nexport var forEach = function () {\n  var vec = create();\n  return function (a, stride, offset, count, fn, arg) {\n    var i, l;\n\n    if (!stride) {\n      stride = 3;\n    }\n\n    if (!offset) {\n      offset = 0;\n    }\n\n    if (count) {\n      l = Math.min(count * stride + offset, a.length);\n    } else {\n      l = a.length;\n    }\n\n    for (i = offset; i < l; i += stride) {\n      vec[0] = a[i];\n      vec[1] = a[i + 1];\n      vec[2] = a[i + 2];\n      fn(vec, vec, arg);\n      a[i] = vec[0];\n      a[i + 1] = vec[1];\n      a[i + 2] = vec[2];\n    }\n\n    return a;\n  };\n}();","import * as glMatrix from \"./common.js\";\n/**\n * 4 Dimensional Vector\n * @module vec4\n */\n\n/**\n * Creates a new, empty vec4\n *\n * @returns {vec4} a new 4D vector\n */\n\nexport function create() {\n  var out = new glMatrix.ARRAY_TYPE(4);\n\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\n    out[0] = 0;\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n  }\n\n  return out;\n}\n/**\n * Creates a new vec4 initialized with values from an existing vector\n *\n * @param {ReadonlyVec4} a vector to clone\n * @returns {vec4} a new 4D vector\n */\n\nexport function clone(a) {\n  var out = new glMatrix.ARRAY_TYPE(4);\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  return out;\n}\n/**\n * Creates a new vec4 initialized with the given values\n *\n * @param {Number} x X component\n * @param {Number} y Y component\n * @param {Number} z Z component\n * @param {Number} w W component\n * @returns {vec4} a new 4D vector\n */\n\nexport function fromValues(x, y, z, w) {\n  var out = new glMatrix.ARRAY_TYPE(4);\n  out[0] = x;\n  out[1] = y;\n  out[2] = z;\n  out[3] = w;\n  return out;\n}\n/**\n * Copy the values from one vec4 to another\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a the source vector\n * @returns {vec4} out\n */\n\nexport function copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  return out;\n}\n/**\n * Set the components of a vec4 to the given values\n *\n * @param {vec4} out the receiving vector\n * @param {Number} x X component\n * @param {Number} y Y component\n * @param {Number} z Z component\n * @param {Number} w W component\n * @returns {vec4} out\n */\n\nexport function set(out, x, y, z, w) {\n  out[0] = x;\n  out[1] = y;\n  out[2] = z;\n  out[3] = w;\n  return out;\n}\n/**\n * Adds two vec4's\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a the first operand\n * @param {ReadonlyVec4} b the second operand\n * @returns {vec4} out\n */\n\nexport function add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  out[2] = a[2] + b[2];\n  out[3] = a[3] + b[3];\n  return out;\n}\n/**\n * Subtracts vector b from vector a\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a the first operand\n * @param {ReadonlyVec4} b the second operand\n * @returns {vec4} out\n */\n\nexport function subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  out[2] = a[2] - b[2];\n  out[3] = a[3] - b[3];\n  return out;\n}\n/**\n * Multiplies two vec4's\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a the first operand\n * @param {ReadonlyVec4} b the second operand\n * @returns {vec4} out\n */\n\nexport function multiply(out, a, b) {\n  out[0] = a[0] * b[0];\n  out[1] = a[1] * b[1];\n  out[2] = a[2] * b[2];\n  out[3] = a[3] * b[3];\n  return out;\n}\n/**\n * Divides two vec4's\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a the first operand\n * @param {ReadonlyVec4} b the second operand\n * @returns {vec4} out\n */\n\nexport function divide(out, a, b) {\n  out[0] = a[0] / b[0];\n  out[1] = a[1] / b[1];\n  out[2] = a[2] / b[2];\n  out[3] = a[3] / b[3];\n  return out;\n}\n/**\n * Math.ceil the components of a vec4\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a vector to ceil\n * @returns {vec4} out\n */\n\nexport function ceil(out, a) {\n  out[0] = Math.ceil(a[0]);\n  out[1] = Math.ceil(a[1]);\n  out[2] = Math.ceil(a[2]);\n  out[3] = Math.ceil(a[3]);\n  return out;\n}\n/**\n * Math.floor the components of a vec4\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a vector to floor\n * @returns {vec4} out\n */\n\nexport function floor(out, a) {\n  out[0] = Math.floor(a[0]);\n  out[1] = Math.floor(a[1]);\n  out[2] = Math.floor(a[2]);\n  out[3] = Math.floor(a[3]);\n  return out;\n}\n/**\n * Returns the minimum of two vec4's\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a the first operand\n * @param {ReadonlyVec4} b the second operand\n * @returns {vec4} out\n */\n\nexport function min(out, a, b) {\n  out[0] = Math.min(a[0], b[0]);\n  out[1] = Math.min(a[1], b[1]);\n  out[2] = Math.min(a[2], b[2]);\n  out[3] = Math.min(a[3], b[3]);\n  return out;\n}\n/**\n * Returns the maximum of two vec4's\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a the first operand\n * @param {ReadonlyVec4} b the second operand\n * @returns {vec4} out\n */\n\nexport function max(out, a, b) {\n  out[0] = Math.max(a[0], b[0]);\n  out[1] = Math.max(a[1], b[1]);\n  out[2] = Math.max(a[2], b[2]);\n  out[3] = Math.max(a[3], b[3]);\n  return out;\n}\n/**\n * Math.round the components of a vec4\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a vector to round\n * @returns {vec4} out\n */\n\nexport function round(out, a) {\n  out[0] = Math.round(a[0]);\n  out[1] = Math.round(a[1]);\n  out[2] = Math.round(a[2]);\n  out[3] = Math.round(a[3]);\n  return out;\n}\n/**\n * Scales a vec4 by a scalar number\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a the vector to scale\n * @param {Number} b amount to scale the vector by\n * @returns {vec4} out\n */\n\nexport function scale(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  out[2] = a[2] * b;\n  out[3] = a[3] * b;\n  return out;\n}\n/**\n * Adds two vec4's after scaling the second operand by a scalar value\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a the first operand\n * @param {ReadonlyVec4} b the second operand\n * @param {Number} scale the amount to scale b by before adding\n * @returns {vec4} out\n */\n\nexport function scaleAndAdd(out, a, b, scale) {\n  out[0] = a[0] + b[0] * scale;\n  out[1] = a[1] + b[1] * scale;\n  out[2] = a[2] + b[2] * scale;\n  out[3] = a[3] + b[3] * scale;\n  return out;\n}\n/**\n * Calculates the euclidian distance between two vec4's\n *\n * @param {ReadonlyVec4} a the first operand\n * @param {ReadonlyVec4} b the second operand\n * @returns {Number} distance between a and b\n */\n\nexport function distance(a, b) {\n  var x = b[0] - a[0];\n  var y = b[1] - a[1];\n  var z = b[2] - a[2];\n  var w = b[3] - a[3];\n  return Math.hypot(x, y, z, w);\n}\n/**\n * Calculates the squared euclidian distance between two vec4's\n *\n * @param {ReadonlyVec4} a the first operand\n * @param {ReadonlyVec4} b the second operand\n * @returns {Number} squared distance between a and b\n */\n\nexport function squaredDistance(a, b) {\n  var x = b[0] - a[0];\n  var y = b[1] - a[1];\n  var z = b[2] - a[2];\n  var w = b[3] - a[3];\n  return x * x + y * y + z * z + w * w;\n}\n/**\n * Calculates the length of a vec4\n *\n * @param {ReadonlyVec4} a vector to calculate length of\n * @returns {Number} length of a\n */\n\nexport function length(a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  var w = a[3];\n  return Math.hypot(x, y, z, w);\n}\n/**\n * Calculates the squared length of a vec4\n *\n * @param {ReadonlyVec4} a vector to calculate squared length of\n * @returns {Number} squared length of a\n */\n\nexport function squaredLength(a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  var w = a[3];\n  return x * x + y * y + z * z + w * w;\n}\n/**\n * Negates the components of a vec4\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a vector to negate\n * @returns {vec4} out\n */\n\nexport function negate(out, a) {\n  out[0] = -a[0];\n  out[1] = -a[1];\n  out[2] = -a[2];\n  out[3] = -a[3];\n  return out;\n}\n/**\n * Returns the inverse of the components of a vec4\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a vector to invert\n * @returns {vec4} out\n */\n\nexport function inverse(out, a) {\n  out[0] = 1.0 / a[0];\n  out[1] = 1.0 / a[1];\n  out[2] = 1.0 / a[2];\n  out[3] = 1.0 / a[3];\n  return out;\n}\n/**\n * Normalize a vec4\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a vector to normalize\n * @returns {vec4} out\n */\n\nexport function normalize(out, a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  var w = a[3];\n  var len = x * x + y * y + z * z + w * w;\n\n  if (len > 0) {\n    len = 1 / Math.sqrt(len);\n  }\n\n  out[0] = x * len;\n  out[1] = y * len;\n  out[2] = z * len;\n  out[3] = w * len;\n  return out;\n}\n/**\n * Calculates the dot product of two vec4's\n *\n * @param {ReadonlyVec4} a the first operand\n * @param {ReadonlyVec4} b the second operand\n * @returns {Number} dot product of a and b\n */\n\nexport function dot(a, b) {\n  return a[0] * b[0] + a[1] * b[1] + a[2] * b[2] + a[3] * b[3];\n}\n/**\n * Returns the cross-product of three vectors in a 4-dimensional space\n *\n * @param {ReadonlyVec4} result the receiving vector\n * @param {ReadonlyVec4} U the first vector\n * @param {ReadonlyVec4} V the second vector\n * @param {ReadonlyVec4} W the third vector\n * @returns {vec4} result\n */\n\nexport function cross(out, u, v, w) {\n  var A = v[0] * w[1] - v[1] * w[0],\n      B = v[0] * w[2] - v[2] * w[0],\n      C = v[0] * w[3] - v[3] * w[0],\n      D = v[1] * w[2] - v[2] * w[1],\n      E = v[1] * w[3] - v[3] * w[1],\n      F = v[2] * w[3] - v[3] * w[2];\n  var G = u[0];\n  var H = u[1];\n  var I = u[2];\n  var J = u[3];\n  out[0] = H * F - I * E + J * D;\n  out[1] = -(G * F) + I * C - J * B;\n  out[2] = G * E - H * C + J * A;\n  out[3] = -(G * D) + H * B - I * A;\n  return out;\n}\n/**\n * Performs a linear interpolation between two vec4's\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a the first operand\n * @param {ReadonlyVec4} b the second operand\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\n * @returns {vec4} out\n */\n\nexport function lerp(out, a, b, t) {\n  var ax = a[0];\n  var ay = a[1];\n  var az = a[2];\n  var aw = a[3];\n  out[0] = ax + t * (b[0] - ax);\n  out[1] = ay + t * (b[1] - ay);\n  out[2] = az + t * (b[2] - az);\n  out[3] = aw + t * (b[3] - aw);\n  return out;\n}\n/**\n * Generates a random vector with the given scale\n *\n * @param {vec4} out the receiving vector\n * @param {Number} [scale] Length of the resulting vector. If ommitted, a unit vector will be returned\n * @returns {vec4} out\n */\n\nexport function random(out, scale) {\n  scale = scale || 1.0; // Marsaglia, George. Choosing a Point from the Surface of a\n  // Sphere. Ann. Math. Statist. 43 (1972), no. 2, 645--646.\n  // http://projecteuclid.org/euclid.aoms/1177692644;\n\n  var v1, v2, v3, v4;\n  var s1, s2;\n\n  do {\n    v1 = glMatrix.RANDOM() * 2 - 1;\n    v2 = glMatrix.RANDOM() * 2 - 1;\n    s1 = v1 * v1 + v2 * v2;\n  } while (s1 >= 1);\n\n  do {\n    v3 = glMatrix.RANDOM() * 2 - 1;\n    v4 = glMatrix.RANDOM() * 2 - 1;\n    s2 = v3 * v3 + v4 * v4;\n  } while (s2 >= 1);\n\n  var d = Math.sqrt((1 - s1) / s2);\n  out[0] = scale * v1;\n  out[1] = scale * v2;\n  out[2] = scale * v3 * d;\n  out[3] = scale * v4 * d;\n  return out;\n}\n/**\n * Transforms the vec4 with a mat4.\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a the vector to transform\n * @param {ReadonlyMat4} m matrix to transform with\n * @returns {vec4} out\n */\n\nexport function transformMat4(out, a, m) {\n  var x = a[0],\n      y = a[1],\n      z = a[2],\n      w = a[3];\n  out[0] = m[0] * x + m[4] * y + m[8] * z + m[12] * w;\n  out[1] = m[1] * x + m[5] * y + m[9] * z + m[13] * w;\n  out[2] = m[2] * x + m[6] * y + m[10] * z + m[14] * w;\n  out[3] = m[3] * x + m[7] * y + m[11] * z + m[15] * w;\n  return out;\n}\n/**\n * Transforms the vec4 with a quat\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a the vector to transform\n * @param {ReadonlyQuat} q quaternion to transform with\n * @returns {vec4} out\n */\n\nexport function transformQuat(out, a, q) {\n  var x = a[0],\n      y = a[1],\n      z = a[2];\n  var qx = q[0],\n      qy = q[1],\n      qz = q[2],\n      qw = q[3]; // calculate quat * vec\n\n  var ix = qw * x + qy * z - qz * y;\n  var iy = qw * y + qz * x - qx * z;\n  var iz = qw * z + qx * y - qy * x;\n  var iw = -qx * x - qy * y - qz * z; // calculate result * inverse quat\n\n  out[0] = ix * qw + iw * -qx + iy * -qz - iz * -qy;\n  out[1] = iy * qw + iw * -qy + iz * -qx - ix * -qz;\n  out[2] = iz * qw + iw * -qz + ix * -qy - iy * -qx;\n  out[3] = a[3];\n  return out;\n}\n/**\n * Set the components of a vec4 to zero\n *\n * @param {vec4} out the receiving vector\n * @returns {vec4} out\n */\n\nexport function zero(out) {\n  out[0] = 0.0;\n  out[1] = 0.0;\n  out[2] = 0.0;\n  out[3] = 0.0;\n  return out;\n}\n/**\n * Returns a string representation of a vector\n *\n * @param {ReadonlyVec4} a vector to represent as a string\n * @returns {String} string representation of the vector\n */\n\nexport function str(a) {\n  return \"vec4(\" + a[0] + \", \" + a[1] + \", \" + a[2] + \", \" + a[3] + \")\";\n}\n/**\n * Returns whether or not the vectors have exactly the same elements in the same position (when compared with ===)\n *\n * @param {ReadonlyVec4} a The first vector.\n * @param {ReadonlyVec4} b The second vector.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\n\nexport function exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3];\n}\n/**\n * Returns whether or not the vectors have approximately the same elements in the same position.\n *\n * @param {ReadonlyVec4} a The first vector.\n * @param {ReadonlyVec4} b The second vector.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\n\nexport function equals(a, b) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3];\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2],\n      b3 = b[3];\n  return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2)) && Math.abs(a3 - b3) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a3), Math.abs(b3));\n}\n/**\n * Alias for {@link vec4.subtract}\n * @function\n */\n\nexport var sub = subtract;\n/**\n * Alias for {@link vec4.multiply}\n * @function\n */\n\nexport var mul = multiply;\n/**\n * Alias for {@link vec4.divide}\n * @function\n */\n\nexport var div = divide;\n/**\n * Alias for {@link vec4.distance}\n * @function\n */\n\nexport var dist = distance;\n/**\n * Alias for {@link vec4.squaredDistance}\n * @function\n */\n\nexport var sqrDist = squaredDistance;\n/**\n * Alias for {@link vec4.length}\n * @function\n */\n\nexport var len = length;\n/**\n * Alias for {@link vec4.squaredLength}\n * @function\n */\n\nexport var sqrLen = squaredLength;\n/**\n * Perform some operation over an array of vec4s.\n *\n * @param {Array} a the array of vectors to iterate over\n * @param {Number} stride Number of elements between the start of each vec4. If 0 assumes tightly packed\n * @param {Number} offset Number of elements to skip at the beginning of the array\n * @param {Number} count Number of vec4s to iterate over. If 0 iterates over entire array\n * @param {Function} fn Function to call for each vector in the array\n * @param {Object} [arg] additional argument to pass to fn\n * @returns {Array} a\n * @function\n */\n\nexport var forEach = function () {\n  var vec = create();\n  return function (a, stride, offset, count, fn, arg) {\n    var i, l;\n\n    if (!stride) {\n      stride = 4;\n    }\n\n    if (!offset) {\n      offset = 0;\n    }\n\n    if (count) {\n      l = Math.min(count * stride + offset, a.length);\n    } else {\n      l = a.length;\n    }\n\n    for (i = offset; i < l; i += stride) {\n      vec[0] = a[i];\n      vec[1] = a[i + 1];\n      vec[2] = a[i + 2];\n      vec[3] = a[i + 3];\n      fn(vec, vec, arg);\n      a[i] = vec[0];\n      a[i + 1] = vec[1];\n      a[i + 2] = vec[2];\n      a[i + 3] = vec[3];\n    }\n\n    return a;\n  };\n}();","import * as glMatrix from \"./common.js\";\nimport * as quat from \"./quat.js\";\nimport * as mat4 from \"./mat4.js\";\n/**\n * Dual Quaternion<br>\n * Format: [real, dual]<br>\n * Quaternion format: XYZW<br>\n * Make sure to have normalized dual quaternions, otherwise the functions may not work as intended.<br>\n * @module quat2\n */\n\n/**\n * Creates a new identity dual quat\n *\n * @returns {quat2} a new dual quaternion [real -> rotation, dual -> translation]\n */\n\nexport function create() {\n  var dq = new glMatrix.ARRAY_TYPE(8);\n\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\n    dq[0] = 0;\n    dq[1] = 0;\n    dq[2] = 0;\n    dq[4] = 0;\n    dq[5] = 0;\n    dq[6] = 0;\n    dq[7] = 0;\n  }\n\n  dq[3] = 1;\n  return dq;\n}\n/**\n * Creates a new quat initialized with values from an existing quaternion\n *\n * @param {ReadonlyQuat2} a dual quaternion to clone\n * @returns {quat2} new dual quaternion\n * @function\n */\n\nexport function clone(a) {\n  var dq = new glMatrix.ARRAY_TYPE(8);\n  dq[0] = a[0];\n  dq[1] = a[1];\n  dq[2] = a[2];\n  dq[3] = a[3];\n  dq[4] = a[4];\n  dq[5] = a[5];\n  dq[6] = a[6];\n  dq[7] = a[7];\n  return dq;\n}\n/**\n * Creates a new dual quat initialized with the given values\n *\n * @param {Number} x1 X component\n * @param {Number} y1 Y component\n * @param {Number} z1 Z component\n * @param {Number} w1 W component\n * @param {Number} x2 X component\n * @param {Number} y2 Y component\n * @param {Number} z2 Z component\n * @param {Number} w2 W component\n * @returns {quat2} new dual quaternion\n * @function\n */\n\nexport function fromValues(x1, y1, z1, w1, x2, y2, z2, w2) {\n  var dq = new glMatrix.ARRAY_TYPE(8);\n  dq[0] = x1;\n  dq[1] = y1;\n  dq[2] = z1;\n  dq[3] = w1;\n  dq[4] = x2;\n  dq[5] = y2;\n  dq[6] = z2;\n  dq[7] = w2;\n  return dq;\n}\n/**\n * Creates a new dual quat from the given values (quat and translation)\n *\n * @param {Number} x1 X component\n * @param {Number} y1 Y component\n * @param {Number} z1 Z component\n * @param {Number} w1 W component\n * @param {Number} x2 X component (translation)\n * @param {Number} y2 Y component (translation)\n * @param {Number} z2 Z component (translation)\n * @returns {quat2} new dual quaternion\n * @function\n */\n\nexport function fromRotationTranslationValues(x1, y1, z1, w1, x2, y2, z2) {\n  var dq = new glMatrix.ARRAY_TYPE(8);\n  dq[0] = x1;\n  dq[1] = y1;\n  dq[2] = z1;\n  dq[3] = w1;\n  var ax = x2 * 0.5,\n      ay = y2 * 0.5,\n      az = z2 * 0.5;\n  dq[4] = ax * w1 + ay * z1 - az * y1;\n  dq[5] = ay * w1 + az * x1 - ax * z1;\n  dq[6] = az * w1 + ax * y1 - ay * x1;\n  dq[7] = -ax * x1 - ay * y1 - az * z1;\n  return dq;\n}\n/**\n * Creates a dual quat from a quaternion and a translation\n *\n * @param {ReadonlyQuat2} dual quaternion receiving operation result\n * @param {ReadonlyQuat} q a normalized quaternion\n * @param {ReadonlyVec3} t tranlation vector\n * @returns {quat2} dual quaternion receiving operation result\n * @function\n */\n\nexport function fromRotationTranslation(out, q, t) {\n  var ax = t[0] * 0.5,\n      ay = t[1] * 0.5,\n      az = t[2] * 0.5,\n      bx = q[0],\n      by = q[1],\n      bz = q[2],\n      bw = q[3];\n  out[0] = bx;\n  out[1] = by;\n  out[2] = bz;\n  out[3] = bw;\n  out[4] = ax * bw + ay * bz - az * by;\n  out[5] = ay * bw + az * bx - ax * bz;\n  out[6] = az * bw + ax * by - ay * bx;\n  out[7] = -ax * bx - ay * by - az * bz;\n  return out;\n}\n/**\n * Creates a dual quat from a translation\n *\n * @param {ReadonlyQuat2} dual quaternion receiving operation result\n * @param {ReadonlyVec3} t translation vector\n * @returns {quat2} dual quaternion receiving operation result\n * @function\n */\n\nexport function fromTranslation(out, t) {\n  out[0] = 0;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 1;\n  out[4] = t[0] * 0.5;\n  out[5] = t[1] * 0.5;\n  out[6] = t[2] * 0.5;\n  out[7] = 0;\n  return out;\n}\n/**\n * Creates a dual quat from a quaternion\n *\n * @param {ReadonlyQuat2} dual quaternion receiving operation result\n * @param {ReadonlyQuat} q the quaternion\n * @returns {quat2} dual quaternion receiving operation result\n * @function\n */\n\nexport function fromRotation(out, q) {\n  out[0] = q[0];\n  out[1] = q[1];\n  out[2] = q[2];\n  out[3] = q[3];\n  out[4] = 0;\n  out[5] = 0;\n  out[6] = 0;\n  out[7] = 0;\n  return out;\n}\n/**\n * Creates a new dual quat from a matrix (4x4)\n *\n * @param {quat2} out the dual quaternion\n * @param {ReadonlyMat4} a the matrix\n * @returns {quat2} dual quat receiving operation result\n * @function\n */\n\nexport function fromMat4(out, a) {\n  //TODO Optimize this\n  var outer = quat.create();\n  mat4.getRotation(outer, a);\n  var t = new glMatrix.ARRAY_TYPE(3);\n  mat4.getTranslation(t, a);\n  fromRotationTranslation(out, outer, t);\n  return out;\n}\n/**\n * Copy the values from one dual quat to another\n *\n * @param {quat2} out the receiving dual quaternion\n * @param {ReadonlyQuat2} a the source dual quaternion\n * @returns {quat2} out\n * @function\n */\n\nexport function copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  out[4] = a[4];\n  out[5] = a[5];\n  out[6] = a[6];\n  out[7] = a[7];\n  return out;\n}\n/**\n * Set a dual quat to the identity dual quaternion\n *\n * @param {quat2} out the receiving quaternion\n * @returns {quat2} out\n */\n\nexport function identity(out) {\n  out[0] = 0;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 1;\n  out[4] = 0;\n  out[5] = 0;\n  out[6] = 0;\n  out[7] = 0;\n  return out;\n}\n/**\n * Set the components of a dual quat to the given values\n *\n * @param {quat2} out the receiving quaternion\n * @param {Number} x1 X component\n * @param {Number} y1 Y component\n * @param {Number} z1 Z component\n * @param {Number} w1 W component\n * @param {Number} x2 X component\n * @param {Number} y2 Y component\n * @param {Number} z2 Z component\n * @param {Number} w2 W component\n * @returns {quat2} out\n * @function\n */\n\nexport function set(out, x1, y1, z1, w1, x2, y2, z2, w2) {\n  out[0] = x1;\n  out[1] = y1;\n  out[2] = z1;\n  out[3] = w1;\n  out[4] = x2;\n  out[5] = y2;\n  out[6] = z2;\n  out[7] = w2;\n  return out;\n}\n/**\n * Gets the real part of a dual quat\n * @param  {quat} out real part\n * @param  {ReadonlyQuat2} a Dual Quaternion\n * @return {quat} real part\n */\n\nexport var getReal = quat.copy;\n/**\n * Gets the dual part of a dual quat\n * @param  {quat} out dual part\n * @param  {ReadonlyQuat2} a Dual Quaternion\n * @return {quat} dual part\n */\n\nexport function getDual(out, a) {\n  out[0] = a[4];\n  out[1] = a[5];\n  out[2] = a[6];\n  out[3] = a[7];\n  return out;\n}\n/**\n * Set the real component of a dual quat to the given quaternion\n *\n * @param {quat2} out the receiving quaternion\n * @param {ReadonlyQuat} q a quaternion representing the real part\n * @returns {quat2} out\n * @function\n */\n\nexport var setReal = quat.copy;\n/**\n * Set the dual component of a dual quat to the given quaternion\n *\n * @param {quat2} out the receiving quaternion\n * @param {ReadonlyQuat} q a quaternion representing the dual part\n * @returns {quat2} out\n * @function\n */\n\nexport function setDual(out, q) {\n  out[4] = q[0];\n  out[5] = q[1];\n  out[6] = q[2];\n  out[7] = q[3];\n  return out;\n}\n/**\n * Gets the translation of a normalized dual quat\n * @param  {vec3} out translation\n * @param  {ReadonlyQuat2} a Dual Quaternion to be decomposed\n * @return {vec3} translation\n */\n\nexport function getTranslation(out, a) {\n  var ax = a[4],\n      ay = a[5],\n      az = a[6],\n      aw = a[7],\n      bx = -a[0],\n      by = -a[1],\n      bz = -a[2],\n      bw = a[3];\n  out[0] = (ax * bw + aw * bx + ay * bz - az * by) * 2;\n  out[1] = (ay * bw + aw * by + az * bx - ax * bz) * 2;\n  out[2] = (az * bw + aw * bz + ax * by - ay * bx) * 2;\n  return out;\n}\n/**\n * Translates a dual quat by the given vector\n *\n * @param {quat2} out the receiving dual quaternion\n * @param {ReadonlyQuat2} a the dual quaternion to translate\n * @param {ReadonlyVec3} v vector to translate by\n * @returns {quat2} out\n */\n\nexport function translate(out, a, v) {\n  var ax1 = a[0],\n      ay1 = a[1],\n      az1 = a[2],\n      aw1 = a[3],\n      bx1 = v[0] * 0.5,\n      by1 = v[1] * 0.5,\n      bz1 = v[2] * 0.5,\n      ax2 = a[4],\n      ay2 = a[5],\n      az2 = a[6],\n      aw2 = a[7];\n  out[0] = ax1;\n  out[1] = ay1;\n  out[2] = az1;\n  out[3] = aw1;\n  out[4] = aw1 * bx1 + ay1 * bz1 - az1 * by1 + ax2;\n  out[5] = aw1 * by1 + az1 * bx1 - ax1 * bz1 + ay2;\n  out[6] = aw1 * bz1 + ax1 * by1 - ay1 * bx1 + az2;\n  out[7] = -ax1 * bx1 - ay1 * by1 - az1 * bz1 + aw2;\n  return out;\n}\n/**\n * Rotates a dual quat around the X axis\n *\n * @param {quat2} out the receiving dual quaternion\n * @param {ReadonlyQuat2} a the dual quaternion to rotate\n * @param {number} rad how far should the rotation be\n * @returns {quat2} out\n */\n\nexport function rotateX(out, a, rad) {\n  var bx = -a[0],\n      by = -a[1],\n      bz = -a[2],\n      bw = a[3],\n      ax = a[4],\n      ay = a[5],\n      az = a[6],\n      aw = a[7],\n      ax1 = ax * bw + aw * bx + ay * bz - az * by,\n      ay1 = ay * bw + aw * by + az * bx - ax * bz,\n      az1 = az * bw + aw * bz + ax * by - ay * bx,\n      aw1 = aw * bw - ax * bx - ay * by - az * bz;\n  quat.rotateX(out, a, rad);\n  bx = out[0];\n  by = out[1];\n  bz = out[2];\n  bw = out[3];\n  out[4] = ax1 * bw + aw1 * bx + ay1 * bz - az1 * by;\n  out[5] = ay1 * bw + aw1 * by + az1 * bx - ax1 * bz;\n  out[6] = az1 * bw + aw1 * bz + ax1 * by - ay1 * bx;\n  out[7] = aw1 * bw - ax1 * bx - ay1 * by - az1 * bz;\n  return out;\n}\n/**\n * Rotates a dual quat around the Y axis\n *\n * @param {quat2} out the receiving dual quaternion\n * @param {ReadonlyQuat2} a the dual quaternion to rotate\n * @param {number} rad how far should the rotation be\n * @returns {quat2} out\n */\n\nexport function rotateY(out, a, rad) {\n  var bx = -a[0],\n      by = -a[1],\n      bz = -a[2],\n      bw = a[3],\n      ax = a[4],\n      ay = a[5],\n      az = a[6],\n      aw = a[7],\n      ax1 = ax * bw + aw * bx + ay * bz - az * by,\n      ay1 = ay * bw + aw * by + az * bx - ax * bz,\n      az1 = az * bw + aw * bz + ax * by - ay * bx,\n      aw1 = aw * bw - ax * bx - ay * by - az * bz;\n  quat.rotateY(out, a, rad);\n  bx = out[0];\n  by = out[1];\n  bz = out[2];\n  bw = out[3];\n  out[4] = ax1 * bw + aw1 * bx + ay1 * bz - az1 * by;\n  out[5] = ay1 * bw + aw1 * by + az1 * bx - ax1 * bz;\n  out[6] = az1 * bw + aw1 * bz + ax1 * by - ay1 * bx;\n  out[7] = aw1 * bw - ax1 * bx - ay1 * by - az1 * bz;\n  return out;\n}\n/**\n * Rotates a dual quat around the Z axis\n *\n * @param {quat2} out the receiving dual quaternion\n * @param {ReadonlyQuat2} a the dual quaternion to rotate\n * @param {number} rad how far should the rotation be\n * @returns {quat2} out\n */\n\nexport function rotateZ(out, a, rad) {\n  var bx = -a[0],\n      by = -a[1],\n      bz = -a[2],\n      bw = a[3],\n      ax = a[4],\n      ay = a[5],\n      az = a[6],\n      aw = a[7],\n      ax1 = ax * bw + aw * bx + ay * bz - az * by,\n      ay1 = ay * bw + aw * by + az * bx - ax * bz,\n      az1 = az * bw + aw * bz + ax * by - ay * bx,\n      aw1 = aw * bw - ax * bx - ay * by - az * bz;\n  quat.rotateZ(out, a, rad);\n  bx = out[0];\n  by = out[1];\n  bz = out[2];\n  bw = out[3];\n  out[4] = ax1 * bw + aw1 * bx + ay1 * bz - az1 * by;\n  out[5] = ay1 * bw + aw1 * by + az1 * bx - ax1 * bz;\n  out[6] = az1 * bw + aw1 * bz + ax1 * by - ay1 * bx;\n  out[7] = aw1 * bw - ax1 * bx - ay1 * by - az1 * bz;\n  return out;\n}\n/**\n * Rotates a dual quat by a given quaternion (a * q)\n *\n * @param {quat2} out the receiving dual quaternion\n * @param {ReadonlyQuat2} a the dual quaternion to rotate\n * @param {ReadonlyQuat} q quaternion to rotate by\n * @returns {quat2} out\n */\n\nexport function rotateByQuatAppend(out, a, q) {\n  var qx = q[0],\n      qy = q[1],\n      qz = q[2],\n      qw = q[3],\n      ax = a[0],\n      ay = a[1],\n      az = a[2],\n      aw = a[3];\n  out[0] = ax * qw + aw * qx + ay * qz - az * qy;\n  out[1] = ay * qw + aw * qy + az * qx - ax * qz;\n  out[2] = az * qw + aw * qz + ax * qy - ay * qx;\n  out[3] = aw * qw - ax * qx - ay * qy - az * qz;\n  ax = a[4];\n  ay = a[5];\n  az = a[6];\n  aw = a[7];\n  out[4] = ax * qw + aw * qx + ay * qz - az * qy;\n  out[5] = ay * qw + aw * qy + az * qx - ax * qz;\n  out[6] = az * qw + aw * qz + ax * qy - ay * qx;\n  out[7] = aw * qw - ax * qx - ay * qy - az * qz;\n  return out;\n}\n/**\n * Rotates a dual quat by a given quaternion (q * a)\n *\n * @param {quat2} out the receiving dual quaternion\n * @param {ReadonlyQuat} q quaternion to rotate by\n * @param {ReadonlyQuat2} a the dual quaternion to rotate\n * @returns {quat2} out\n */\n\nexport function rotateByQuatPrepend(out, q, a) {\n  var qx = q[0],\n      qy = q[1],\n      qz = q[2],\n      qw = q[3],\n      bx = a[0],\n      by = a[1],\n      bz = a[2],\n      bw = a[3];\n  out[0] = qx * bw + qw * bx + qy * bz - qz * by;\n  out[1] = qy * bw + qw * by + qz * bx - qx * bz;\n  out[2] = qz * bw + qw * bz + qx * by - qy * bx;\n  out[3] = qw * bw - qx * bx - qy * by - qz * bz;\n  bx = a[4];\n  by = a[5];\n  bz = a[6];\n  bw = a[7];\n  out[4] = qx * bw + qw * bx + qy * bz - qz * by;\n  out[5] = qy * bw + qw * by + qz * bx - qx * bz;\n  out[6] = qz * bw + qw * bz + qx * by - qy * bx;\n  out[7] = qw * bw - qx * bx - qy * by - qz * bz;\n  return out;\n}\n/**\n * Rotates a dual quat around a given axis. Does the normalisation automatically\n *\n * @param {quat2} out the receiving dual quaternion\n * @param {ReadonlyQuat2} a the dual quaternion to rotate\n * @param {ReadonlyVec3} axis the axis to rotate around\n * @param {Number} rad how far the rotation should be\n * @returns {quat2} out\n */\n\nexport function rotateAroundAxis(out, a, axis, rad) {\n  //Special case for rad = 0\n  if (Math.abs(rad) < glMatrix.EPSILON) {\n    return copy(out, a);\n  }\n\n  var axisLength = Math.hypot(axis[0], axis[1], axis[2]);\n  rad = rad * 0.5;\n  var s = Math.sin(rad);\n  var bx = s * axis[0] / axisLength;\n  var by = s * axis[1] / axisLength;\n  var bz = s * axis[2] / axisLength;\n  var bw = Math.cos(rad);\n  var ax1 = a[0],\n      ay1 = a[1],\n      az1 = a[2],\n      aw1 = a[3];\n  out[0] = ax1 * bw + aw1 * bx + ay1 * bz - az1 * by;\n  out[1] = ay1 * bw + aw1 * by + az1 * bx - ax1 * bz;\n  out[2] = az1 * bw + aw1 * bz + ax1 * by - ay1 * bx;\n  out[3] = aw1 * bw - ax1 * bx - ay1 * by - az1 * bz;\n  var ax = a[4],\n      ay = a[5],\n      az = a[6],\n      aw = a[7];\n  out[4] = ax * bw + aw * bx + ay * bz - az * by;\n  out[5] = ay * bw + aw * by + az * bx - ax * bz;\n  out[6] = az * bw + aw * bz + ax * by - ay * bx;\n  out[7] = aw * bw - ax * bx - ay * by - az * bz;\n  return out;\n}\n/**\n * Adds two dual quat's\n *\n * @param {quat2} out the receiving dual quaternion\n * @param {ReadonlyQuat2} a the first operand\n * @param {ReadonlyQuat2} b the second operand\n * @returns {quat2} out\n * @function\n */\n\nexport function add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  out[2] = a[2] + b[2];\n  out[3] = a[3] + b[3];\n  out[4] = a[4] + b[4];\n  out[5] = a[5] + b[5];\n  out[6] = a[6] + b[6];\n  out[7] = a[7] + b[7];\n  return out;\n}\n/**\n * Multiplies two dual quat's\n *\n * @param {quat2} out the receiving dual quaternion\n * @param {ReadonlyQuat2} a the first operand\n * @param {ReadonlyQuat2} b the second operand\n * @returns {quat2} out\n */\n\nexport function multiply(out, a, b) {\n  var ax0 = a[0],\n      ay0 = a[1],\n      az0 = a[2],\n      aw0 = a[3],\n      bx1 = b[4],\n      by1 = b[5],\n      bz1 = b[6],\n      bw1 = b[7],\n      ax1 = a[4],\n      ay1 = a[5],\n      az1 = a[6],\n      aw1 = a[7],\n      bx0 = b[0],\n      by0 = b[1],\n      bz0 = b[2],\n      bw0 = b[3];\n  out[0] = ax0 * bw0 + aw0 * bx0 + ay0 * bz0 - az0 * by0;\n  out[1] = ay0 * bw0 + aw0 * by0 + az0 * bx0 - ax0 * bz0;\n  out[2] = az0 * bw0 + aw0 * bz0 + ax0 * by0 - ay0 * bx0;\n  out[3] = aw0 * bw0 - ax0 * bx0 - ay0 * by0 - az0 * bz0;\n  out[4] = ax0 * bw1 + aw0 * bx1 + ay0 * bz1 - az0 * by1 + ax1 * bw0 + aw1 * bx0 + ay1 * bz0 - az1 * by0;\n  out[5] = ay0 * bw1 + aw0 * by1 + az0 * bx1 - ax0 * bz1 + ay1 * bw0 + aw1 * by0 + az1 * bx0 - ax1 * bz0;\n  out[6] = az0 * bw1 + aw0 * bz1 + ax0 * by1 - ay0 * bx1 + az1 * bw0 + aw1 * bz0 + ax1 * by0 - ay1 * bx0;\n  out[7] = aw0 * bw1 - ax0 * bx1 - ay0 * by1 - az0 * bz1 + aw1 * bw0 - ax1 * bx0 - ay1 * by0 - az1 * bz0;\n  return out;\n}\n/**\n * Alias for {@link quat2.multiply}\n * @function\n */\n\nexport var mul = multiply;\n/**\n * Scales a dual quat by a scalar number\n *\n * @param {quat2} out the receiving dual quat\n * @param {ReadonlyQuat2} a the dual quat to scale\n * @param {Number} b amount to scale the dual quat by\n * @returns {quat2} out\n * @function\n */\n\nexport function scale(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  out[2] = a[2] * b;\n  out[3] = a[3] * b;\n  out[4] = a[4] * b;\n  out[5] = a[5] * b;\n  out[6] = a[6] * b;\n  out[7] = a[7] * b;\n  return out;\n}\n/**\n * Calculates the dot product of two dual quat's (The dot product of the real parts)\n *\n * @param {ReadonlyQuat2} a the first operand\n * @param {ReadonlyQuat2} b the second operand\n * @returns {Number} dot product of a and b\n * @function\n */\n\nexport var dot = quat.dot;\n/**\n * Performs a linear interpolation between two dual quats's\n * NOTE: The resulting dual quaternions won't always be normalized (The error is most noticeable when t = 0.5)\n *\n * @param {quat2} out the receiving dual quat\n * @param {ReadonlyQuat2} a the first operand\n * @param {ReadonlyQuat2} b the second operand\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\n * @returns {quat2} out\n */\n\nexport function lerp(out, a, b, t) {\n  var mt = 1 - t;\n  if (dot(a, b) < 0) t = -t;\n  out[0] = a[0] * mt + b[0] * t;\n  out[1] = a[1] * mt + b[1] * t;\n  out[2] = a[2] * mt + b[2] * t;\n  out[3] = a[3] * mt + b[3] * t;\n  out[4] = a[4] * mt + b[4] * t;\n  out[5] = a[5] * mt + b[5] * t;\n  out[6] = a[6] * mt + b[6] * t;\n  out[7] = a[7] * mt + b[7] * t;\n  return out;\n}\n/**\n * Calculates the inverse of a dual quat. If they are normalized, conjugate is cheaper\n *\n * @param {quat2} out the receiving dual quaternion\n * @param {ReadonlyQuat2} a dual quat to calculate inverse of\n * @returns {quat2} out\n */\n\nexport function invert(out, a) {\n  var sqlen = squaredLength(a);\n  out[0] = -a[0] / sqlen;\n  out[1] = -a[1] / sqlen;\n  out[2] = -a[2] / sqlen;\n  out[3] = a[3] / sqlen;\n  out[4] = -a[4] / sqlen;\n  out[5] = -a[5] / sqlen;\n  out[6] = -a[6] / sqlen;\n  out[7] = a[7] / sqlen;\n  return out;\n}\n/**\n * Calculates the conjugate of a dual quat\n * If the dual quaternion is normalized, this function is faster than quat2.inverse and produces the same result.\n *\n * @param {quat2} out the receiving quaternion\n * @param {ReadonlyQuat2} a quat to calculate conjugate of\n * @returns {quat2} out\n */\n\nexport function conjugate(out, a) {\n  out[0] = -a[0];\n  out[1] = -a[1];\n  out[2] = -a[2];\n  out[3] = a[3];\n  out[4] = -a[4];\n  out[5] = -a[5];\n  out[6] = -a[6];\n  out[7] = a[7];\n  return out;\n}\n/**\n * Calculates the length of a dual quat\n *\n * @param {ReadonlyQuat2} a dual quat to calculate length of\n * @returns {Number} length of a\n * @function\n */\n\nexport var length = quat.length;\n/**\n * Alias for {@link quat2.length}\n * @function\n */\n\nexport var len = length;\n/**\n * Calculates the squared length of a dual quat\n *\n * @param {ReadonlyQuat2} a dual quat to calculate squared length of\n * @returns {Number} squared length of a\n * @function\n */\n\nexport var squaredLength = quat.squaredLength;\n/**\n * Alias for {@link quat2.squaredLength}\n * @function\n */\n\nexport var sqrLen = squaredLength;\n/**\n * Normalize a dual quat\n *\n * @param {quat2} out the receiving dual quaternion\n * @param {ReadonlyQuat2} a dual quaternion to normalize\n * @returns {quat2} out\n * @function\n */\n\nexport function normalize(out, a) {\n  var magnitude = squaredLength(a);\n\n  if (magnitude > 0) {\n    magnitude = Math.sqrt(magnitude);\n    var a0 = a[0] / magnitude;\n    var a1 = a[1] / magnitude;\n    var a2 = a[2] / magnitude;\n    var a3 = a[3] / magnitude;\n    var b0 = a[4];\n    var b1 = a[5];\n    var b2 = a[6];\n    var b3 = a[7];\n    var a_dot_b = a0 * b0 + a1 * b1 + a2 * b2 + a3 * b3;\n    out[0] = a0;\n    out[1] = a1;\n    out[2] = a2;\n    out[3] = a3;\n    out[4] = (b0 - a0 * a_dot_b) / magnitude;\n    out[5] = (b1 - a1 * a_dot_b) / magnitude;\n    out[6] = (b2 - a2 * a_dot_b) / magnitude;\n    out[7] = (b3 - a3 * a_dot_b) / magnitude;\n  }\n\n  return out;\n}\n/**\n * Returns a string representation of a dual quatenion\n *\n * @param {ReadonlyQuat2} a dual quaternion to represent as a string\n * @returns {String} string representation of the dual quat\n */\n\nexport function str(a) {\n  return \"quat2(\" + a[0] + \", \" + a[1] + \", \" + a[2] + \", \" + a[3] + \", \" + a[4] + \", \" + a[5] + \", \" + a[6] + \", \" + a[7] + \")\";\n}\n/**\n * Returns whether or not the dual quaternions have exactly the same elements in the same position (when compared with ===)\n *\n * @param {ReadonlyQuat2} a the first dual quaternion.\n * @param {ReadonlyQuat2} b the second dual quaternion.\n * @returns {Boolean} true if the dual quaternions are equal, false otherwise.\n */\n\nexport function exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3] && a[4] === b[4] && a[5] === b[5] && a[6] === b[6] && a[7] === b[7];\n}\n/**\n * Returns whether or not the dual quaternions have approximately the same elements in the same position.\n *\n * @param {ReadonlyQuat2} a the first dual quat.\n * @param {ReadonlyQuat2} b the second dual quat.\n * @returns {Boolean} true if the dual quats are equal, false otherwise.\n */\n\nexport function equals(a, b) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3],\n      a4 = a[4],\n      a5 = a[5],\n      a6 = a[6],\n      a7 = a[7];\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2],\n      b3 = b[3],\n      b4 = b[4],\n      b5 = b[5],\n      b6 = b[6],\n      b7 = b[7];\n  return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2)) && Math.abs(a3 - b3) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a3), Math.abs(b3)) && Math.abs(a4 - b4) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a4), Math.abs(b4)) && Math.abs(a5 - b5) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a5), Math.abs(b5)) && Math.abs(a6 - b6) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a6), Math.abs(b6)) && Math.abs(a7 - b7) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a7), Math.abs(b7));\n}","import * as glMatrix from \"./common.js\";\n/**\n * 2 Dimensional Vector\n * @module vec2\n */\n\n/**\n * Creates a new, empty vec2\n *\n * @returns {vec2} a new 2D vector\n */\n\nexport function create() {\n  var out = new glMatrix.ARRAY_TYPE(2);\n\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\n    out[0] = 0;\n    out[1] = 0;\n  }\n\n  return out;\n}\n/**\n * Creates a new vec2 initialized with values from an existing vector\n *\n * @param {ReadonlyVec2} a vector to clone\n * @returns {vec2} a new 2D vector\n */\n\nexport function clone(a) {\n  var out = new glMatrix.ARRAY_TYPE(2);\n  out[0] = a[0];\n  out[1] = a[1];\n  return out;\n}\n/**\n * Creates a new vec2 initialized with the given values\n *\n * @param {Number} x X component\n * @param {Number} y Y component\n * @returns {vec2} a new 2D vector\n */\n\nexport function fromValues(x, y) {\n  var out = new glMatrix.ARRAY_TYPE(2);\n  out[0] = x;\n  out[1] = y;\n  return out;\n}\n/**\n * Copy the values from one vec2 to another\n *\n * @param {vec2} out the receiving vector\n * @param {ReadonlyVec2} a the source vector\n * @returns {vec2} out\n */\n\nexport function copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  return out;\n}\n/**\n * Set the components of a vec2 to the given values\n *\n * @param {vec2} out the receiving vector\n * @param {Number} x X component\n * @param {Number} y Y component\n * @returns {vec2} out\n */\n\nexport function set(out, x, y) {\n  out[0] = x;\n  out[1] = y;\n  return out;\n}\n/**\n * Adds two vec2's\n *\n * @param {vec2} out the receiving vector\n * @param {ReadonlyVec2} a the first operand\n * @param {ReadonlyVec2} b the second operand\n * @returns {vec2} out\n */\n\nexport function add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  return out;\n}\n/**\n * Subtracts vector b from vector a\n *\n * @param {vec2} out the receiving vector\n * @param {ReadonlyVec2} a the first operand\n * @param {ReadonlyVec2} b the second operand\n * @returns {vec2} out\n */\n\nexport function subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  return out;\n}\n/**\n * Multiplies two vec2's\n *\n * @param {vec2} out the receiving vector\n * @param {ReadonlyVec2} a the first operand\n * @param {ReadonlyVec2} b the second operand\n * @returns {vec2} out\n */\n\nexport function multiply(out, a, b) {\n  out[0] = a[0] * b[0];\n  out[1] = a[1] * b[1];\n  return out;\n}\n/**\n * Divides two vec2's\n *\n * @param {vec2} out the receiving vector\n * @param {ReadonlyVec2} a the first operand\n * @param {ReadonlyVec2} b the second operand\n * @returns {vec2} out\n */\n\nexport function divide(out, a, b) {\n  out[0] = a[0] / b[0];\n  out[1] = a[1] / b[1];\n  return out;\n}\n/**\n * Math.ceil the components of a vec2\n *\n * @param {vec2} out the receiving vector\n * @param {ReadonlyVec2} a vector to ceil\n * @returns {vec2} out\n */\n\nexport function ceil(out, a) {\n  out[0] = Math.ceil(a[0]);\n  out[1] = Math.ceil(a[1]);\n  return out;\n}\n/**\n * Math.floor the components of a vec2\n *\n * @param {vec2} out the receiving vector\n * @param {ReadonlyVec2} a vector to floor\n * @returns {vec2} out\n */\n\nexport function floor(out, a) {\n  out[0] = Math.floor(a[0]);\n  out[1] = Math.floor(a[1]);\n  return out;\n}\n/**\n * Returns the minimum of two vec2's\n *\n * @param {vec2} out the receiving vector\n * @param {ReadonlyVec2} a the first operand\n * @param {ReadonlyVec2} b the second operand\n * @returns {vec2} out\n */\n\nexport function min(out, a, b) {\n  out[0] = Math.min(a[0], b[0]);\n  out[1] = Math.min(a[1], b[1]);\n  return out;\n}\n/**\n * Returns the maximum of two vec2's\n *\n * @param {vec2} out the receiving vector\n * @param {ReadonlyVec2} a the first operand\n * @param {ReadonlyVec2} b the second operand\n * @returns {vec2} out\n */\n\nexport function max(out, a, b) {\n  out[0] = Math.max(a[0], b[0]);\n  out[1] = Math.max(a[1], b[1]);\n  return out;\n}\n/**\n * Math.round the components of a vec2\n *\n * @param {vec2} out the receiving vector\n * @param {ReadonlyVec2} a vector to round\n * @returns {vec2} out\n */\n\nexport function round(out, a) {\n  out[0] = Math.round(a[0]);\n  out[1] = Math.round(a[1]);\n  return out;\n}\n/**\n * Scales a vec2 by a scalar number\n *\n * @param {vec2} out the receiving vector\n * @param {ReadonlyVec2} a the vector to scale\n * @param {Number} b amount to scale the vector by\n * @returns {vec2} out\n */\n\nexport function scale(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  return out;\n}\n/**\n * Adds two vec2's after scaling the second operand by a scalar value\n *\n * @param {vec2} out the receiving vector\n * @param {ReadonlyVec2} a the first operand\n * @param {ReadonlyVec2} b the second operand\n * @param {Number} scale the amount to scale b by before adding\n * @returns {vec2} out\n */\n\nexport function scaleAndAdd(out, a, b, scale) {\n  out[0] = a[0] + b[0] * scale;\n  out[1] = a[1] + b[1] * scale;\n  return out;\n}\n/**\n * Calculates the euclidian distance between two vec2's\n *\n * @param {ReadonlyVec2} a the first operand\n * @param {ReadonlyVec2} b the second operand\n * @returns {Number} distance between a and b\n */\n\nexport function distance(a, b) {\n  var x = b[0] - a[0],\n      y = b[1] - a[1];\n  return Math.hypot(x, y);\n}\n/**\n * Calculates the squared euclidian distance between two vec2's\n *\n * @param {ReadonlyVec2} a the first operand\n * @param {ReadonlyVec2} b the second operand\n * @returns {Number} squared distance between a and b\n */\n\nexport function squaredDistance(a, b) {\n  var x = b[0] - a[0],\n      y = b[1] - a[1];\n  return x * x + y * y;\n}\n/**\n * Calculates the length of a vec2\n *\n * @param {ReadonlyVec2} a vector to calculate length of\n * @returns {Number} length of a\n */\n\nexport function length(a) {\n  var x = a[0],\n      y = a[1];\n  return Math.hypot(x, y);\n}\n/**\n * Calculates the squared length of a vec2\n *\n * @param {ReadonlyVec2} a vector to calculate squared length of\n * @returns {Number} squared length of a\n */\n\nexport function squaredLength(a) {\n  var x = a[0],\n      y = a[1];\n  return x * x + y * y;\n}\n/**\n * Negates the components of a vec2\n *\n * @param {vec2} out the receiving vector\n * @param {ReadonlyVec2} a vector to negate\n * @returns {vec2} out\n */\n\nexport function negate(out, a) {\n  out[0] = -a[0];\n  out[1] = -a[1];\n  return out;\n}\n/**\n * Returns the inverse of the components of a vec2\n *\n * @param {vec2} out the receiving vector\n * @param {ReadonlyVec2} a vector to invert\n * @returns {vec2} out\n */\n\nexport function inverse(out, a) {\n  out[0] = 1.0 / a[0];\n  out[1] = 1.0 / a[1];\n  return out;\n}\n/**\n * Normalize a vec2\n *\n * @param {vec2} out the receiving vector\n * @param {ReadonlyVec2} a vector to normalize\n * @returns {vec2} out\n */\n\nexport function normalize(out, a) {\n  var x = a[0],\n      y = a[1];\n  var len = x * x + y * y;\n\n  if (len > 0) {\n    //TODO: evaluate use of glm_invsqrt here?\n    len = 1 / Math.sqrt(len);\n  }\n\n  out[0] = a[0] * len;\n  out[1] = a[1] * len;\n  return out;\n}\n/**\n * Calculates the dot product of two vec2's\n *\n * @param {ReadonlyVec2} a the first operand\n * @param {ReadonlyVec2} b the second operand\n * @returns {Number} dot product of a and b\n */\n\nexport function dot(a, b) {\n  return a[0] * b[0] + a[1] * b[1];\n}\n/**\n * Computes the cross product of two vec2's\n * Note that the cross product must by definition produce a 3D vector\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec2} a the first operand\n * @param {ReadonlyVec2} b the second operand\n * @returns {vec3} out\n */\n\nexport function cross(out, a, b) {\n  var z = a[0] * b[1] - a[1] * b[0];\n  out[0] = out[1] = 0;\n  out[2] = z;\n  return out;\n}\n/**\n * Performs a linear interpolation between two vec2's\n *\n * @param {vec2} out the receiving vector\n * @param {ReadonlyVec2} a the first operand\n * @param {ReadonlyVec2} b the second operand\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\n * @returns {vec2} out\n */\n\nexport function lerp(out, a, b, t) {\n  var ax = a[0],\n      ay = a[1];\n  out[0] = ax + t * (b[0] - ax);\n  out[1] = ay + t * (b[1] - ay);\n  return out;\n}\n/**\n * Generates a random vector with the given scale\n *\n * @param {vec2} out the receiving vector\n * @param {Number} [scale] Length of the resulting vector. If ommitted, a unit vector will be returned\n * @returns {vec2} out\n */\n\nexport function random(out, scale) {\n  scale = scale || 1.0;\n  var r = glMatrix.RANDOM() * 2.0 * Math.PI;\n  out[0] = Math.cos(r) * scale;\n  out[1] = Math.sin(r) * scale;\n  return out;\n}\n/**\n * Transforms the vec2 with a mat2\n *\n * @param {vec2} out the receiving vector\n * @param {ReadonlyVec2} a the vector to transform\n * @param {ReadonlyMat2} m matrix to transform with\n * @returns {vec2} out\n */\n\nexport function transformMat2(out, a, m) {\n  var x = a[0],\n      y = a[1];\n  out[0] = m[0] * x + m[2] * y;\n  out[1] = m[1] * x + m[3] * y;\n  return out;\n}\n/**\n * Transforms the vec2 with a mat2d\n *\n * @param {vec2} out the receiving vector\n * @param {ReadonlyVec2} a the vector to transform\n * @param {ReadonlyMat2d} m matrix to transform with\n * @returns {vec2} out\n */\n\nexport function transformMat2d(out, a, m) {\n  var x = a[0],\n      y = a[1];\n  out[0] = m[0] * x + m[2] * y + m[4];\n  out[1] = m[1] * x + m[3] * y + m[5];\n  return out;\n}\n/**\n * Transforms the vec2 with a mat3\n * 3rd vector component is implicitly '1'\n *\n * @param {vec2} out the receiving vector\n * @param {ReadonlyVec2} a the vector to transform\n * @param {ReadonlyMat3} m matrix to transform with\n * @returns {vec2} out\n */\n\nexport function transformMat3(out, a, m) {\n  var x = a[0],\n      y = a[1];\n  out[0] = m[0] * x + m[3] * y + m[6];\n  out[1] = m[1] * x + m[4] * y + m[7];\n  return out;\n}\n/**\n * Transforms the vec2 with a mat4\n * 3rd vector component is implicitly '0'\n * 4th vector component is implicitly '1'\n *\n * @param {vec2} out the receiving vector\n * @param {ReadonlyVec2} a the vector to transform\n * @param {ReadonlyMat4} m matrix to transform with\n * @returns {vec2} out\n */\n\nexport function transformMat4(out, a, m) {\n  var x = a[0];\n  var y = a[1];\n  out[0] = m[0] * x + m[4] * y + m[12];\n  out[1] = m[1] * x + m[5] * y + m[13];\n  return out;\n}\n/**\n * Rotate a 2D vector\n * @param {vec2} out The receiving vec2\n * @param {ReadonlyVec2} a The vec2 point to rotate\n * @param {ReadonlyVec2} b The origin of the rotation\n * @param {Number} rad The angle of rotation in radians\n * @returns {vec2} out\n */\n\nexport function rotate(out, a, b, rad) {\n  //Translate point to the origin\n  var p0 = a[0] - b[0],\n      p1 = a[1] - b[1],\n      sinC = Math.sin(rad),\n      cosC = Math.cos(rad); //perform rotation and translate to correct position\n\n  out[0] = p0 * cosC - p1 * sinC + b[0];\n  out[1] = p0 * sinC + p1 * cosC + b[1];\n  return out;\n}\n/**\n * Get the angle between two 2D vectors\n * @param {ReadonlyVec2} a The first operand\n * @param {ReadonlyVec2} b The second operand\n * @returns {Number} The angle in radians\n */\n\nexport function angle(a, b) {\n  var x1 = a[0],\n      y1 = a[1],\n      x2 = b[0],\n      y2 = b[1],\n      // mag is the product of the magnitudes of a and b\n  mag = Math.sqrt(x1 * x1 + y1 * y1) * Math.sqrt(x2 * x2 + y2 * y2),\n      // mag &&.. short circuits if mag == 0\n  cosine = mag && (x1 * x2 + y1 * y2) / mag; // Math.min(Math.max(cosine, -1), 1) clamps the cosine between -1 and 1\n\n  return Math.acos(Math.min(Math.max(cosine, -1), 1));\n}\n/**\n * Set the components of a vec2 to zero\n *\n * @param {vec2} out the receiving vector\n * @returns {vec2} out\n */\n\nexport function zero(out) {\n  out[0] = 0.0;\n  out[1] = 0.0;\n  return out;\n}\n/**\n * Returns a string representation of a vector\n *\n * @param {ReadonlyVec2} a vector to represent as a string\n * @returns {String} string representation of the vector\n */\n\nexport function str(a) {\n  return \"vec2(\" + a[0] + \", \" + a[1] + \")\";\n}\n/**\n * Returns whether or not the vectors exactly have the same elements in the same position (when compared with ===)\n *\n * @param {ReadonlyVec2} a The first vector.\n * @param {ReadonlyVec2} b The second vector.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\n\nexport function exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1];\n}\n/**\n * Returns whether or not the vectors have approximately the same elements in the same position.\n *\n * @param {ReadonlyVec2} a The first vector.\n * @param {ReadonlyVec2} b The second vector.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\n\nexport function equals(a, b) {\n  var a0 = a[0],\n      a1 = a[1];\n  var b0 = b[0],\n      b1 = b[1];\n  return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1));\n}\n/**\n * Alias for {@link vec2.length}\n * @function\n */\n\nexport var len = length;\n/**\n * Alias for {@link vec2.subtract}\n * @function\n */\n\nexport var sub = subtract;\n/**\n * Alias for {@link vec2.multiply}\n * @function\n */\n\nexport var mul = multiply;\n/**\n * Alias for {@link vec2.divide}\n * @function\n */\n\nexport var div = divide;\n/**\n * Alias for {@link vec2.distance}\n * @function\n */\n\nexport var dist = distance;\n/**\n * Alias for {@link vec2.squaredDistance}\n * @function\n */\n\nexport var sqrDist = squaredDistance;\n/**\n * Alias for {@link vec2.squaredLength}\n * @function\n */\n\nexport var sqrLen = squaredLength;\n/**\n * Perform some operation over an array of vec2s.\n *\n * @param {Array} a the array of vectors to iterate over\n * @param {Number} stride Number of elements between the start of each vec2. If 0 assumes tightly packed\n * @param {Number} offset Number of elements to skip at the beginning of the array\n * @param {Number} count Number of vec2s to iterate over. If 0 iterates over entire array\n * @param {Function} fn Function to call for each vector in the array\n * @param {Object} [arg] additional argument to pass to fn\n * @returns {Array} a\n * @function\n */\n\nexport var forEach = function () {\n  var vec = create();\n  return function (a, stride, offset, count, fn, arg) {\n    var i, l;\n\n    if (!stride) {\n      stride = 2;\n    }\n\n    if (!offset) {\n      offset = 0;\n    }\n\n    if (count) {\n      l = Math.min(count * stride + offset, a.length);\n    } else {\n      l = a.length;\n    }\n\n    for (i = offset; i < l; i += stride) {\n      vec[0] = a[i];\n      vec[1] = a[i + 1];\n      fn(vec, vec, arg);\n      a[i] = vec[0];\n      a[i + 1] = vec[1];\n    }\n\n    return a;\n  };\n}();"],"names":[],"version":3,"file":"index.3d214d75.js.map","sourceRoot":"/__parcel_source_root/"}